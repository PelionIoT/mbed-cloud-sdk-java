// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.filtering.FilterOperator;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEventsListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEventsListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(32),
                                                                                           Long.valueOf(47),
                                                                                           Order.getDefault(),
                                                                                           "ee556c5d-77dc-4eee-94fb-ee8a8fa7332b",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = deviceeventslistoptions1.clone();
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the filters method.
     */
    @SuppressWarnings({ "boxing", "resource" })
    @Test
    public void testFilters() {
        try {
            DeviceEventsListOptions option = new DeviceEventsListOptions().equalToDeviceId("20cbc605-58a4-40e8-b060-2ad53b6162f6")
                                                                          .notEqualToDeviceId("8447a170-3962-404e-b61e-cd8ad0b8a62f")
                                                                          .inDeviceIds(Arrays.asList("1b87deb7-a20a-4fa4-8fcc-33dac173a3cf",
                                                                                                     "53c1cf11-e181-4322-b338-64649b0151dd",
                                                                                                     "5573f456-6408-4abb-8a16-b13e440b0a12",
                                                                                                     "bcf401a1-153c-4edb-9d11-a2bbef3d8a2b",
                                                                                                     "2c746d8b-10ca-4cfe-ba5a-531ff99e1790"))
                                                                          .notInDeviceIds(Arrays.asList("8be042a1-0dae-4602-bae2-a51b11f75d64"))
                                                                          .equalToDescription("602e7d73-f015-4822-a0d3-d8abf4135ab7")
                                                                          .notEqualToDescription("ed785729-5d05-4cc8-ad1b-764360515814")
                                                                          .inDescriptions(Arrays.asList("0895a557-eb98-4e9b-88da-d5533a441241",
                                                                                                        "79b9aaea-0247-482a-8a18-f9035cbe75cd",
                                                                                                        "b0798a3d-8324-4bad-ae51-68de55a19d05",
                                                                                                        "04ff700a-9359-4d84-89e7-3cf52074ff78",
                                                                                                        "f22e90be-bfde-41f8-ba95-0500ba1727ec"))
                                                                          .notInDescriptions(Arrays.asList("8d7720e0-4f14-484d-b7b0-2d649c5f743e"))
                                                                          .inDateTimes(Arrays.asList(new Date(1609926592441L),
                                                                                                     new Date(1609926587518L),
                                                                                                     new Date(1609926590357L),
                                                                                                     new Date(1609926589869L),
                                                                                                     new Date(1609926587810L),
                                                                                                     new Date(1609926588468L)))
                                                                          .notInDateTimes(Arrays.asList(new Date(1609926586116L),
                                                                                                        new Date(1609926588833L),
                                                                                                        new Date(1609926587914L),
                                                                                                        new Date(1609926594893L),
                                                                                                        new Date(1609926592138L)))
                                                                          .lessThanDateTime(new Date(1609926591928L))
                                                                          .greaterThanDateTime(new Date(1609926591927L))
                                                                          .equalToStateChange(Boolean.FALSE)
                                                                          .notEqualToStateChange(Boolean.TRUE)
                                                                          .equalToId("ca8246ce-d33d-44e4-8abc-b1252423d8d2")
                                                                          .notEqualToId("dc413426-343c-4f2e-9f90-358bcdf3909e")
                                                                          .inIds(Arrays.asList("436d039c-f888-4f91-bab6-5c76c67837bf",
                                                                                               "7b889703-45ee-4adf-9caf-354e1688f01c"))
                                                                          .notInIds(Arrays.asList("047b88ca-8857-436f-93ca-ccbc2063fd0d",
                                                                                                  "3f57aab2-0914-4644-9a38-444de5a13cd6",
                                                                                                  "db98b808-c723-48df-919b-24b2354acce5",
                                                                                                  "7bf176c3-52b6-4015-91a4-6675571e0318"))
                                                                          .equalToEventType("f8c40cfa-dff0-450a-ba40-a802d596d584")
                                                                          .notEqualToEventType("e64f6d0b-c5dd-4dde-965d-810d3a6d2da7")
                                                                          .inEventTypes(Arrays.asList("6b8422f8-1fbf-4701-897c-166360ec5464",
                                                                                                      "0900a1fd-dfcc-4d89-9804-f17b04000066",
                                                                                                      "38b0f6a7-1433-482a-a31a-75b7245d175d",
                                                                                                      "21995e59-51e9-40fd-92d1-ea373bb26ebb",
                                                                                                      "2f054011-cdf8-4b45-baf4-17e845339836"))
                                                                          .notInEventTypes(Arrays.asList("f7b81df7-3e12-4e0c-882c-84b5028b4639",
                                                                                                         "a48784c7-16d2-4f8c-ab73-3de7e97a947c",
                                                                                                         "39379ca7-4462-4e26-9468-27f51ea28a56",
                                                                                                         "be09a1de-e526-4a81-8d3b-c5488f6662cb",
                                                                                                         "a7530bd7-6e85-45e4-9504-a5620214d99c",
                                                                                                         "91dde786-23b2-45d9-9dfa-c9a69177e901",
                                                                                                         "d21b33c3-cd2f-45d3-b9c9-3ee9f4a2350d"));
            assertTrue(option.hasFilters());
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("20cbc605-58a4-40e8-b060-2ad53b6162f6",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals("8447a170-3962-404e-b61e-cd8ad0b8a62f",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("1b87deb7-a20a-4fa4-8fcc-33dac173a3cf", "53c1cf11-e181-4322-b338-64649b0151dd",
                                       "5573f456-6408-4abb-8a16-b13e440b0a12", "bcf401a1-153c-4edb-9d11-a2bbef3d8a2b",
                                       "2c746d8b-10ca-4cfe-ba5a-531ff99e1790"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getDeviceIdFilters());
            assertEquals(Arrays.asList("8be042a1-0dae-4602-bae2-a51b11f75d64"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DEVICE_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("602e7d73-f015-4822-a0d3-d8abf4135ab7",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getDescriptionFilters());
            assertEquals("ed785729-5d05-4cc8-ad1b-764360515814",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("0895a557-eb98-4e9b-88da-d5533a441241", "79b9aaea-0247-482a-8a18-f9035cbe75cd",
                                       "b0798a3d-8324-4bad-ae51-68de55a19d05", "04ff700a-9359-4d84-89e7-3cf52074ff78",
                                       "f22e90be-bfde-41f8-ba95-0500ba1727ec"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION, FilterOperator.NOT_IN));
            assertNotNull(option.getDescriptionFilters());
            assertEquals(Arrays.asList("8d7720e0-4f14-484d-b7b0-2d649c5f743e"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1609926592441L), new Date(1609926587518L), new Date(1609926590357L),
                                       new Date(1609926589869L), new Date(1609926587810L), new Date(1609926588468L)),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.NOT_IN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(Arrays.asList(new Date(1609926586116L), new Date(1609926588833L), new Date(1609926587914L),
                                       new Date(1609926594893L), new Date(1609926592138L)),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.LESS_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1609926591928L),
                         ListOptionsEncoder.encodeSingleLessThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                       Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME, FilterOperator.GREATER_THAN));
            assertNotNull(option.getDateTimeFilters());
            assertEquals(new Date(1609926591927L),
                         ListOptionsEncoder.encodeSingleGreaterThanFilter(DeviceEventsListOptions.TAG_FILTER_BY_DATE_TIME,
                                                                          Date.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.FALSE,
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                    Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getStateChangeFilters());
            assertEquals(Boolean.TRUE,
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_STATE_CHANGE,
                                                                       Boolean.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("ca8246ce-d33d-44e4-8abc-b1252423d8d2",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getIdFilters());
            assertEquals("dc413426-343c-4f2e-9f90-358bcdf3909e",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("436d039c-f888-4f91-bab6-5c76c67837bf", "7b889703-45ee-4adf-9caf-354e1688f01c"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, List.class,
                                                                 option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_ID));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID, FilterOperator.NOT_IN));
            assertNotNull(option.getIdFilters());
            assertEquals(Arrays.asList("047b88ca-8857-436f-93ca-ccbc2063fd0d", "3f57aab2-0914-4644-9a38-444de5a13cd6",
                                       "db98b808-c723-48df-919b-24b2354acce5", "7bf176c3-52b6-4015-91a4-6675571e0318"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_ID,
                                                                    List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("f8c40cfa-dff0-450a-ba40-a802d596d584",
                         ListOptionsEncoder.encodeSingleEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_EQUAL));
            assertNotNull(option.getEventTypeFilters());
            assertEquals("e64f6d0b-c5dd-4dde-965d-810d3a6d2da7",
                         ListOptionsEncoder.encodeSingleNotEqualFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                       String.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("6b8422f8-1fbf-4701-897c-166360ec5464", "0900a1fd-dfcc-4d89-9804-f17b04000066",
                                       "38b0f6a7-1433-482a-a31a-75b7245d175d", "21995e59-51e9-40fd-92d1-ea373bb26ebb",
                                       "2f054011-cdf8-4b45-baf4-17e845339836"),
                         ListOptionsEncoder.encodeSingleInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                 List.class, option));
            assertTrue(option.hasFilters(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE));
            assertTrue(option.hasFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE, FilterOperator.NOT_IN));
            assertNotNull(option.getEventTypeFilters());
            assertEquals(Arrays.asList("f7b81df7-3e12-4e0c-882c-84b5028b4639", "a48784c7-16d2-4f8c-ab73-3de7e97a947c",
                                       "39379ca7-4462-4e26-9468-27f51ea28a56", "be09a1de-e526-4a81-8d3b-c5488f6662cb",
                                       "a7530bd7-6e85-45e4-9504-a5620214d99c", "91dde786-23b2-45d9-9dfa-c9a69177e901",
                                       "d21b33c3-cd2f-45d3-b9c9-3ee9f4a2350d"),
                         ListOptionsEncoder.encodeSingleNotInFilter(DeviceEventsListOptions.TAG_FILTER_BY_EVENT_TYPE,
                                                                    List.class, option));
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(-8),
                                                                                           Long.valueOf(126),
                                                                                           Order.getDefault(),
                                                                                           "c730d9bc-c78c-4988-91c6-ef8da9272b9e",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(-8),
                                                                                           Long.valueOf(126),
                                                                                           Order.getDefault(),
                                                                                           "c730d9bc-c78c-4988-91c6-ef8da9272b9e",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2.hashCode(), deviceeventslistoptions1.hashCode());
            int hashCode = deviceeventslistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceeventslistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEventsListOptions deviceeventslistoptions1 = new DeviceEventsListOptions(Integer.valueOf(41),
                                                                                           Long.valueOf(-7),
                                                                                           Order.getDefault(),
                                                                                           "f4315be1-e1fc-4de1-a169-334ffbfb4c2e",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions2 = new DeviceEventsListOptions(Integer.valueOf(41),
                                                                                           Long.valueOf(-7),
                                                                                           Order.getDefault(),
                                                                                           "f4315be1-e1fc-4de1-a169-334ffbfb4c2e",
                                                                                           null, null);
            DeviceEventsListOptions deviceeventslistoptions3 = new DeviceEventsListOptions(Integer.valueOf(-95),
                                                                                           Long.valueOf(-16),
                                                                                           Order.getDefault(),
                                                                                           "954f4553-bb71-4626-bebd-172af363206b",
                                                                                           null, null);
            assertNotNull(deviceeventslistoptions1);
            assertNotNull(deviceeventslistoptions2);
            assertNotNull(deviceeventslistoptions3);
            assertNotSame(deviceeventslistoptions2, deviceeventslistoptions1);
            assertNotSame(deviceeventslistoptions3, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions2, deviceeventslistoptions1);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions2);
            assertEquals(deviceeventslistoptions1, deviceeventslistoptions1);
            assertFalse(deviceeventslistoptions1.equals(null));
            assertNotEquals(deviceeventslistoptions3, deviceeventslistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
