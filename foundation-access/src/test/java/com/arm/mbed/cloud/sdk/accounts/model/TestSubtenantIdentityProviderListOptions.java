// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import com.arm.mbed.cloud.sdk.common.Order;
import org.junit.Test;

/**
 * Unit tests for Model SubtenantIdentityProviderListOptions.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestSubtenantIdentityProviderListOptions {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            SubtenantIdentityProviderListOptions subtenantidentityproviderlistoptions1 = new SubtenantIdentityProviderListOptions(Integer.valueOf(3),
                                                                                                                                  Long.valueOf(88),
                                                                                                                                  Order.getDefault(),
                                                                                                                                  "81e235df-22f2-48f4-b62e-4eddb9c31928",
                                                                                                                                  null,
                                                                                                                                  null);
            SubtenantIdentityProviderListOptions subtenantidentityproviderlistoptions2 = subtenantidentityproviderlistoptions1.clone();
            assertNotNull(subtenantidentityproviderlistoptions1);
            assertNotNull(subtenantidentityproviderlistoptions2);
            assertNotSame(subtenantidentityproviderlistoptions2, subtenantidentityproviderlistoptions1);
            assertEquals(subtenantidentityproviderlistoptions2, subtenantidentityproviderlistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            SubtenantIdentityProviderListOptions subtenantidentityproviderlistoptions1 = new SubtenantIdentityProviderListOptions(Integer.valueOf(36),
                                                                                                                                  Long.valueOf(-121),
                                                                                                                                  Order.getDefault(),
                                                                                                                                  "5bf31e61-6cff-4e39-86a7-abb3aea8a916",
                                                                                                                                  null,
                                                                                                                                  null);
            SubtenantIdentityProviderListOptions subtenantidentityproviderlistoptions2 = new SubtenantIdentityProviderListOptions(Integer.valueOf(36),
                                                                                                                                  Long.valueOf(-121),
                                                                                                                                  Order.getDefault(),
                                                                                                                                  "5bf31e61-6cff-4e39-86a7-abb3aea8a916",
                                                                                                                                  null,
                                                                                                                                  null);
            assertNotNull(subtenantidentityproviderlistoptions1);
            assertNotNull(subtenantidentityproviderlistoptions2);
            assertNotSame(subtenantidentityproviderlistoptions2, subtenantidentityproviderlistoptions1);
            assertEquals(subtenantidentityproviderlistoptions2, subtenantidentityproviderlistoptions1);
            assertEquals(subtenantidentityproviderlistoptions2.hashCode(),
                         subtenantidentityproviderlistoptions1.hashCode());
            int hashCode = subtenantidentityproviderlistoptions1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, subtenantidentityproviderlistoptions1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            SubtenantIdentityProviderListOptions subtenantidentityproviderlistoptions1 = new SubtenantIdentityProviderListOptions(Integer.valueOf(-22),
                                                                                                                                  Long.valueOf(57),
                                                                                                                                  Order.getDefault(),
                                                                                                                                  "92e1c975-6860-4e7b-b88c-638f0efe732f",
                                                                                                                                  null,
                                                                                                                                  null);
            SubtenantIdentityProviderListOptions subtenantidentityproviderlistoptions2 = new SubtenantIdentityProviderListOptions(Integer.valueOf(-22),
                                                                                                                                  Long.valueOf(57),
                                                                                                                                  Order.getDefault(),
                                                                                                                                  "92e1c975-6860-4e7b-b88c-638f0efe732f",
                                                                                                                                  null,
                                                                                                                                  null);
            SubtenantIdentityProviderListOptions subtenantidentityproviderlistoptions3 = new SubtenantIdentityProviderListOptions(Integer.valueOf(80),
                                                                                                                                  Long.valueOf(47),
                                                                                                                                  Order.getDefault(),
                                                                                                                                  "5fe9ea2f-9a59-4321-8ca8-f10b37e0c5fc",
                                                                                                                                  null,
                                                                                                                                  null);
            assertNotNull(subtenantidentityproviderlistoptions1);
            assertNotNull(subtenantidentityproviderlistoptions2);
            assertNotNull(subtenantidentityproviderlistoptions3);
            assertNotSame(subtenantidentityproviderlistoptions2, subtenantidentityproviderlistoptions1);
            assertNotSame(subtenantidentityproviderlistoptions3, subtenantidentityproviderlistoptions1);
            assertEquals(subtenantidentityproviderlistoptions2, subtenantidentityproviderlistoptions1);
            assertEquals(subtenantidentityproviderlistoptions2, subtenantidentityproviderlistoptions1);
            assertEquals(subtenantidentityproviderlistoptions1, subtenantidentityproviderlistoptions2);
            assertEquals(subtenantidentityproviderlistoptions1, subtenantidentityproviderlistoptions1);
            assertFalse(subtenantidentityproviderlistoptions1.equals(null));
            assertNotEquals(subtenantidentityproviderlistoptions3, subtenantidentityproviderlistoptions1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
