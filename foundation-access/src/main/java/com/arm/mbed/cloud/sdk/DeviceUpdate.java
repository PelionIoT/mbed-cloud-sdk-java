// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk;

import com.arm.mbed.cloud.sdk.annotations.API;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Module;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.AbstractModule;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.CloudCaller;
import com.arm.mbed.cloud.sdk.common.CloudRequest;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.adapters.DataFileAdapter;
import com.arm.mbed.cloud.sdk.common.listing.ListOptions;
import com.arm.mbed.cloud.sdk.common.listing.ListOptionsEncoder;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.common.listing.PageRequester;
import com.arm.mbed.cloud.sdk.common.listing.Paginator;
import com.arm.mbed.cloud.sdk.common.model.DataFile;
import com.arm.mbed.cloud.sdk.deviceupdate.adapters.CampaignDeviceMetadataAdapter;
import com.arm.mbed.cloud.sdk.deviceupdate.adapters.CampaignStatisticsAdapter;
import com.arm.mbed.cloud.sdk.deviceupdate.adapters.CampaignStatisticsEventsAdapter;
import com.arm.mbed.cloud.sdk.deviceupdate.adapters.FirmwareImageAdapter;
import com.arm.mbed.cloud.sdk.deviceupdate.adapters.FirmwareManifestAdapter;
import com.arm.mbed.cloud.sdk.deviceupdate.adapters.UpdateCampaignAdapter;
import com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignDeviceMetadata;
import com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignDeviceMetadataListOptions;
import com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatistics;
import com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatisticsEvents;
import com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatisticsEventsListOptions;
import com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatisticsId;
import com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatisticsListOptions;
import com.arm.mbed.cloud.sdk.deviceupdate.model.DeviceUpdateEndpoints;
import com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImage;
import com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareImageListOptions;
import com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifest;
import com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifestListOptions;
import com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign;
import com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignListOptions;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.CampaignDeviceMetadataPage;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.EventType;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.EventTypeList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.EventTypeSummary;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.EventTypeSummaryList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImagePage;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareManifestPage;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UpdateCampaignPage;
import org.joda.time.DateTime;
import retrofit2.Call;

/**
 * Specifies DeviceUpdate APIs.
 * <p>
 * API definitions exposing functionality for dealing with device updates
 */
@Preamble(description = "Specifies DeviceUpdate APIs.")
@Internal
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
@Module
public class DeviceUpdate extends AbstractModule {
    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_CAMPAIGN = "campaign";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_CAMPAIGN_DEVICE_METADATA = "campaignDeviceMetadata";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_CAMPAIGN_ID = "campaignId";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_CAMPAIGN_STATISTICS = "campaignStatistics";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_CAMPAIGN_STATISTICS_EVENTS = "campaignStatisticsEvents";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_FIRMWARE_IMAGE = "firmwareImage";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_FIRMWARE_IMAGE_FILE = "firmwareImageFile";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_FIRMWARE_MANIFEST = "firmwareManifest";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_FIRMWARE_MANIFEST_FILE = "firmwareManifestFile";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_ID = "id";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_KEY_TABLE_FILE = "keyTableFile";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_NAME = "name";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_SUMMARY_STATUS_ID = "summaryStatusId";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_UPDATE_CAMPAIGN = "updateCampaign";

    /**
     * module endpoints.
     */
    @Internal
    private final DeviceUpdateEndpoints endpoints;

    /**
     * Constructor.
     * 
     * @param client
     *            Cloud client @see {@link ApiClientWrapper}.
     */
    public DeviceUpdate(ApiClientWrapper client) {
        super(client);
        this.endpoints = new DeviceUpdateEndpoints(this.serviceRegistry);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            connection options @see {@link ConnectionOptions}.
     */
    public DeviceUpdate(ConnectionOptions options) {
        super(options);
        this.endpoints = new DeviceUpdateEndpoints(this.serviceRegistry);
    }

    /**
     * Constructor.
     * 
     * @param context
     *            SDK context @see {@link SdkContext}.
     */
    public DeviceUpdate(SdkContext context) {
        super(context);
        this.endpoints = new DeviceUpdateEndpoints(this.serviceRegistry);
    }

    /**
     * Creates a {@link Paginator} for the list of campaign device metadata matching filter options.
     * 
     * <p>
     * Similar to
     * {@link #deviceMetadata(com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignDeviceMetadataListOptions, com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param options
     *            list options.
     * @param updateCampaign
     *            an update campaign.
     * @return paginator over the list of campaign device metadata
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<CampaignDeviceMetadata>
           allDeviceMetadata(@Nullable CampaignDeviceMetadataListOptions options,
                             @NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        checkNotNull(updateCampaign, TAG_UPDATE_CAMPAIGN);
        final CampaignDeviceMetadataListOptions finalOptions = (options == null) ? new CampaignDeviceMetadataListOptions()
                                                                                 : options;
        final UpdateCampaign finalUpdateCampaign = updateCampaign;
        return new Paginator<CampaignDeviceMetadata>(finalOptions, new PageRequester<CampaignDeviceMetadata>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<CampaignDeviceMetadata> requestNewPage(ListOptions options) throws MbedCloudException {
                return deviceMetadata((CampaignDeviceMetadataListOptions) options, finalUpdateCampaign);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of campaign device metadata matching filter options.
     * 
     * <p>
     * Gets an iterator over all update campaigns matching filter options.
     * 
     * @param id
     *            The campaign ID.
     * @param options
     *            list options.
     * @return paginator over the list of campaign device metadata
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<CampaignDeviceMetadata>
           allDeviceMetadata(@NonNull String id,
                             @Nullable CampaignDeviceMetadataListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final CampaignDeviceMetadataListOptions finalOptions = (options == null) ? new CampaignDeviceMetadataListOptions()
                                                                                 : options;
        return new Paginator<CampaignDeviceMetadata>(finalOptions, new PageRequester<CampaignDeviceMetadata>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<CampaignDeviceMetadata> requestNewPage(ListOptions options) throws MbedCloudException {
                return deviceMetadata(finalId, (CampaignDeviceMetadataListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of campaign statistics events matching filter options.
     * 
     * <p>
     * Similar to
     * {@link #events(com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatisticsEventsListOptions, com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatistics)}
     * 
     * @param options
     *            list options.
     * @param campaignStatistics
     *            a campaign statistics.
     * @return paginator over the list of campaign statistics events
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<CampaignStatisticsEvents>
           allEvents(@Nullable CampaignStatisticsEventsListOptions options,
                     @NonNull CampaignStatistics campaignStatistics) throws MbedCloudException {
        checkNotNull(campaignStatistics, TAG_CAMPAIGN_STATISTICS);
        final CampaignStatisticsEventsListOptions finalOptions = (options == null) ? new CampaignStatisticsEventsListOptions()
                                                                                   : options;
        final CampaignStatistics finalCampaignStatistics = campaignStatistics;
        return new Paginator<CampaignStatisticsEvents>(finalOptions, new PageRequester<CampaignStatisticsEvents>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<CampaignStatisticsEvents>
                   requestNewPage(ListOptions options) throws MbedCloudException {
                return events((CampaignStatisticsEventsListOptions) options, finalCampaignStatistics);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of campaign statistics events matching filter options.
     * 
     * <p>
     * Gets an iterator over all campaign statistics matching filter options.
     * 
     * @param campaignId
     *            The campaign ID.
     * @param id
     *            The summary status. For example, fail.
     * @param options
     *            list options.
     * @return paginator over the list of campaign statistics events
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<CampaignStatisticsEvents>
           allEvents(@NonNull String campaignId, @NonNull CampaignStatisticsId id,
                     @Nullable CampaignStatisticsEventsListOptions options) throws MbedCloudException {
        checkNotNull(campaignId, TAG_CAMPAIGN_ID);
        checkNotNull(id, TAG_ID);
        final String finalCampaignId = campaignId;
        final CampaignStatisticsId finalId = id;
        final CampaignStatisticsEventsListOptions finalOptions = (options == null) ? new CampaignStatisticsEventsListOptions()
                                                                                   : options;
        return new Paginator<CampaignStatisticsEvents>(finalOptions, new PageRequester<CampaignStatisticsEvents>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<CampaignStatisticsEvents>
                   requestNewPage(ListOptions options) throws MbedCloudException {
                return events(finalCampaignId, finalId, (CampaignStatisticsEventsListOptions) options);
            }
        });
    }

    /**
     * Adds a subtenant identity provider. Add manually to fix compile error
     * 
     */
    @API
    @Nullable
    public Paginator<CampaignStatisticsEvents>
           allEvents(@NonNull String campaignId, @NonNull String id,
                     @Nullable CampaignStatisticsEventsListOptions options) throws MbedCloudException {
        checkNotNull(campaignId, TAG_CAMPAIGN_ID);
        checkNotNull(id, TAG_ID);

        return allEvents(campaignId, CampaignStatisticsId.valueOf(id), options);
    }

    /**
     * Archive a campaign.
     * 
     * 
     * <p>
     * Archive a campaign. [br] **Usage example:** ``` curl -X POST
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/016e83ddc649000000000001001000b8/archive \ -H
     * 'Authorization: Bearer [api_key]' ```
     * 
     * @param id
     *            The campaign ID.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void archive(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "archive()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getDeviceUpdateCampaignsApi().updateCampaignArchive(finalId);
            }
        }, true);
    }

    /**
     * Archive a campaign.
     * 
     * 
     * <p>
     * Similar to {@link #archive(String)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void archive(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        checkNotNull(updateCampaign, TAG_UPDATE_CAMPAIGN);
        archive(updateCampaign.getId());
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public DeviceUpdate clone() {
        return new DeviceUpdate(this);
    }

    /**
     * Adds a firmware image.
     * 
     * <p>
     * Similar to {@link #createFirmwareImage(com.arm.mbed.cloud.sdk.common.model.DataFile, String, String)}
     * 
     * @param firmwareImageFile
     *            The firmware image file to upload. File name must not exceed 166 characters.
     * @return an added firmware image
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareImage createFirmwareImage(@NonNull DataFile firmwareImageFile) throws MbedCloudException {
        checkNotNull(firmwareImageFile, TAG_FIRMWARE_IMAGE_FILE);
        return createFirmwareImage(firmwareImageFile, (String) null, (String) null);
    }

    /**
     * Adds a firmware image.
     * 
     * <p>
     * Similar to {@link #createFirmwareImage(com.arm.mbed.cloud.sdk.common.model.DataFile, String, String)}
     * 
     * @param firmwareImageFile
     *            The firmware image file to upload. File name must not exceed 166 characters.
     * @param firmwareImage
     *            a firmware image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareImage createFirmwareImage(@NonNull DataFile firmwareImageFile,
                                             @NonNull FirmwareImage firmwareImage) throws MbedCloudException {
        checkNotNull(firmwareImageFile, TAG_FIRMWARE_IMAGE_FILE);
        checkNotNull(firmwareImage, TAG_FIRMWARE_IMAGE);
        checkModelValidity(firmwareImageFile, TAG_FIRMWARE_IMAGE_FILE);
        checkModelValidity(firmwareImage, TAG_FIRMWARE_IMAGE);
        return createFirmwareImage(firmwareImageFile, firmwareImage.getDescription(), firmwareImage.getName());
    }

    /**
     * Adds a firmware image.
     * 
     * <p>
     * Create a firmware image. [BR/] **Note:** Only use this API for images smaller than 100 MB. For larger images,
     * [upload in
     * chunks](https://developer.pelion.com/docs/device-management/current/updating-firmware/uploading-a-large-
     * firmware-image.html). [br] **Usage example:** ``` curl -X POST
     * https://api.us-east-1.mbedcloud.com/v3/firmware-images \ -H 'Authorization: Bearer [api_key]' \ -H 'Content-Type:
     * multipart/form-data' \ -F 'datafile=@myimage.bin;type=application/octet-stream' -F 'description=bla bla' \ -F
     * 'name=My Linux Image' ```
     * 
     * This is not a standard create method as it uploads a file which creates an entity which contains URIs to the
     * uploaded file.
     * 
     * @param firmwareImageFile
     *            The firmware image file to upload. File name must not exceed 166 characters.
     * @param description
     *            The description of the object.
     * @param name
     *            The firmware image name.
     * @return an added firmware image
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareImage createFirmwareImage(@NonNull DataFile firmwareImageFile, @Nullable String description,
                                             @Nullable String name) throws MbedCloudException {
        checkNotNull(firmwareImageFile, TAG_FIRMWARE_IMAGE_FILE);
        checkModelValidity(firmwareImageFile, TAG_FIRMWARE_IMAGE_FILE);
        final DataFile finalFirmwareImageFile = firmwareImageFile;
        final String finalDescription = description;
        final String finalName = name;
        return CloudCaller.call(this, "createFirmwareImage()", FirmwareImageAdapter.getMapper(),
                                new CloudRequest.CloudCall<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage>
                                           call() {
                                        return endpoints.getDeviceUpdateFirmwareImagesApi()
                                                        .firmwareImageCreate(DataFileAdapter.reverseMap("datafile",
                                                                                                        finalFirmwareImageFile),
                                                                             finalDescription, finalName);
                                    }
                                }, true);
    }

    /**
     * Adds a firmware manifest.
     * 
     * <p>
     * Similar to
     * {@link #createFirmwareManifest(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.common.model.DataFile, String, String)}
     * 
     * @param firmwareManifestFile
     *            The manifest file to create. The API gateway enforces the account-specific file size. File name must
     *            not exceed 100 characters.
     * @param keyTableFile
     *            The key table of pre-shared keys for devices. The table is generated by the manifest tool. File name
     *            must not exceed 100 characters.
     * @param firmwareManifest
     *            a firmware manifest.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareManifest
           createFirmwareManifest(@NonNull DataFile firmwareManifestFile, @Nullable DataFile keyTableFile,
                                  @NonNull FirmwareManifest firmwareManifest) throws MbedCloudException {
        checkNotNull(firmwareManifestFile, TAG_FIRMWARE_MANIFEST_FILE);
        checkNotNull(firmwareManifest, TAG_FIRMWARE_MANIFEST);
        checkModelValidity(firmwareManifestFile, TAG_FIRMWARE_MANIFEST_FILE);
        checkModelValidity(keyTableFile, TAG_KEY_TABLE_FILE);
        checkModelValidity(firmwareManifest, TAG_FIRMWARE_MANIFEST);
        return createFirmwareManifest(firmwareManifestFile, keyTableFile, firmwareManifest.getName(),
                                      firmwareManifest.getDescription());
    }

    /**
     * Adds a firmware manifest.
     * 
     * <p>
     * Upload a firmware manifest. The API enforces a maximum manifest size of 2KB. [br] **Usage example:** ``` curl -X
     * POST https://api.us-east-1.mbedcloud.com/v3/firmware-manifests \ -H 'Authorization: Bearer [api_key]' \ -H
     * 'Content-Type: multipart/form-data' \ -F 'datafile=@myimage.bin;type=application/octet-stream' \ -F
     * 'description=bla bla' \ -F 'key_table=@myKeyTable.proto;type=' \ -F 'name=My Manifest' ```
     * 
     * This is not a standard create method as it uploads a file (or files) which creates an entity which contains URIs
     * to the uploaded file(s).
     * 
     * @param firmwareManifestFile
     *            The manifest file to create. The API gateway enforces the account-specific file size. File name must
     *            not exceed 100 characters.
     * @param keyTableFile
     *            The key table of pre-shared keys for devices. The table is generated by the manifest tool. File name
     *            must not exceed 100 characters.
     * @param name
     *            The name of the manifest.
     * @param description
     *            The description of the firmware manifest.
     * @return an added firmware manifest
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareManifest createFirmwareManifest(@NonNull DataFile firmwareManifestFile,
                                                   @Nullable DataFile keyTableFile, @NonNull String name,
                                                   @Nullable String description) throws MbedCloudException {
        checkNotNull(firmwareManifestFile, TAG_FIRMWARE_MANIFEST_FILE);
        checkNotNull(name, TAG_NAME);
        checkModelValidity(firmwareManifestFile, TAG_FIRMWARE_MANIFEST_FILE);
        checkModelValidity(keyTableFile, TAG_KEY_TABLE_FILE);
        final DataFile finalFirmwareManifestFile = firmwareManifestFile;
        final DataFile finalKeyTableFile = keyTableFile;
        final String finalName = name;
        final String finalDescription = description;
        return CloudCaller.call(this, "createFirmwareManifest()", FirmwareManifestAdapter.getMapper(),
                                new CloudRequest.CloudCall<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareManifest>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareManifest>
                                           call() {
                                        return endpoints.getDeviceUpdateFirmwareManifestsApi()
                                                        .firmwareManifestCreate(DataFileAdapter.reverseMap("datafile",
                                                                                                           finalFirmwareManifestFile),
                                                                                finalName, finalDescription,
                                                                                DataFileAdapter.reverseMap("key_table",
                                                                                                           finalKeyTableFile));
                                    }
                                }, true);
    }

    /**
     * Adds a firmware manifest.
     * 
     * <p>
     * Similar to
     * {@link #createFirmwareManifest(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.deviceupdate.model.FirmwareManifest)}
     * 
     * @param firmwareManifestFile
     *            The manifest file to create. The API gateway enforces the account-specific file size. File name must
     *            not exceed 100 characters.
     * @param firmwareManifest
     *            a firmware manifest.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareManifest
           createFirmwareManifest(@NonNull DataFile firmwareManifestFile,
                                  @NonNull FirmwareManifest firmwareManifest) throws MbedCloudException {
        checkNotNull(firmwareManifestFile, TAG_FIRMWARE_MANIFEST_FILE);
        checkNotNull(firmwareManifest, TAG_FIRMWARE_MANIFEST);
        return createFirmwareManifest(firmwareManifestFile, (DataFile) null, firmwareManifest);
    }

    /**
     * Adds a firmware manifest.
     * 
     * <p>
     * Similar to
     * {@link #createFirmwareManifest(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.common.model.DataFile, String, String)}
     * 
     * @param firmwareManifestFile
     *            The manifest file to create. The API gateway enforces the account-specific file size. File name must
     *            not exceed 100 characters.
     * @param name
     *            The name of the manifest.
     * @return an added firmware manifest
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareManifest createFirmwareManifest(@NonNull DataFile firmwareManifestFile,
                                                   @NonNull String name) throws MbedCloudException {
        checkNotNull(firmwareManifestFile, TAG_FIRMWARE_MANIFEST_FILE);
        checkNotNull(name, TAG_NAME);
        return createFirmwareManifest(firmwareManifestFile, (DataFile) null, name, (String) null);
    }

    /**
     * Adds an update campaign.
     * 
     * <p>
     * Create an update campaign.
     * 
     * To include a filter for targeted devices, refer to the filter using `[filter_id]` in the message body. [br]
     * **Usage example:** ``` curl -X POST https://api.us-east-1.mbedcloud.com/v3/update-campaigns \ -H 'Authorization:
     * Bearer [api_key]' \ -H 'content-type: application/json;charset=UTF-8' \ -d '{ "campaign_strategy": "one-shot",
     * "description": "Campaign is for ...", "device_filter": "[filter_id]", "name": "campaign", "root_manifest_id":
     * "56780000000000a5b70000000000bd98" }' ```
     * 
     * @param campaign
     *            an update campaign.
     * @return an added update campaign
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public UpdateCampaign createUpdateCampaign(@NonNull UpdateCampaign campaign) throws MbedCloudException {
        checkNotNull(campaign, TAG_CAMPAIGN);
        checkModelValidity(campaign, TAG_CAMPAIGN);
        final UpdateCampaign finalCampaign = campaign;
        return CloudCaller.call(this, "createUpdateCampaign()", UpdateCampaignAdapter.getMapper(),
                                new CloudRequest.CloudCall<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UpdateCampaign>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UpdateCampaign>
                                           call() {
                                        return endpoints.getDeviceUpdateCampaignsApi()
                                                        .updateCampaignCreate(UpdateCampaignAdapter.reverseMapAddRequest(finalCampaign));
                                    }
                                }, true);
    }

    /**
     * Deletes a firmware image.
     * 
     * <p>
     * Similar to {@link #deleteFirmwareImage(String)}
     * 
     * @param firmwareImage
     *            a firmware image.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteFirmwareImage(@NonNull FirmwareImage firmwareImage) throws MbedCloudException {
        checkNotNull(firmwareImage, TAG_FIRMWARE_IMAGE);
        deleteFirmwareImage(firmwareImage.getId());
    }

    /**
     * Deletes a firmware image.
     * 
     * <p>
     * Delete a firmware image. [br] **Usage example:** ``` curl -X DELETE
     * https://api.us-east-1.mbedcloud.com/v3/firmware-images/11234567f9012ab56790120000789012 \ -H 'Authorization:
     * Bearer [api_key]' ```
     * 
     * @param id
     *            The firmware image ID.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteFirmwareImage(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "deleteFirmwareImage()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getDeviceUpdateFirmwareImagesApi().firmwareImageDestroy(finalId);
            }
        });
    }

    /**
     * Deletes a firmware manifest.
     * 
     * <p>
     * Similar to {@link #deleteFirmwareManifest(String)}
     * 
     * @param firmwareManifest
     *            a firmware manifest.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteFirmwareManifest(@NonNull FirmwareManifest firmwareManifest) throws MbedCloudException {
        checkNotNull(firmwareManifest, TAG_FIRMWARE_MANIFEST);
        deleteFirmwareManifest(firmwareManifest.getId());
    }

    /**
     * Deletes a firmware manifest.
     * 
     * <p>
     * Delete a firmware manifest. [br] **Usage example:** ``` curl -X DELETE
     * https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/11234567f9012ab56780120000789012 \ -H 'Authorization:
     * Bearer [api_key]' ```
     * 
     * @param id
     *            The firmware manifest ID.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteFirmwareManifest(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "deleteFirmwareManifest()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getDeviceUpdateFirmwareManifestsApi().firmwareManifestDestroy(finalId);
            }
        });
    }

    /**
     * Deletes an update campaign.
     * 
     * <p>
     * Delete an update campaign. [br] **Usage example:** ``` curl -X DELETE
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/1123457f9012ab567890120000789012 \ -H 'Authorization:
     * Bearer [api_key]' ```
     * 
     * @param id
     *            The campaign ID.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteUpdateCampaign(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "deleteUpdateCampaign()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getDeviceUpdateCampaignsApi().updateCampaignDestroy(finalId);
            }
        });
    }

    /**
     * Deletes an update campaign.
     * 
     * <p>
     * Similar to {@link #deleteUpdateCampaign(String)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteUpdateCampaign(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        checkNotNull(updateCampaign, TAG_UPDATE_CAMPAIGN);
        deleteUpdateCampaign(updateCampaign.getId());
    }

    /**
     * List all campaign device metadata .
     * 
     * <p>
     * Similar to
     * {@link #deviceMetadata(String, com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignDeviceMetadataListOptions)}
     * 
     * @param options
     *            list options.
     * @param updateCampaign
     *            an update campaign.
     * @return the list of campaign device metadata corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<CampaignDeviceMetadata>
           deviceMetadata(@Nullable CampaignDeviceMetadataListOptions options,
                          @NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        checkNotNull(updateCampaign, TAG_UPDATE_CAMPAIGN);
        checkModelValidity(updateCampaign, TAG_UPDATE_CAMPAIGN);
        return deviceMetadata(updateCampaign.getId(), options);
    }

    /**
     * List all campaign device metadata .
     * 
     * <p>
     * Get metadata for all devices in a campaign. [br] **Usage example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/11234567f9012ab56790120000789012/campaign-device-metadata
     * \ -H 'Authorization: Bearer [api_key]' ```
     * 
     * @param id
     *            The campaign ID.
     * @param options
     *            list options.
     * @return the list of campaign device metadata corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<CampaignDeviceMetadata>
           deviceMetadata(@NonNull String id,
                          @Nullable CampaignDeviceMetadataListOptions options) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        final CampaignDeviceMetadataListOptions finalOptions = (options == null) ? new CampaignDeviceMetadataListOptions()
                                                                                 : options;
        return CloudCaller.call(this, "deviceMetadata()", CampaignDeviceMetadataAdapter.getListMapper(),
                                new CloudRequest.CloudCall<CampaignDeviceMetadataPage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<CampaignDeviceMetadataPage> call() {
                                        return endpoints.getDeviceUpdateCampaignsApi()
                                                        .updateCampaignMetadataList(finalId, finalOptions.getPageSize(),
                                                                                    finalOptions.getOrder().toString(),
                                                                                    finalOptions.getAfter(),
                                                                                    ListOptionsEncoder.encodeInclude(finalOptions));
                                    }
                                });
    }

    /**
     * Get a list of events grouped by summary .
     * 
     * <p>
     * Similar to
     * {@link #events(String, com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatisticsId, com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatisticsEventsListOptions)}
     * 
     * @param options
     *            list options.
     * @param campaignStatistics
     *            a campaign statistics.
     * @return the list of campaign statistics events corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<CampaignStatisticsEvents>
           events(@Nullable CampaignStatisticsEventsListOptions options,
                  @NonNull CampaignStatistics campaignStatistics) throws MbedCloudException {
        checkNotNull(campaignStatistics, TAG_CAMPAIGN_STATISTICS);
        checkModelValidity(campaignStatistics, TAG_CAMPAIGN_STATISTICS);
        return events(campaignStatistics.getCampaignId(), CampaignStatisticsId.getValue(campaignStatistics.getId()),
                      options);
    }

    /**
     * Get a list of events grouped by summary .
     * 
     * <p>
     * Get a list of events grouped by summary. [br] **Usage example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/12345678901234567890123456789012/statistics/skipped/event_types
     * \ -H 'Authorization: Bearer [api_key]' ```
     * 
     * @param campaignId
     *            The campaign ID.
     * @param id
     *            The summary status. For example, fail.
     * @param options
     *            list options.
     * @return the list of campaign statistics events corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<CampaignStatisticsEvents>
           events(@NonNull String campaignId, @NonNull CampaignStatisticsId id,
                  @Nullable CampaignStatisticsEventsListOptions options) throws MbedCloudException {
        checkNotNull(campaignId, TAG_CAMPAIGN_ID);
        checkNotNull(id, TAG_ID);
        final String finalCampaignId = campaignId;
        final CampaignStatisticsId finalId = id;
        final CampaignStatisticsEventsListOptions finalOptions = (options == null) ? new CampaignStatisticsEventsListOptions()
                                                                                   : options;
        return CloudCaller.call(this, "events()", CampaignStatisticsEventsAdapter.getListMapper(),
                                new CloudRequest.CloudCall<EventTypeList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<EventTypeList> call() {
                                        return endpoints.getDeviceUpdateCampaignsApi()
                                                        .updateCampaignEventTypesList(finalCampaignId,
                                                                                      finalId == null ? null
                                                                                                      : finalId.getString());
                                    }
                                });
    }

    /**
     * Adds a subtenant identity provider. Add manually to fix compile error
     * 
     */
    @API
    @Nullable
    public ListResponse<CampaignStatisticsEvents>
           events(@NonNull String campaignId, @NonNull String id,
                  @Nullable CampaignStatisticsEventsListOptions options) throws MbedCloudException {
        checkNotNull(campaignId, TAG_CAMPAIGN_ID);
        checkNotNull(id, TAG_ID);

        return events(campaignId, CampaignStatisticsId.valueOf(id), options);
    }

    /**
     * Gets module endpoints.
     * 
     * @return endpoints
     */
    @Internal
    public DeviceUpdateEndpoints getEndpoints() {
        return endpoints;
    }

    /**
     * Gets module name.
     * 
     * @return module name
     */
    @Override
    @Internal
    public String getModuleName() {
        return "Device update";
    }

    /**
     * Creates a {@link Paginator} for the list of campaign statistics matching filter options.
     * 
     * <p>
     * Gets an iterator over all campaign statistics matching filter options.
     * 
     * @param campaignId
     *            The campaign ID.
     * @param options
     *            list options.
     * @return paginator over the list of campaign statistics
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<CampaignStatistics>
           listAllCampaignStatisticss(@NonNull String campaignId,
                                      @Nullable CampaignStatisticsListOptions options) throws MbedCloudException {
        checkNotNull(campaignId, TAG_CAMPAIGN_ID);
        final String finalCampaignId = campaignId;
        final CampaignStatisticsListOptions finalOptions = (options == null) ? new CampaignStatisticsListOptions()
                                                                             : options;
        return new Paginator<CampaignStatistics>(finalOptions, new PageRequester<CampaignStatistics>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<CampaignStatistics> requestNewPage(ListOptions options) throws MbedCloudException {
                return listCampaignStatisticss(finalCampaignId, (CampaignStatisticsListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of firmware images matching filter options.
     * 
     * <p>
     * Gets an iterator over all firmware images matching filter options.
     * 
     * @param options
     *            list options.
     * @return paginator over the list of firmware images
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public Paginator<FirmwareImage>
           listAllFirmwareImages(@Nullable FirmwareImageListOptions options) throws MbedCloudException {
        final FirmwareImageListOptions finalOptions = (options == null) ? new FirmwareImageListOptions() : options;
        return new Paginator<FirmwareImage>(finalOptions, new PageRequester<FirmwareImage>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<FirmwareImage> requestNewPage(ListOptions options) throws MbedCloudException {
                return listFirmwareImages((FirmwareImageListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of firmware manifests matching filter options.
     * 
     * <p>
     * Gets an iterator over all firmware manifests matching filter options.
     * 
     * @param options
     *            list options.
     * @return paginator over the list of firmware manifests
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public Paginator<FirmwareManifest>
           listAllFirmwareManifests(@Nullable FirmwareManifestListOptions options) throws MbedCloudException {
        final FirmwareManifestListOptions finalOptions = (options == null) ? new FirmwareManifestListOptions()
                                                                           : options;
        return new Paginator<FirmwareManifest>(finalOptions, new PageRequester<FirmwareManifest>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<FirmwareManifest> requestNewPage(ListOptions options) throws MbedCloudException {
                return listFirmwareManifests((FirmwareManifestListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of update campaigns matching filter options.
     * 
     * <p>
     * Gets an iterator over all update campaigns matching filter options.
     * 
     * @param stateEq
     *            a string
     * @param stateNeq
     *            a string
     * @param stateIn
     *            a string
     * @param stateNin
     *            a string
     * @param options
     *            list options.
     * @return paginator over the list of update campaigns
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public Paginator<UpdateCampaign>
           listAllUpdateCampaigns(@Nullable String stateEq, @Nullable String stateNeq, @Nullable String stateIn,
                                  @Nullable String stateNin,
                                  @Nullable UpdateCampaignListOptions options) throws MbedCloudException {
        final String finalStateEq = stateEq;
        final String finalStateNeq = stateNeq;
        final String finalStateIn = stateIn;
        final String finalStateNin = stateNin;
        final UpdateCampaignListOptions finalOptions = (options == null) ? new UpdateCampaignListOptions() : options;
        return new Paginator<UpdateCampaign>(finalOptions, new PageRequester<UpdateCampaign>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<UpdateCampaign> requestNewPage(ListOptions options) throws MbedCloudException {
                return listUpdateCampaigns(finalStateEq, finalStateNeq, finalStateIn, finalStateNin,
                                           (UpdateCampaignListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of update campaigns matching filter options.
     * 
     * <p>
     * Similar to
     * {@link #listAllUpdateCampaigns(String, String, String, String, com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignListOptions)}
     * 
     * @param options
     *            list options.
     * @return paginator over the list of update campaigns
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public Paginator<UpdateCampaign>
           listAllUpdateCampaigns(@Nullable UpdateCampaignListOptions options) throws MbedCloudException {
        return listAllUpdateCampaigns((String) null, (String) null, (String) null, (String) null, options);
    }

    /**
     * Lists campaign statistics matching filter options.
     * 
     * <p>
     * Get a list of statistics for a campaign, including the number of devices reporting specific event codes. [br]
     * **Usage example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/11234567f9012ab56780120000789012/statistics \ -H
     * 'Authorization: Bearer [api_key]' ```
     * 
     * @param campaignId
     *            The campaign ID.
     * @param options
     *            list options.
     * @return the list of campaign statistics corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<CampaignStatistics>
           listCampaignStatisticss(@NonNull String campaignId,
                                   @Nullable CampaignStatisticsListOptions options) throws MbedCloudException {
        checkNotNull(campaignId, TAG_CAMPAIGN_ID);
        final String finalCampaignId = campaignId;
        final CampaignStatisticsListOptions finalOptions = (options == null) ? new CampaignStatisticsListOptions()
                                                                             : options;
        return CloudCaller.call(this, "listCampaignStatisticss()", CampaignStatisticsAdapter.getListMapper(),
                                new CloudRequest.CloudCall<EventTypeSummaryList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<EventTypeSummaryList> call() {
                                        return endpoints.getDeviceUpdateCampaignsApi()
                                                        .updateCampaignStatisticsList(finalCampaignId);
                                    }
                                });
    }

    /**
     * Lists firmware images matching filter options.
     * 
     * <p>
     * List all firmware images. [br] **Usage example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/firmware-images \ -H 'Authorization: Bearer [api_key]' ```
     * 
     * @param options
     *            list options.
     * @return the list of firmware images corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public ListResponse<FirmwareImage>
           listFirmwareImages(@Nullable FirmwareImageListOptions options) throws MbedCloudException {
        final FirmwareImageListOptions finalOptions = (options == null) ? new FirmwareImageListOptions() : options;
        return CloudCaller.call(this, "listFirmwareImages()", FirmwareImageAdapter.getListMapper(),
                                new CloudRequest.CloudCall<FirmwareImagePage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<FirmwareImagePage> call() {
                                        return endpoints.getDeviceUpdateFirmwareImagesApi()
                                                        .firmwareImageList(finalOptions.getPageSize(),
                                                                           finalOptions.getOrder().toString(),
                                                                           finalOptions.getAfter(),
                                                                           ListOptionsEncoder.encodeInclude(finalOptions),
                                                                           null,
                                                                           ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                   finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                         DateTime.class,
                                                                                                                         finalOptions),
                                                                           ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                            DateTime.class,
                                                                                                                            finalOptions),
                                                                           ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                                                                         finalOptions),
                                                                           ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                                                                   finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                                                                         finalOptions),
                                                                           ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                                                                   finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_CHECKSUM,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                                                                      Long.class,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                                                                         Long.class,
                                                                                                                         finalOptions),
                                                                           ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                                                                   finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                         finalOptions),
                                                                           ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                   finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                                                                         finalOptions),
                                                                           ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                                                                   finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_ID,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                                                                         finalOptions),
                                                                           ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                                                                   finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_NAME,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                   finalOptions),
                                                                           ListOptionsEncoder.encodeSingleNotInFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                      finalOptions),
                                                                           ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                         DateTime.class,
                                                                                                                         finalOptions),
                                                                           ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareImageListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                            DateTime.class,
                                                                                                                            finalOptions));
                                    }
                                });
    }

    /**
     * Lists firmware manifests matching filter options.
     * 
     * <p>
     * List all firmware manifests. [br] **Usage example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/firmware-manifests \ -H 'Authorization: Bearer [api_key]' ```
     * 
     * @param options
     *            list options.
     * @return the list of firmware manifests corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public ListResponse<FirmwareManifest>
           listFirmwareManifests(@Nullable FirmwareManifestListOptions options) throws MbedCloudException {
        final FirmwareManifestListOptions finalOptions = (options == null) ? new FirmwareManifestListOptions()
                                                                           : options;
        return CloudCaller.call(this, "listFirmwareManifests()", FirmwareManifestAdapter.getListMapper(),
                                new CloudRequest.CloudCall<FirmwareManifestPage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<FirmwareManifestPage> call() {
                                        return endpoints.getDeviceUpdateFirmwareManifestsApi()
                                                        .firmwareManifestList(finalOptions.getPageSize(),
                                                                              finalOptions.getOrder().toString(),
                                                                              finalOptions.getAfter(),
                                                                              ListOptionsEncoder.encodeInclude(finalOptions),
                                                                              null,
                                                                              ListOptionsEncoder.encodeSingleInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                      finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareManifestListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                            DateTime.class,
                                                                                                                            finalOptions),
                                                                              ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareManifestListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                               DateTime.class,
                                                                                                                               finalOptions),
                                                                              ListOptionsEncoder.encodeSingleEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                                                                            finalOptions),
                                                                              ListOptionsEncoder.encodeSingleInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                                                                      finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DATAFILE_URL,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                                                                         Long.class,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                                                                            Long.class,
                                                                                                                            finalOptions),
                                                                              ListOptionsEncoder.encodeSingleInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                                                                      finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DATAFILE_SIZE,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                            finalOptions),
                                                                              ListOptionsEncoder.encodeSingleInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                      finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DEVICE_CLASS,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DEVICE_CLASS,
                                                                                                                            finalOptions),
                                                                              ListOptionsEncoder.encodeSingleInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DEVICE_CLASS,
                                                                                                                      finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_DEVICE_CLASS,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_ID,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_ID,
                                                                                                                            finalOptions),
                                                                              ListOptionsEncoder.encodeSingleInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_ID,
                                                                                                                      finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_ID,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_NAME,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotEqualFilter(FirmwareManifestListOptions.TAG_FILTER_BY_NAME,
                                                                                                                            finalOptions),
                                                                              ListOptionsEncoder.encodeSingleInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_NAME,
                                                                                                                      finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_NAME,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_TIMESTAMP,
                                                                                                                      finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_TIMESTAMP,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareManifestListOptions.TAG_FILTER_BY_TIMESTAMP,
                                                                                                                            DateTime.class,
                                                                                                                            finalOptions),
                                                                              ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareManifestListOptions.TAG_FILTER_BY_TIMESTAMP,
                                                                                                                               DateTime.class,
                                                                                                                               finalOptions),
                                                                              ListOptionsEncoder.encodeSingleInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                      finalOptions),
                                                                              ListOptionsEncoder.encodeSingleNotInFilter(FirmwareManifestListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                         finalOptions),
                                                                              ListOptionsEncoder.encodeSingleLessThanFilter(FirmwareManifestListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                            DateTime.class,
                                                                                                                            finalOptions),
                                                                              ListOptionsEncoder.encodeSingleGreaterThanFilter(FirmwareManifestListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                               DateTime.class,
                                                                                                                               finalOptions));
                                    }
                                });
    }

    /**
     * Lists update campaigns matching filter options.
     * 
     * <p>
     * Get update campaigns for devices specified by a filter. [br] **Usage example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns \ -H 'Authorization: Bearer [api_key]' ```
     * 
     * @param stateEq
     *            a string
     * @param stateNeq
     *            a string
     * @param stateIn
     *            a string
     * @param stateNin
     *            a string
     * @param options
     *            list options.
     * @return the list of update campaigns corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public ListResponse<UpdateCampaign>
           listUpdateCampaigns(@Nullable String stateEq, @Nullable String stateNeq, @Nullable String stateIn,
                               @Nullable String stateNin,
                               @Nullable UpdateCampaignListOptions options) throws MbedCloudException {
        final String finalStateEq = stateEq;
        final String finalStateNeq = stateNeq;
        final String finalStateIn = stateIn;
        final String finalStateNin = stateNin;
        final UpdateCampaignListOptions finalOptions = (options == null) ? new UpdateCampaignListOptions() : options;
        return CloudCaller.call(this, "listUpdateCampaigns()", UpdateCampaignAdapter.getListMapper(),
                                new CloudRequest.CloudCall<UpdateCampaignPage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<UpdateCampaignPage> call() {
                                        return endpoints.getDeviceUpdateCampaignsApi()
                                                        .updateCampaignList(finalOptions.getPageSize(),
                                                                            finalOptions.getOrder().toString(),
                                                                            finalOptions.getAfter(),
                                                                            ListOptionsEncoder.encodeInclude(finalOptions),
                                                                            null,
                                                                            ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleLessThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                          DateTime.class,
                                                                                                                          finalOptions),
                                                                            ListOptionsEncoder.encodeSingleGreaterThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_CREATED_AT,
                                                                                                                             DateTime.class,
                                                                                                                             finalOptions),
                                                                            ListOptionsEncoder.encodeSingleEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                          finalOptions),
                                                                            ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DESCRIPTION,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER,
                                                                                                                          finalOptions),
                                                                            ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_DEVICE_FILTER,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleLessThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED,
                                                                                                                          DateTime.class,
                                                                                                                          finalOptions),
                                                                            ListOptionsEncoder.encodeSingleGreaterThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_FINISHED,
                                                                                                                             DateTime.class,
                                                                                                                             finalOptions),
                                                                            ListOptionsEncoder.encodeSingleEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID,
                                                                                                                          finalOptions),
                                                                            ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ID,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME,
                                                                                                                          finalOptions),
                                                                            ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_NAME,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotEqualFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                                                                                                          finalOptions),
                                                                            ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_ROOT_MANIFEST_ID,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleLessThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT,
                                                                                                                          DateTime.class,
                                                                                                                          finalOptions),
                                                                            ListOptionsEncoder.encodeSingleGreaterThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_STARTED_AT,
                                                                                                                             DateTime.class,
                                                                                                                             finalOptions),
                                                                            finalStateEq, finalStateNeq, finalStateIn,
                                                                            finalStateNin,
                                                                            ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleLessThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                          DateTime.class,
                                                                                                                          finalOptions),
                                                                            ListOptionsEncoder.encodeSingleGreaterThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_UPDATED_AT,
                                                                                                                             DateTime.class,
                                                                                                                             finalOptions),
                                                                            ListOptionsEncoder.encodeSingleInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN,
                                                                                                                    finalOptions),
                                                                            ListOptionsEncoder.encodeSingleNotInFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN,
                                                                                                                       finalOptions),
                                                                            ListOptionsEncoder.encodeSingleLessThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN,
                                                                                                                          DateTime.class,
                                                                                                                          finalOptions),
                                                                            ListOptionsEncoder.encodeSingleGreaterThanFilter(UpdateCampaignListOptions.TAG_FILTER_BY_WHEN,
                                                                                                                             DateTime.class,
                                                                                                                             finalOptions));
                                    }
                                });
    }

    /**
     * Lists update campaigns matching filter options.
     * 
     * <p>
     * Similar to
     * {@link #listUpdateCampaigns(String, String, String, String, com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaignListOptions)}
     * 
     * @param options
     *            list options.
     * @return the list of update campaigns corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    @API
    @Nullable
    public ListResponse<UpdateCampaign>
           listUpdateCampaigns(@Nullable UpdateCampaignListOptions options) throws MbedCloudException {
        return listUpdateCampaigns((String) null, (String) null, (String) null, (String) null, options);
    }

    /**
     * Gets a campaign device metadata.
     * 
     * <p>
     * Similar to {@link #readCampaignDeviceMetadata(String, String)}
     * 
     * @param campaignDeviceMetadata
     *            a campaign device metadata.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public CampaignDeviceMetadata
           readCampaignDeviceMetadata(@NonNull CampaignDeviceMetadata campaignDeviceMetadata) throws MbedCloudException {
        checkNotNull(campaignDeviceMetadata, TAG_CAMPAIGN_DEVICE_METADATA);
        return readCampaignDeviceMetadata(campaignDeviceMetadata.getCampaignId(), campaignDeviceMetadata.getId());
    }

    /**
     * Gets a campaign device metadata.
     * 
     * <p>
     * Get update campaign metadata for a specific device. [br] **Usage example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/5d645eaec2315a89900000655cd94fa8/campaign-device-metadata/016e83ddc645000000000001001000f6
     * \ -H 'Authorization: Bearer [api_key]' ```
     * 
     * @param campaignId
     *            The device's campaign ID.
     * @param id
     *            The metadata record ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public CampaignDeviceMetadata readCampaignDeviceMetadata(@NonNull String campaignId,
                                                             @NonNull String id) throws MbedCloudException {
        checkNotNull(campaignId, TAG_CAMPAIGN_ID);
        checkNotNull(id, TAG_ID);
        final String finalCampaignId = campaignId;
        final String finalId = id;
        return CloudCaller.call(this, "readCampaignDeviceMetadata()", CampaignDeviceMetadataAdapter.getMapper(),
                                new CloudRequest.CloudCall<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.CampaignDeviceMetadata>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.CampaignDeviceMetadata>
                                           call() {
                                        return endpoints.getDeviceUpdateCampaignsApi()
                                                        .updateCampaignMetadataRetrieve(finalCampaignId, finalId);
                                    }
                                });
    }

    /**
     * Gets a campaign statistics.
     * 
     * <p>
     * Similar to
     * {@link #readCampaignStatistics(String, com.arm.mbed.cloud.sdk.deviceupdate.model.CampaignStatisticsId)}
     * 
     * @param campaignStatistics
     *            a campaign statistics.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public CampaignStatistics
           readCampaignStatistics(@NonNull CampaignStatistics campaignStatistics) throws MbedCloudException {
        checkNotNull(campaignStatistics, TAG_CAMPAIGN_STATISTICS);
        return readCampaignStatistics(campaignStatistics.getCampaignId(),
                                      CampaignStatisticsId.getValue(campaignStatistics.getId()));
    }

    /**
     * Gets a campaign statistics.
     * 
     * <p>
     * Get the count of successfully updated, skipped, and failed devices. [br] **Usage example:** ``` curl
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/12345678901234567890123456789012/statistics/fail \ -H
     * 'Authorization: Bearer [api_key]' ```
     * 
     * @param campaignId
     *            ID of the associated campaign.
     * @param id
     *            ID of the event type description.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public CampaignStatistics readCampaignStatistics(@NonNull String campaignId,
                                                     @NonNull CampaignStatisticsId id) throws MbedCloudException {
        checkNotNull(campaignId, TAG_CAMPAIGN_ID);
        checkNotNull(id, TAG_ID);
        final String finalCampaignId = campaignId;
        final CampaignStatisticsId finalId = id;
        return CloudCaller.call(this, "readCampaignStatistics()", CampaignStatisticsAdapter.getMapper(),
                                new CloudRequest.CloudCall<EventTypeSummary>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<EventTypeSummary> call() {
                                        return endpoints.getDeviceUpdateCampaignsApi()
                                                        .updateCampaignStatisticsRetrieve(finalCampaignId,
                                                                                          finalId == null ? null
                                                                                                          : finalId.getString());
                                    }
                                });
    }

    /**
     * Gets a campaign statistics events.
     * 
     * <p>
     * Similar to {@link #readCampaignStatisticsEvents(String, String, String)}
     * 
     * @param campaignStatisticsEvents
     *            a campaign statistics events.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public CampaignStatisticsEvents
           readCampaignStatisticsEvents(@NonNull CampaignStatisticsEvents campaignStatisticsEvents) throws MbedCloudException {
        checkNotNull(campaignStatisticsEvents, TAG_CAMPAIGN_STATISTICS_EVENTS);
        return readCampaignStatisticsEvents(campaignStatisticsEvents.getCampaignId(),
                                            campaignStatisticsEvents.getSummaryStatusId(),
                                            campaignStatisticsEvents.getId());
    }

    /**
     * Gets a campaign statistics events.
     * 
     * <p>
     * Get the count for a specific event type, for example, succeeded, failed or skipped. [br] **Usage example:** ```
     * curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/12345678901234567890123456789012/statistics/success/event_types/sys_112
     * \ -H 'Authorization: Bearer [api_key]' ```
     * 
     * @param campaignId
     *            ID of the associated campaign.
     * @param summaryStatusId
     *            a string
     * @param id
     *            a string
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public CampaignStatisticsEvents readCampaignStatisticsEvents(@NonNull String campaignId,
                                                                 @NonNull String summaryStatusId,
                                                                 @NonNull String id) throws MbedCloudException {
        checkNotNull(campaignId, TAG_CAMPAIGN_ID);
        checkNotNull(summaryStatusId, TAG_SUMMARY_STATUS_ID);
        checkNotNull(id, TAG_ID);
        final String finalCampaignId = campaignId;
        final String finalSummaryStatusId = summaryStatusId;
        final String finalId = id;
        return CloudCaller.call(this, "readCampaignStatisticsEvents()", CampaignStatisticsEventsAdapter.getMapper(),
                                new CloudRequest.CloudCall<EventType>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<EventType> call() {
                                        return endpoints.getDeviceUpdateCampaignsApi()
                                                        .updateCampaignEventTypesRetrieve(finalCampaignId,
                                                                                          finalSummaryStatusId,
                                                                                          finalId);
                                    }
                                });
    }

    /**
     * Gets a firmware image.
     * 
     * <p>
     * Similar to {@link #readFirmwareImage(String)}
     * 
     * @param firmwareImage
     *            a firmware image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareImage readFirmwareImage(@NonNull FirmwareImage firmwareImage) throws MbedCloudException {
        checkNotNull(firmwareImage, TAG_FIRMWARE_IMAGE);
        return readFirmwareImage(firmwareImage.getId());
    }

    /**
     * Gets a firmware image.
     * 
     * <p>
     * Retrieve a firmware image. [br] **Usage example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/firmware-images/1123456f9012ab567890120000789012 \ -H 'Authorization:
     * Bearer [api_key]' ```
     * 
     * @param id
     *            The firmware image ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareImage readFirmwareImage(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        return CloudCaller.call(this, "readFirmwareImage()", FirmwareImageAdapter.getMapper(),
                                new CloudRequest.CloudCall<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareImage>
                                           call() {
                                        return endpoints.getDeviceUpdateFirmwareImagesApi()
                                                        .firmwareImageRetrieve(finalId);
                                    }
                                });
    }

    /**
     * Gets a firmware manifest.
     * 
     * <p>
     * Similar to {@link #readFirmwareManifest(String)}
     * 
     * @param firmwareManifest
     *            a firmware manifest.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareManifest readFirmwareManifest(@NonNull FirmwareManifest firmwareManifest) throws MbedCloudException {
        checkNotNull(firmwareManifest, TAG_FIRMWARE_MANIFEST);
        return readFirmwareManifest(firmwareManifest.getId());
    }

    /**
     * Gets a firmware manifest.
     * 
     * <p>
     * Retrieve a firmware manifest. [br] **Usage example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/1123467f9012ab567890120000789012 \ -H 'Authorization:
     * Bearer [api_key]' ```
     * 
     * @param id
     *            The firmware manifest ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public FirmwareManifest readFirmwareManifest(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        return CloudCaller.call(this, "readFirmwareManifest()", FirmwareManifestAdapter.getMapper(),
                                new CloudRequest.CloudCall<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareManifest>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareManifest>
                                           call() {
                                        return endpoints.getDeviceUpdateFirmwareManifestsApi()
                                                        .firmwareManifestRetrieve(finalId);
                                    }
                                });
    }

    /**
     * Gets an update campaign.
     * 
     * <p>
     * Get an update campaign. [br] **Usage example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/11234567f9012ab56890120000789012 \ -H 'Authorization:
     * Bearer [api_key]' ```
     * 
     * @param id
     *            The campaign ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public UpdateCampaign readUpdateCampaign(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        return CloudCaller.call(this, "readUpdateCampaign()", UpdateCampaignAdapter.getMapper(),
                                new CloudRequest.CloudCall<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UpdateCampaign>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UpdateCampaign>
                                           call() {
                                        return endpoints.getDeviceUpdateCampaignsApi().updateCampaignRetrieve(finalId);
                                    }
                                });
    }

    /**
     * Gets an update campaign.
     * 
     * <p>
     * Similar to {@link #readUpdateCampaign(String)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public UpdateCampaign readUpdateCampaign(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        checkNotNull(updateCampaign, TAG_UPDATE_CAMPAIGN);
        return readUpdateCampaign(updateCampaign.getId());
    }

    /**
     * Start a campaign.
     * 
     * 
     * <p>
     * Start a campaign. [br] **Usage example:** ``` curl -X POST
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/5d645eaec2315a8900002e655cd94fa8/start \ -H
     * 'Authorization: Bearer [api_key]' ```
     * 
     * @param id
     *            The campaign ID.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void start(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "start()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getDeviceUpdateCampaignsApi().updateCampaignStart(finalId);
            }
        }, true);
    }

    /**
     * Start a campaign.
     * 
     * 
     * <p>
     * Similar to {@link #start(String)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void start(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        checkNotNull(updateCampaign, TAG_UPDATE_CAMPAIGN);
        start(updateCampaign.getId());
    }

    /**
     * Stop a campaign.
     * 
     * 
     * <p>
     * Stop a campaign. Stopping is a process that requires the campaign go through several
     * [phases](https://developer.pelion.com/docs/device-management/current/updating-firmware/device-management-update-usi
     * ng-the-apis.html). [br] **Usage example:** ``` curl -X POST
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/016e83ddc645000000000001001000b5/stop \ -H
     * 'Authorization: Bearer [api_key]' ```
     * 
     * @param id
     *            The campaign ID.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void stop(@NonNull String id) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        final String finalId = id;
        CloudCaller.call(this, "stop()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getDeviceUpdateCampaignsApi().updateCampaignStop(finalId);
            }
        }, true);
    }

    /**
     * Stop a campaign.
     * 
     * 
     * <p>
     * Similar to {@link #stop(String)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void stop(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        checkNotNull(updateCampaign, TAG_UPDATE_CAMPAIGN);
        stop(updateCampaign.getId());
    }

    /**
     * Modifies an update campaign.
     * 
     * <p>
     * Modify an update campaign. [br] **Usage example:** ``` curl -X PUT
     * https://api.us-east-1.mbedcloud.com/v3/update-campaigns/1123007f9012ab567890120000789012 \ -H 'Authorization:
     * Bearer [api_key]' \ d '{ "description": "Campaign is for ...", "device_filter":
     * "123400000000000000000000000ae45", "name": "campaign", "root_manifest_id": "5678000000000000000000000000bd98", }'
     * ```
     * 
     * @param id
     *            The campaign ID.
     * @param campaign
     *            an update campaign.
     * @return an updated update campaign
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public UpdateCampaign updateUpdateCampaign(@NonNull String id,
                                               @NonNull UpdateCampaign campaign) throws MbedCloudException {
        checkNotNull(id, TAG_ID);
        checkNotNull(campaign, TAG_CAMPAIGN);
        checkModelValidity(campaign, TAG_CAMPAIGN);
        final String finalId = id;
        final UpdateCampaign finalCampaign = campaign;
        return CloudCaller.call(this, "updateUpdateCampaign()", UpdateCampaignAdapter.getMapper(),
                                new CloudRequest.CloudCall<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UpdateCampaign>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.UpdateCampaign>
                                           call() {
                                        return endpoints.getDeviceUpdateCampaignsApi()
                                                        .updateCampaignUpdate(finalId,
                                                                              UpdateCampaignAdapter.reverseMapUpdateRequest(finalCampaign));
                                    }
                                }, true);
    }

    /**
     * Modifies an update campaign.
     * 
     * <p>
     * Similar to {@link #updateUpdateCampaign(String, com.arm.mbed.cloud.sdk.deviceupdate.model.UpdateCampaign)}
     * 
     * @param updateCampaign
     *            an update campaign.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public UpdateCampaign updateUpdateCampaign(@NonNull UpdateCampaign updateCampaign) throws MbedCloudException {
        checkNotNull(updateCampaign, TAG_UPDATE_CAMPAIGN);
        checkModelValidity(updateCampaign, TAG_UPDATE_CAMPAIGN);
        return updateUpdateCampaign(updateCampaign.getId(), updateCampaign);
    }

}
