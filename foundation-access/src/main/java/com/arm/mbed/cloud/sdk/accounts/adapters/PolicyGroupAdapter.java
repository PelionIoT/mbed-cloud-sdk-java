// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.adapters;

import com.arm.mbed.cloud.sdk.accounts.model.PolicyGroup;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.GroupCreationInfo;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.GroupSummary;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.GroupSummaryList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.GroupUpdateInfo;
import java.util.List;

/**
 * Adapter for policy groups.
 */
@Preamble(description = "Adapter for policy groups.")
@Internal
@SuppressWarnings("checkstyle:LineLength")
public final class PolicyGroupAdapter {
    /**
     * Constructor.
     */
    private PolicyGroupAdapter() {
        super();
        // Nothing to do;
    }

    /**
     * Maps a policy group into a group creation info.
     * 
     * @param toBeMapped
     *            a policy group.
     * @return mapped a group creation info
     */
    @Internal
    public static GroupCreationInfo reverseMapAddRequest(PolicyGroup toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final GroupCreationInfo groupCreationInfo = new GroupCreationInfo();
        // No field equivalent to members in GroupCreationInfo was found in PolicyGroup
        groupCreationInfo.setName(toBeMapped.getName());
        return groupCreationInfo;
    }

    /**
     * Maps a group summary into a policy group.
     * 
     * @param toBeMapped
     *            a group summary.
     * @return mapped a policy group
     */
    @Internal
    public static PolicyGroup map(GroupSummary toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final PolicyGroup policyGroup = new PolicyGroup(toBeMapped.getAccountId(),
                                                        TranslationUtils.toInt(toBeMapped.getApikeyCount()),
                                                        TranslationUtils.toInt(toBeMapped.getApplicationCount()),
                                                        TranslationUtils.toDate(toBeMapped.getCreatedAt()),
                                                        TranslationUtils.toDate(toBeMapped.getUpdatedAt()),
                                                        TranslationUtils.toInt(toBeMapped.getUserCount()));
        policyGroup.setId(toBeMapped.getId());
        policyGroup.setName(toBeMapped.getName());
        return policyGroup;
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<GroupSummary, PolicyGroup> getMapper() {
        return new GenericAdapter.Mapper<GroupSummary, PolicyGroup>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public PolicyGroup map(GroupSummary toBeMapped) {
                return PolicyGroupAdapter.map(toBeMapped);
            }
        };
    }

    /**
     * Maps a group summary list into a policy group.
     * 
     * @param toBeMapped
     *            a group summary list.
     * @return mapped list response
     */
    @Internal
    public static ListResponse<PolicyGroup> mapList(GroupSummaryList toBeMapped) {
        final GroupSummaryList finalList = toBeMapped;
        final GenericAdapter.RespList<GroupSummary> respList = new GenericAdapter.RespList<GroupSummary>() {
            /**
             * Executes getAfter.
             * 
             * @return something
             */
            @Override
            public String getAfter() {
                return (finalList == null) ? null : finalList.getAfter();
            }

            /**
             * Executes getContinuationMarker.
             * 
             * @return something
             */
            @Override
            public String getContinuationMarker() {
                return null;
            }

            /**
             * Executes getData.
             * 
             * @return something
             */
            @Override
            public List<GroupSummary> getData() {
                return (finalList == null) ? null : finalList.getData();
            }

            /**
             * Executes getHasMore.
             * 
             * @return something
             */
            @Override
            public Boolean getHasMore() {
                return (finalList == null) ? null : finalList.isHasMore();
            }

            /**
             * Executes getLimit.
             * 
             * @return something
             */
            @Override
            public Integer getLimit() {
                return (finalList == null) ? null : finalList.getLimit();
            }

            /**
             * Executes getOrder.
             * 
             * @return something
             */
            @Override
            public String getOrder() {
                return (finalList == null) ? null : finalList.getOrder().toString();
            }

            /**
             * Executes getTotalCount.
             * 
             * @return something
             */
            @Override
            public Integer getTotalCount() {
                return (finalList == null) ? null : finalList.getTotalCount();
            }
        };
        return GenericAdapter.mapList(respList, PolicyGroupAdapter.getMapper());
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<GroupSummaryList, ListResponse<PolicyGroup>> getListMapper() {
        return new GenericAdapter.Mapper<GroupSummaryList, ListResponse<PolicyGroup>>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public ListResponse<PolicyGroup> map(GroupSummaryList toBeMapped) {
                return PolicyGroupAdapter.mapList(toBeMapped);
            }
        };
    }

    /**
     * Maps a policy group into a group update info.
     * 
     * @param toBeMapped
     *            a policy group.
     * @return mapped a group update info
     */
    @Internal
    public static GroupUpdateInfo reverseMapUpdateRequest(PolicyGroup toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final GroupUpdateInfo groupUpdateInfo = new GroupUpdateInfo();
        groupUpdateInfo.setName(toBeMapped.getName());
        return groupUpdateInfo;
    }
}
