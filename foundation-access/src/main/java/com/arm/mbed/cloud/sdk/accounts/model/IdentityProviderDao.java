// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.Accounts;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CrudDao;

/**
 * Data Access Object (DAO) for identity providers.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for identity providers.")
public class IdentityProviderDao extends AbstractModelDao<IdentityProvider> implements CrudDao<IdentityProvider> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProviderDao() throws MbedCloudException {
        super();
    }

    /**
     * Constructor.
     * 
     * @param client
     *            an api client wrapper.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProviderDao(ApiClientWrapper client) throws MbedCloudException {
        super(client);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            a connection options.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProviderDao(ConnectionOptions options) throws MbedCloudException {
        super(options);
    }

    /**
     * Constructor.
     * 
     * @param sdkContext
     *            an sdk context.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProviderDao(SdkContext sdkContext) throws MbedCloudException {
        super(sdkContext);
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    @SuppressWarnings({ "resource", "unused" })
    public IdentityProviderDao clone() {
        try {
            return new IdentityProviderDao().configureAndGet(getModuleOrThrow() == null ? null
                                                                                        : getModuleOrThrow().clone());
        } catch (MbedCloudException exception) {
            return null;
        }
    }

    /**
     * Adds an identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#create(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @return an added identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public IdentityProvider create() throws MbedCloudException {
        return create(getModel());
    }

    /**
     * Adds an identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createIdentityProvider(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param identityProvider
     *            an identity provider.
     * @return an added identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public IdentityProvider create(@NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createIdentityProvider(identityProvider));
    }

    /**
     * Adds an identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#create(boolean, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @return an added identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider create(@Nullable boolean discovery) throws MbedCloudException {
        return create(discovery, getModel());
    }

    /**
     * Adds an identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#createIdentityProvider(boolean, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param identityProvider
     *            an identity provider.
     * @return an added identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider create(@Nullable boolean discovery,
                                   @NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).createIdentityProvider(discovery, identityProvider));
    }

    /**
     * Deletes an identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#delete(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete() throws MbedCloudException {
        delete(getModel());
    }

    /**
     * Deletes an identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#deleteIdentityProvider(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param identityProvider
     *            an identity provider.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull IdentityProvider identityProvider) throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).deleteIdentityProvider(identityProvider);
    }

    /**
     * Deletes an identity provider.
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#deleteIdentityProvider(String)}
     * 
     * @param id
     *            The ID of the identity provider to delete.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull String id) throws MbedCloudException {
        ((Accounts) getModuleOrThrow()).deleteIdentityProvider(id);
    }

    /**
     * Delete the service provider certificate.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#deleteServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider deleteServiceProviderCertificate() throws MbedCloudException {
        return deleteServiceProviderCertificate(getModel());
    }

    /**
     * Delete the service provider certificate.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#deleteServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param identityProvider
     *            an identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider
           deleteServiceProviderCertificate(@NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).deleteServiceProviderCertificate(identityProvider));
    }

    /**
     * Delete the service provider certificate.
     * 
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#deleteServiceProviderCertificate(String)}
     * 
     * @param id
     *            Entity ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider deleteServiceProviderCertificate(@NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).deleteServiceProviderCertificate(id));
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider generateServiceProviderCertificate() throws MbedCloudException {
        return generateServiceProviderCertificate(getModel());
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderAlgorithm, int, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param algorithm
     *            The algorithm and its key size used for generating the certificate. Defaults to RSA2048.
     * @param validity
     *            Validity for the certificate in days.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider generateServiceProviderCertificate(@Nullable IdentityProviderAlgorithm algorithm,
                                                               @Nullable int validity) throws MbedCloudException {
        return generateServiceProviderCertificate(algorithm, validity, getModel());
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderAlgorithm, int, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param algorithm
     *            The algorithm and its key size used for generating the certificate. Defaults to RSA2048.
     * @param validity
     *            Validity for the certificate in days.
     * @param identityProvider
     *            an identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider
           generateServiceProviderCertificate(@Nullable IdentityProviderAlgorithm algorithm, @Nullable int validity,
                                              @NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).generateServiceProviderCertificate(algorithm, validity,
                                                                                                 identityProvider));
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderAlgorithm, int, String, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param algorithm
     *            The algorithm and its key size used for generating the certificate. Defaults to RSA2048.
     * @param validity
     *            Validity for the certificate in days.
     * @param id
     *            Entity ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider generateServiceProviderCertificate(@Nullable IdentityProviderAlgorithm algorithm,
                                                               @Nullable int validity,
                                                               @NonNull String id) throws MbedCloudException {
        return generateServiceProviderCertificate(algorithm, validity, id, getModel());
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderAlgorithm, int, String, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param algorithm
     *            The algorithm and its key size used for generating the certificate. Defaults to RSA2048.
     * @param validity
     *            Validity for the certificate in days.
     * @param id
     *            Entity ID.
     * @param identityProvider
     *            an identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider
           generateServiceProviderCertificate(@Nullable IdentityProviderAlgorithm algorithm, @Nullable int validity,
                                              @NonNull String id,
                                              @NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).generateServiceProviderCertificate(algorithm, validity,
                                                                                                 id, identityProvider));
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#generateServiceProviderCertificate(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param identityProvider
     *            an identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider
           generateServiceProviderCertificate(@NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).generateServiceProviderCertificate(identityProvider));
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#generateServiceProviderCertificate(String, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param id
     *            Entity ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider generateServiceProviderCertificate(@NonNull String id) throws MbedCloudException {
        return generateServiceProviderCertificate(id, getModel());
    }

    /**
     * Generate a new service provider certificate.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#generateServiceProviderCertificate(String, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param id
     *            Entity ID.
     * @param identityProvider
     *            an identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider
           generateServiceProviderCertificate(@NonNull String id,
                                              @NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).generateServiceProviderCertificate(id, identityProvider));
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected IdentityProvider instantiateModel() {
        return new IdentityProvider();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new Accounts(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new Accounts(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new Accounts(context);
    }

    /**
     * Gets an identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#read(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public IdentityProvider read() throws MbedCloudException {
        return read(getModel());
    }

    /**
     * Gets an identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#readIdentityProvider(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param identityProvider
     *            an identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider read(@NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readIdentityProvider(identityProvider));
    }

    /**
     * Gets an identity provider.
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#readIdentityProvider(String)}
     * 
     * @param id
     *            Entity ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public IdentityProvider read(@NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).readIdentityProvider(id));
    }

    /**
     * Refreshes the OIDC signing keys.
     * 
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#refreshTokens(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider refreshTokens() throws MbedCloudException {
        return refreshTokens(getModel());
    }

    /**
     * Refreshes the OIDC signing keys.
     * 
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#refreshTokens(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param identityProvider
     *            an identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider refreshTokens(@NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).refreshTokens(identityProvider));
    }

    /**
     * Refreshes the OIDC signing keys.
     * 
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Accounts#refreshTokens(String)}
     * 
     * @param id
     *            Entity ID.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider refreshTokens(@NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).refreshTokens(id));
    }

    /**
     * Modifies an identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#update(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public IdentityProvider update() throws MbedCloudException {
        return update(getModel());
    }

    /**
     * Modifies an identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateIdentityProvider(com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param identityProvider
     *            an identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public IdentityProvider update(@NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateIdentityProvider(identityProvider));
    }

    /**
     * Modifies an identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#update(String, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param id
     *            Entity ID.
     * @return an updated identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider update(@NonNull String id) throws MbedCloudException {
        return update(id, getModel());
    }

    /**
     * Modifies an identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateIdentityProvider(String, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param id
     *            Entity ID.
     * @param identityProvider
     *            an identity provider.
     * @return an updated identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider update(@NonNull String id,
                                   @NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateIdentityProvider(id, identityProvider));
    }

    /**
     * Modifies an identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#update(boolean, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider update(@Nullable boolean discovery) throws MbedCloudException {
        return update(discovery, getModel());
    }

    /**
     * Modifies an identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateIdentityProvider(boolean, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param identityProvider
     *            an identity provider.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider update(@Nullable boolean discovery,
                                   @NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateIdentityProvider(discovery, identityProvider));
    }

    /**
     * Modifies an identity provider.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.accounts.model.IdentityProviderDao#update(boolean, String, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param id
     *            Entity ID.
     * @return an updated identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider update(@Nullable boolean discovery, @NonNull String id) throws MbedCloudException {
        return update(discovery, id, getModel());
    }

    /**
     * Modifies an identity provider.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Accounts#updateIdentityProvider(boolean, String, com.arm.mbed.cloud.sdk.accounts.model.IdentityProvider)}
     * 
     * @param discovery
     *            Indicates that the OpenID Connect endpoints and keys should be set using the OpenID Connect Discovery
     *            mechanism. The following parameters are set automatically: * authorization_endpoint * token_endpoint *
     *            userinfo_endpoint * revocation_endpoint * jwks_uri * keys. Indicates that the OpenID Connect endpoints
     *            and keys should be set using the OpenID Connect Discovery mechanism. The following parameters are set
     *            automatically: * authorization_endpoint * token_endpoint * userinfo_endpoint * revocation_endpoint *
     *            jwks_uri * keys
     * @param id
     *            Entity ID.
     * @param identityProvider
     *            an identity provider.
     * @return an updated identity provider
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public IdentityProvider update(@Nullable boolean discovery, @NonNull String id,
                                   @NonNull IdentityProvider identityProvider) throws MbedCloudException {
        return setAndGetModel(((Accounts) getModuleOrThrow()).updateIdentityProvider(discovery, id, identityProvider));
    }
}
