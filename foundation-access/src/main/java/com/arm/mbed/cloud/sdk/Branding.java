// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk;

import com.arm.mbed.cloud.sdk.annotations.API;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Module;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Nullable;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.branding.adapters.DarkThemeColorAdapter;
import com.arm.mbed.cloud.sdk.branding.adapters.DarkThemeImageAdapter;
import com.arm.mbed.cloud.sdk.branding.adapters.LightThemeColorAdapter;
import com.arm.mbed.cloud.sdk.branding.adapters.LightThemeImageAdapter;
import com.arm.mbed.cloud.sdk.branding.adapters.SubtenantDarkThemeColorAdapter;
import com.arm.mbed.cloud.sdk.branding.adapters.SubtenantDarkThemeImageAdapter;
import com.arm.mbed.cloud.sdk.branding.adapters.SubtenantLightThemeColorAdapter;
import com.arm.mbed.cloud.sdk.branding.adapters.SubtenantLightThemeImageAdapter;
import com.arm.mbed.cloud.sdk.branding.model.BrandingEndpoints;
import com.arm.mbed.cloud.sdk.branding.model.DarkThemeColor;
import com.arm.mbed.cloud.sdk.branding.model.DarkThemeColorListOptions;
import com.arm.mbed.cloud.sdk.branding.model.DarkThemeColorReference;
import com.arm.mbed.cloud.sdk.branding.model.DarkThemeImage;
import com.arm.mbed.cloud.sdk.branding.model.DarkThemeImageListOptions;
import com.arm.mbed.cloud.sdk.branding.model.DarkThemeImageReference;
import com.arm.mbed.cloud.sdk.branding.model.LightThemeColor;
import com.arm.mbed.cloud.sdk.branding.model.LightThemeColorListOptions;
import com.arm.mbed.cloud.sdk.branding.model.LightThemeColorReference;
import com.arm.mbed.cloud.sdk.branding.model.LightThemeImage;
import com.arm.mbed.cloud.sdk.branding.model.LightThemeImageListOptions;
import com.arm.mbed.cloud.sdk.branding.model.LightThemeImageReference;
import com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeColor;
import com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeColorReference;
import com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeImage;
import com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeImageReference;
import com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColor;
import com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorReference;
import com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeImage;
import com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeImageReference;
import com.arm.mbed.cloud.sdk.common.AbstractModule;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.CloudCaller;
import com.arm.mbed.cloud.sdk.common.CloudRequest;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.adapters.DataFileAdapter;
import com.arm.mbed.cloud.sdk.common.listing.ListOptions;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.common.listing.PageRequester;
import com.arm.mbed.cloud.sdk.common.listing.Paginator;
import com.arm.mbed.cloud.sdk.common.model.DataFile;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.BrandingColor;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.BrandingColorList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.BrandingImage;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.BrandingImageList;
import retrofit2.Call;

/**
 * Specifies Branding APIs.
 * <p>
 * API definitions exposing functionality for dealing with brandings
 */
@Preamble(description = "Specifies Branding APIs.")
@Internal
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
@Module
public class Branding extends AbstractModule {
    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_ACCOUNT_ID = "accountId";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_DARK_THEME_COLOR = "darkThemeColor";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_DARK_THEME_IMAGE = "darkThemeImage";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_IMAGE = "image";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_LIGHT_THEME_COLOR = "lightThemeColor";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_LIGHT_THEME_IMAGE = "lightThemeImage";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_REFERENCE = "reference";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_SUBTENANT_DARK_THEME_COLOR = "subtenantDarkThemeColor";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_SUBTENANT_DARK_THEME_IMAGE = "subtenantDarkThemeImage";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_SUBTENANT_LIGHT_THEME_COLOR = "subtenantLightThemeColor";

    /**
     * Parameter name.
     */
    @Internal
    private static final String TAG_SUBTENANT_LIGHT_THEME_IMAGE = "subtenantLightThemeImage";

    /**
     * module endpoints.
     */
    @Internal
    private final BrandingEndpoints endpoints;

    /**
     * Constructor.
     * 
     * @param client
     *            Cloud client @see {@link ApiClientWrapper}.
     */
    public Branding(ApiClientWrapper client) {
        super(client);
        this.endpoints = new BrandingEndpoints(this.serviceRegistry);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            connection options @see {@link ConnectionOptions}.
     */
    public Branding(ConnectionOptions options) {
        super(options);
        this.endpoints = new BrandingEndpoints(this.serviceRegistry);
    }

    /**
     * Constructor.
     * 
     * @param context
     *            SDK context @see {@link SdkContext}.
     */
    public Branding(SdkContext context) {
        super(context);
        this.endpoints = new BrandingEndpoints(this.serviceRegistry);
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public Branding clone() {
        return new Branding(this);
    }

    /**
     * Deletes a dark theme color.
     * 
     * <p>
     * Similar to {@link #deleteDarkThemeColor(com.arm.mbed.cloud.sdk.branding.model.DarkThemeColorReference)}
     * 
     * @param darkThemeColor
     *            a dark theme color.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteDarkThemeColor(@NonNull DarkThemeColor darkThemeColor) throws MbedCloudException {
        checkNotNull(darkThemeColor, TAG_DARK_THEME_COLOR);
        deleteDarkThemeColor(darkThemeColor.getReference());
    }

    /**
     * Deletes a dark theme color.
     * 
     * <p>
     * Resets the branding color to its dark theme default. [b]Note:[/b] This endpoint is restricted to administrators.
     * 
     * **Example:** ``` curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param reference
     *            The name of the branding color.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteDarkThemeColor(@NonNull DarkThemeColorReference reference) throws MbedCloudException {
        checkNotNull(reference, TAG_REFERENCE);
        final DarkThemeColorReference finalReference = reference;
        CloudCaller.call(this, "deleteDarkThemeColor()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getUserInterfaceConfigurationColorsApi()
                                .resetDarkColor(finalReference == null ? null : finalReference.getString());
            }
        });
    }

    /**
     * Deletes a dark theme image.
     * 
     * <p>
     * Similar to {@link #deleteDarkThemeImage(com.arm.mbed.cloud.sdk.branding.model.DarkThemeImageReference)}
     * 
     * @param darkThemeImage
     *            a dark theme image.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteDarkThemeImage(@NonNull DarkThemeImage darkThemeImage) throws MbedCloudException {
        checkNotNull(darkThemeImage, TAG_DARK_THEME_IMAGE);
        deleteDarkThemeImage(darkThemeImage.getReference());
    }

    /**
     * Deletes a dark theme image.
     * 
     * <p>
     * Revert an account branding image to dark theme default. [b]Note:[/b] This endpoint is restricted to
     * administrators.
     * 
     * **Example:** ``` curl -X POST https://api.us-east-1.mbedcloud.com/v3/branding-images/dark/{reference}/clear \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param reference
     *            Name of the branding images (icon or picture).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteDarkThemeImage(@NonNull DarkThemeImageReference reference) throws MbedCloudException {
        checkNotNull(reference, TAG_REFERENCE);
        final DarkThemeImageReference finalReference = reference;
        CloudCaller.call(this, "deleteDarkThemeImage()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getUserInterfaceConfigurationImagesApi()
                                .clearDarkImage(finalReference == null ? null : finalReference.getString());
            }
        });
    }

    /**
     * Deletes a light theme color.
     * 
     * <p>
     * Similar to {@link #deleteLightThemeColor(com.arm.mbed.cloud.sdk.branding.model.LightThemeColorReference)}
     * 
     * @param lightThemeColor
     *            a light theme color.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteLightThemeColor(@NonNull LightThemeColor lightThemeColor) throws MbedCloudException {
        checkNotNull(lightThemeColor, TAG_LIGHT_THEME_COLOR);
        deleteLightThemeColor(lightThemeColor.getReference());
    }

    /**
     * Deletes a light theme color.
     * 
     * <p>
     * Resets the branding color to its light theme default. [b]Note:[/b] This endpoint is restricted to administrators.
     * 
     * **Example:** ``` curl -X DELETE https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param reference
     *            The name of the branding color.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteLightThemeColor(@NonNull LightThemeColorReference reference) throws MbedCloudException {
        checkNotNull(reference, TAG_REFERENCE);
        final LightThemeColorReference finalReference = reference;
        CloudCaller.call(this, "deleteLightThemeColor()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getUserInterfaceConfigurationColorsApi()
                                .resetLightColor(finalReference == null ? null : finalReference.getString());
            }
        });
    }

    /**
     * Deletes a light theme image.
     * 
     * <p>
     * Similar to {@link #deleteLightThemeImage(com.arm.mbed.cloud.sdk.branding.model.LightThemeImageReference)}
     * 
     * @param lightThemeImage
     *            a light theme image.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteLightThemeImage(@NonNull LightThemeImage lightThemeImage) throws MbedCloudException {
        checkNotNull(lightThemeImage, TAG_LIGHT_THEME_IMAGE);
        deleteLightThemeImage(lightThemeImage.getReference());
    }

    /**
     * Deletes a light theme image.
     * 
     * <p>
     * Revert an account branding image to light theme default. [b]Note:[/b] This endpoint is restricted to
     * administrators.
     * 
     * **Example:** ``` curl -X POST https://api.us-east-1.mbedcloud.com/v3/branding-images/light/{reference}/clear \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param reference
     *            Name of the branding images (icon or picture).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void deleteLightThemeImage(@NonNull LightThemeImageReference reference) throws MbedCloudException {
        checkNotNull(reference, TAG_REFERENCE);
        final LightThemeImageReference finalReference = reference;
        CloudCaller.call(this, "deleteLightThemeImage()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getUserInterfaceConfigurationImagesApi()
                                .clearLightImage(finalReference == null ? null : finalReference.getString());
            }
        });
    }

    /**
     * Deletes a subtenant dark theme color.
     * 
     * <p>
     * Similar to
     * {@link #deleteSubtenantDarkThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeColorReference)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantDarkThemeColor
     *            a subtenant dark theme color.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void
           deleteSubtenantDarkThemeColor(@NonNull String accountId,
                                         @NonNull SubtenantDarkThemeColor subtenantDarkThemeColor) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantDarkThemeColor, TAG_SUBTENANT_DARK_THEME_COLOR);
        deleteSubtenantDarkThemeColor(accountId, subtenantDarkThemeColor.getReference());
    }

    /**
     * Deletes a subtenant dark theme color.
     * 
     * <p>
     * Resets the branding color to its dark theme default. [b]Note:[/b] This endpoint is restricted to administrators.
     * 
     * **Example:** ``` curl -X DELETE
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param accountId
     *            The ID of the account.
     * @param reference
     *            The name of the branding color.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void
           deleteSubtenantDarkThemeColor(@NonNull String accountId,
                                         @NonNull SubtenantDarkThemeColorReference reference) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(reference, TAG_REFERENCE);
        final String finalAccountId = accountId;
        final SubtenantDarkThemeColorReference finalReference = reference;
        CloudCaller.call(this, "deleteSubtenantDarkThemeColor()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getTenantUserInterfaceConfigurationColorsApi()
                                .resetAccountDarkColor(finalAccountId,
                                                       finalReference == null ? null : finalReference.getString());
            }
        });
    }

    /**
     * Deletes a subtenant dark theme image.
     * 
     * <p>
     * Similar to
     * {@link #deleteSubtenantDarkThemeImage(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeImageReference)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantDarkThemeImage
     *            a subtenant dark theme image.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void
           deleteSubtenantDarkThemeImage(@NonNull String accountId,
                                         @NonNull SubtenantDarkThemeImage subtenantDarkThemeImage) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantDarkThemeImage, TAG_SUBTENANT_DARK_THEME_IMAGE);
        deleteSubtenantDarkThemeImage(accountId, subtenantDarkThemeImage.getReference());
    }

    /**
     * Deletes a subtenant dark theme image.
     * 
     * <p>
     * Revert an account branding image to dark theme default. [b]Note:[/b] This endpoint is restricted to
     * administrators.
     * 
     * **Example:** ``` curl -X POST
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark/{reference}/clear \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param accountId
     *            The ID of the account.
     * @param reference
     *            Name of the branding images (icon or picture).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void
           deleteSubtenantDarkThemeImage(@NonNull String accountId,
                                         @NonNull SubtenantDarkThemeImageReference reference) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(reference, TAG_REFERENCE);
        final String finalAccountId = accountId;
        final SubtenantDarkThemeImageReference finalReference = reference;
        CloudCaller.call(this, "deleteSubtenantDarkThemeImage()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getTenantUserInterfaceConfigurationImagesApi()
                                .clearAccountDarkImage(finalAccountId,
                                                       finalReference == null ? null : finalReference.getString());
            }
        });
    }

    /**
     * Deletes a subtenant light theme color.
     * 
     * <p>
     * Similar to
     * {@link #deleteSubtenantLightThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorReference)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantLightThemeColor
     *            a subtenant light theme color.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void
           deleteSubtenantLightThemeColor(@NonNull String accountId,
                                          @NonNull SubtenantLightThemeColor subtenantLightThemeColor) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantLightThemeColor, TAG_SUBTENANT_LIGHT_THEME_COLOR);
        deleteSubtenantLightThemeColor(accountId, subtenantLightThemeColor.getReference());
    }

    /**
     * Deletes a subtenant light theme color.
     * 
     * <p>
     * Resets the branding color to its light theme default. [b]Note:[/b] This endpoint is restricted to administrators.
     * 
     * **Example:** ``` curl -X DELETE
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param accountId
     *            The ID of the account.
     * @param reference
     *            The name of the branding color.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void
           deleteSubtenantLightThemeColor(@NonNull String accountId,
                                          @NonNull SubtenantLightThemeColorReference reference) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(reference, TAG_REFERENCE);
        final String finalAccountId = accountId;
        final SubtenantLightThemeColorReference finalReference = reference;
        CloudCaller.call(this, "deleteSubtenantLightThemeColor()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getTenantUserInterfaceConfigurationColorsApi()
                                .resetAccountLightColor(finalAccountId,
                                                        finalReference == null ? null : finalReference.getString());
            }
        });
    }

    /**
     * Deletes a subtenant light theme image.
     * 
     * <p>
     * Similar to
     * {@link #deleteSubtenantLightThemeImage(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeImageReference)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantLightThemeImage
     *            a subtenant light theme image.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void
           deleteSubtenantLightThemeImage(@NonNull String accountId,
                                          @NonNull SubtenantLightThemeImage subtenantLightThemeImage) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantLightThemeImage, TAG_SUBTENANT_LIGHT_THEME_IMAGE);
        deleteSubtenantLightThemeImage(accountId, subtenantLightThemeImage.getReference());
    }

    /**
     * Deletes a subtenant light theme image.
     * 
     * <p>
     * Revert an account branding image to light theme default. [b]Note:[/b] This endpoint is restricted to
     * administrators.
     * 
     * **Example:** ```curl -X POST
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light/{reference}/clear \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param accountId
     *            The ID of the account.
     * @param reference
     *            Name of the branding images (icon or picture).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    public void
           deleteSubtenantLightThemeImage(@NonNull String accountId,
                                          @NonNull SubtenantLightThemeImageReference reference) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(reference, TAG_REFERENCE);
        final String finalAccountId = accountId;
        final SubtenantLightThemeImageReference finalReference = reference;
        CloudCaller.call(this, "deleteSubtenantLightThemeImage()", null, new CloudRequest.CloudCall<Void>() {
            /**
             * Makes the low level call to the Cloud.
             * 
             * @return Corresponding Retrofit2 Call object
             */
            @Override
            public Call<Void> call() {
                return endpoints.getTenantUserInterfaceConfigurationImagesApi()
                                .clearAccountLightImage(finalAccountId,
                                                        finalReference == null ? null : finalReference.getString());
            }
        });
    }

    /**
     * Gets module endpoints.
     * 
     * @return endpoints
     */
    @Internal
    public BrandingEndpoints getEndpoints() {
        return endpoints;
    }

    /**
     * Gets module name.
     * 
     * @return module name
     */
    @Override
    @Internal
    public String getModuleName() {
        return "Branding";
    }

    /**
     * Creates a {@link Paginator} for the list of dark theme colors matching filter options.
     * 
     * <p>
     * Gets an iterator over all dark theme colors matching filter options.
     * 
     * @param options
     *            list options.
     * @return paginator over the list of dark theme colors
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<DarkThemeColor>
           listAllDarkThemeColors(@Nullable DarkThemeColorListOptions options) throws MbedCloudException {
        final DarkThemeColorListOptions finalOptions = (options == null) ? new DarkThemeColorListOptions() : options;
        return new Paginator<DarkThemeColor>(finalOptions, new PageRequester<DarkThemeColor>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<DarkThemeColor> requestNewPage(ListOptions options) throws MbedCloudException {
                return listDarkThemeColors((DarkThemeColorListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of dark theme images matching filter options.
     * 
     * <p>
     * Gets an iterator over all dark theme images matching filter options.
     * 
     * @param options
     *            list options.
     * @return paginator over the list of dark theme images
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<DarkThemeImage>
           listAllDarkThemeImages(@Nullable DarkThemeImageListOptions options) throws MbedCloudException {
        final DarkThemeImageListOptions finalOptions = (options == null) ? new DarkThemeImageListOptions() : options;
        return new Paginator<DarkThemeImage>(finalOptions, new PageRequester<DarkThemeImage>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<DarkThemeImage> requestNewPage(ListOptions options) throws MbedCloudException {
                return listDarkThemeImages((DarkThemeImageListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of light theme colors matching filter options.
     * 
     * <p>
     * Gets an iterator over all light theme colors matching filter options.
     * 
     * @param options
     *            list options.
     * @return paginator over the list of light theme colors
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<LightThemeColor>
           listAllLightThemeColors(@Nullable LightThemeColorListOptions options) throws MbedCloudException {
        final LightThemeColorListOptions finalOptions = (options == null) ? new LightThemeColorListOptions() : options;
        return new Paginator<LightThemeColor>(finalOptions, new PageRequester<LightThemeColor>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<LightThemeColor> requestNewPage(ListOptions options) throws MbedCloudException {
                return listLightThemeColors((LightThemeColorListOptions) options);
            }
        });
    }

    /**
     * Creates a {@link Paginator} for the list of light theme images matching filter options.
     * 
     * <p>
     * Gets an iterator over all light theme images matching filter options.
     * 
     * @param options
     *            list options.
     * @return paginator over the list of light theme images
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public Paginator<LightThemeImage>
           listAllLightThemeImages(@Nullable LightThemeImageListOptions options) throws MbedCloudException {
        final LightThemeImageListOptions finalOptions = (options == null) ? new LightThemeImageListOptions() : options;
        return new Paginator<LightThemeImage>(finalOptions, new PageRequester<LightThemeImage>() {
            /**
             * Makes one page request.
             * 
             * @param options
             *            a list options.
             * @return Corresponding page requester
             * @throws MbedCloudException
             *             if an error occurs during the process.
             */
            @Override
            public ListResponse<LightThemeImage> requestNewPage(ListOptions options) throws MbedCloudException {
                return listLightThemeImages((LightThemeImageListOptions) options);
            }
        });
    }

    /**
     * Lists dark theme colors matching filter options.
     * 
     * <p>
     * Retrieve the dark theme branding colors.
     * 
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark \ -H 'Authorization:
     * Bearer [access_key]' ```
     * 
     * @param options
     *            list options.
     * @return the list of dark theme colors corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<DarkThemeColor>
           listDarkThemeColors(@Nullable DarkThemeColorListOptions options) throws MbedCloudException {
        final DarkThemeColorListOptions finalOptions = (options == null) ? new DarkThemeColorListOptions() : options;
        return CloudCaller.call(this, "listDarkThemeColors()", DarkThemeColorAdapter.getListMapper(),
                                new CloudRequest.CloudCall<BrandingColorList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingColorList> call() {
                                        return endpoints.getUserInterfaceConfigurationColorsApi().getDarkColors();
                                    }
                                });
    }

    /**
     * Lists dark theme images matching filter options.
     * 
     * <p>
     * Retrieve metadata for all dark theme branding images.
     * 
     * **Example:** `curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/dark \ -H 'Authorization: Bearer
     * [access_key]' ```
     * 
     * @param options
     *            list options.
     * @return the list of dark theme images corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<DarkThemeImage>
           listDarkThemeImages(@Nullable DarkThemeImageListOptions options) throws MbedCloudException {
        final DarkThemeImageListOptions finalOptions = (options == null) ? new DarkThemeImageListOptions() : options;
        return CloudCaller.call(this, "listDarkThemeImages()", DarkThemeImageAdapter.getListMapper(),
                                new CloudRequest.CloudCall<BrandingImageList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingImageList> call() {
                                        return endpoints.getUserInterfaceConfigurationImagesApi().getAllDarkImageData();
                                    }
                                });
    }

    /**
     * Lists light theme colors matching filter options.
     * 
     * <p>
     * Retrieve the light theme branding colors.
     * 
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/light \ -H 'Authorization:
     * Bearer [access_key]' ```
     * 
     * @param options
     *            list options.
     * @return the list of light theme colors corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<LightThemeColor>
           listLightThemeColors(@Nullable LightThemeColorListOptions options) throws MbedCloudException {
        final LightThemeColorListOptions finalOptions = (options == null) ? new LightThemeColorListOptions() : options;
        return CloudCaller.call(this, "listLightThemeColors()", LightThemeColorAdapter.getListMapper(),
                                new CloudRequest.CloudCall<BrandingColorList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingColorList> call() {
                                        return endpoints.getUserInterfaceConfigurationColorsApi().getLightColors();
                                    }
                                });
    }

    /**
     * Lists light theme images matching filter options.
     * 
     * <p>
     * Retrieve the metadata of all light theme branding images.
     * 
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/light \ -H 'Authorization:
     * Bearer [access_key]' ```
     * 
     * @param options
     *            list options.
     * @return the list of light theme images corresponding to filter options (One page).
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public ListResponse<LightThemeImage>
           listLightThemeImages(@Nullable LightThemeImageListOptions options) throws MbedCloudException {
        final LightThemeImageListOptions finalOptions = (options == null) ? new LightThemeImageListOptions() : options;
        return CloudCaller.call(this, "listLightThemeImages()", LightThemeImageAdapter.getListMapper(),
                                new CloudRequest.CloudCall<BrandingImageList>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingImageList> call() {
                                        return endpoints.getUserInterfaceConfigurationImagesApi()
                                                        .getAllLightImageData();
                                    }
                                });
    }

    /**
     * Gets a dark theme color.
     * 
     * <p>
     * Similar to {@link #readDarkThemeColor(com.arm.mbed.cloud.sdk.branding.model.DarkThemeColorReference)}
     * 
     * @param darkThemeColor
     *            a dark theme color.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public DarkThemeColor readDarkThemeColor(@NonNull DarkThemeColor darkThemeColor) throws MbedCloudException {
        checkNotNull(darkThemeColor, TAG_DARK_THEME_COLOR);
        return readDarkThemeColor(darkThemeColor.getReference());
    }

    /**
     * Gets a dark theme color.
     * 
     * <p>
     * Retrieve the requested dark theme branding color.
     * 
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param reference
     *            Color name.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public DarkThemeColor readDarkThemeColor(@NonNull DarkThemeColorReference reference) throws MbedCloudException {
        checkNotNull(reference, TAG_REFERENCE);
        final DarkThemeColorReference finalReference = reference;
        return CloudCaller.call(this, "readDarkThemeColor()", DarkThemeColorAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingColor>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingColor> call() {
                                        return endpoints.getUserInterfaceConfigurationColorsApi()
                                                        .getDarkColor(finalReference == null ? null
                                                                                             : finalReference.getString());
                                    }
                                });
    }

    /**
     * Gets a dark theme image.
     * 
     * <p>
     * Similar to {@link #readDarkThemeImage(com.arm.mbed.cloud.sdk.branding.model.DarkThemeImageReference)}
     * 
     * @param darkThemeImage
     *            a dark theme image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public DarkThemeImage readDarkThemeImage(@NonNull DarkThemeImage darkThemeImage) throws MbedCloudException {
        checkNotNull(darkThemeImage, TAG_DARK_THEME_IMAGE);
        return readDarkThemeImage(darkThemeImage.getReference());
    }

    /**
     * Gets a dark theme image.
     * 
     * <p>
     * Retrieve metadata for one account dark theme branding image.
     * 
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/dark/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param reference
     *            Name of the image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public DarkThemeImage readDarkThemeImage(@NonNull DarkThemeImageReference reference) throws MbedCloudException {
        checkNotNull(reference, TAG_REFERENCE);
        final DarkThemeImageReference finalReference = reference;
        return CloudCaller.call(this, "readDarkThemeImage()", DarkThemeImageAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingImage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingImage> call() {
                                        return endpoints.getUserInterfaceConfigurationImagesApi()
                                                        .getDarkImageData(finalReference == null ? null
                                                                                                 : finalReference.getString());
                                    }
                                });
    }

    /**
     * Gets a light theme color.
     * 
     * <p>
     * Similar to {@link #readLightThemeColor(com.arm.mbed.cloud.sdk.branding.model.LightThemeColorReference)}
     * 
     * @param lightThemeColor
     *            a light theme color.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public LightThemeColor readLightThemeColor(@NonNull LightThemeColor lightThemeColor) throws MbedCloudException {
        checkNotNull(lightThemeColor, TAG_LIGHT_THEME_COLOR);
        return readLightThemeColor(lightThemeColor.getReference());
    }

    /**
     * Gets a light theme color.
     * 
     * <p>
     * Retrieve the requested light theme branding color.
     * 
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param reference
     *            Color name.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public LightThemeColor readLightThemeColor(@NonNull LightThemeColorReference reference) throws MbedCloudException {
        checkNotNull(reference, TAG_REFERENCE);
        final LightThemeColorReference finalReference = reference;
        return CloudCaller.call(this, "readLightThemeColor()", LightThemeColorAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingColor>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingColor> call() {
                                        return endpoints.getUserInterfaceConfigurationColorsApi()
                                                        .getLightColor(finalReference == null ? null
                                                                                              : finalReference.getString());
                                    }
                                });
    }

    /**
     * Gets a light theme image.
     * 
     * <p>
     * Similar to {@link #readLightThemeImage(com.arm.mbed.cloud.sdk.branding.model.LightThemeImageReference)}
     * 
     * @param lightThemeImage
     *            a light theme image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public LightThemeImage readLightThemeImage(@NonNull LightThemeImage lightThemeImage) throws MbedCloudException {
        checkNotNull(lightThemeImage, TAG_LIGHT_THEME_IMAGE);
        return readLightThemeImage(lightThemeImage.getReference());
    }

    /**
     * Gets a light theme image.
     * 
     * <p>
     * Retrieve metadata for one account light theme branding image.
     * 
     * **Example:** ``` curl -X GET https://api.us-east-1.mbedcloud.com/v3/branding-images/light/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param reference
     *            Name of the image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public LightThemeImage readLightThemeImage(@NonNull LightThemeImageReference reference) throws MbedCloudException {
        checkNotNull(reference, TAG_REFERENCE);
        final LightThemeImageReference finalReference = reference;
        return CloudCaller.call(this, "readLightThemeImage()", LightThemeImageAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingImage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingImage> call() {
                                        return endpoints.getUserInterfaceConfigurationImagesApi()
                                                        .getLightImageData(finalReference == null ? null
                                                                                                  : finalReference.getString());
                                    }
                                });
    }

    /**
     * Gets a subtenant dark theme color.
     * 
     * <p>
     * Similar to
     * {@link #readSubtenantDarkThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeColorReference)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantDarkThemeColor
     *            a subtenant dark theme color.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantDarkThemeColor
           readSubtenantDarkThemeColor(@NonNull String accountId,
                                       @NonNull SubtenantDarkThemeColor subtenantDarkThemeColor) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantDarkThemeColor, TAG_SUBTENANT_DARK_THEME_COLOR);
        return readSubtenantDarkThemeColor(accountId, subtenantDarkThemeColor.getReference());
    }

    /**
     * Gets a subtenant dark theme color.
     * 
     * <p>
     * Retrieve the requested dark theme branding color. [b]Note:[/b] This endpoint is restricted to administrators.
     * 
     * **Example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/dark/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param accountId
     *            The ID of the account.
     * @param reference
     *            Color name.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantDarkThemeColor
           readSubtenantDarkThemeColor(@NonNull String accountId,
                                       @NonNull SubtenantDarkThemeColorReference reference) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(reference, TAG_REFERENCE);
        final String finalAccountId = accountId;
        final SubtenantDarkThemeColorReference finalReference = reference;
        return CloudCaller.call(this, "readSubtenantDarkThemeColor()", SubtenantDarkThemeColorAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingColor>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingColor> call() {
                                        return endpoints.getTenantUserInterfaceConfigurationColorsApi()
                                                        .getAccountDarkColor(finalAccountId,
                                                                             finalReference == null ? null
                                                                                                    : finalReference.getString());
                                    }
                                });
    }

    /**
     * Gets a subtenant dark theme image.
     * 
     * <p>
     * Similar to
     * {@link #readSubtenantDarkThemeImage(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeImageReference)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantDarkThemeImage
     *            a subtenant dark theme image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantDarkThemeImage
           readSubtenantDarkThemeImage(@NonNull String accountId,
                                       @NonNull SubtenantDarkThemeImage subtenantDarkThemeImage) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantDarkThemeImage, TAG_SUBTENANT_DARK_THEME_IMAGE);
        return readSubtenantDarkThemeImage(accountId, subtenantDarkThemeImage.getReference());
    }

    /**
     * Gets a subtenant dark theme image.
     * 
     * <p>
     * Retrieve metadata of one account dark theme branding image. [b]Note:[/b] This endpoint is restricted to
     * administrators.
     * 
     * **Example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/dark/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param accountId
     *            The ID of the account.
     * @param reference
     *            Name of the image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantDarkThemeImage
           readSubtenantDarkThemeImage(@NonNull String accountId,
                                       @NonNull SubtenantDarkThemeImageReference reference) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(reference, TAG_REFERENCE);
        final String finalAccountId = accountId;
        final SubtenantDarkThemeImageReference finalReference = reference;
        return CloudCaller.call(this, "readSubtenantDarkThemeImage()", SubtenantDarkThemeImageAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingImage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingImage> call() {
                                        return endpoints.getTenantUserInterfaceConfigurationImagesApi()
                                                        .getAccountDarkImageData(finalAccountId,
                                                                                 finalReference == null ? null
                                                                                                        : finalReference.getString());
                                    }
                                });
    }

    /**
     * Gets a subtenant light theme color.
     * 
     * <p>
     * Similar to
     * {@link #readSubtenantLightThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorReference)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantLightThemeColor
     *            a subtenant light theme color.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantLightThemeColor
           readSubtenantLightThemeColor(@NonNull String accountId,
                                        @NonNull SubtenantLightThemeColor subtenantLightThemeColor) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantLightThemeColor, TAG_SUBTENANT_LIGHT_THEME_COLOR);
        return readSubtenantLightThemeColor(accountId, subtenantLightThemeColor.getReference());
    }

    /**
     * Gets a subtenant light theme color.
     * 
     * <p>
     * Retrieve the requested light theme branding color. [b]Note:[/b] This endpoint is restricted to administrators.
     * 
     * **Example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-colors/light/{reference} -H 'Authorization:
     * Bearer [access_key]' ```
     * 
     * @param accountId
     *            The ID of the account.
     * @param reference
     *            Color name.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantLightThemeColor
           readSubtenantLightThemeColor(@NonNull String accountId,
                                        @NonNull SubtenantLightThemeColorReference reference) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(reference, TAG_REFERENCE);
        final String finalAccountId = accountId;
        final SubtenantLightThemeColorReference finalReference = reference;
        return CloudCaller.call(this, "readSubtenantLightThemeColor()", SubtenantLightThemeColorAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingColor>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingColor> call() {
                                        return endpoints.getTenantUserInterfaceConfigurationColorsApi()
                                                        .getAccountLightColor(finalAccountId,
                                                                              finalReference == null ? null
                                                                                                     : finalReference.getString());
                                    }
                                });
    }

    /**
     * Gets a subtenant light theme image.
     * 
     * <p>
     * Similar to
     * {@link #readSubtenantLightThemeImage(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeImageReference)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantLightThemeImage
     *            a subtenant light theme image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantLightThemeImage
           readSubtenantLightThemeImage(@NonNull String accountId,
                                        @NonNull SubtenantLightThemeImage subtenantLightThemeImage) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantLightThemeImage, TAG_SUBTENANT_LIGHT_THEME_IMAGE);
        return readSubtenantLightThemeImage(accountId, subtenantLightThemeImage.getReference());
    }

    /**
     * Gets a subtenant light theme image.
     * 
     * <p>
     * Retrieve metadata for one account light theme branding image. [b]Note:[/b] This endpoint is restricted to
     * administrators.
     * 
     * **Example:** ``` curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id}/branding-images/light/{reference} \ -H
     * 'Authorization: Bearer [access_key]' ```
     * 
     * @param accountId
     *            The ID of the account.
     * @param reference
     *            Name of the image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantLightThemeImage
           readSubtenantLightThemeImage(@NonNull String accountId,
                                        @NonNull SubtenantLightThemeImageReference reference) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(reference, TAG_REFERENCE);
        final String finalAccountId = accountId;
        final SubtenantLightThemeImageReference finalReference = reference;
        return CloudCaller.call(this, "readSubtenantLightThemeImage()", SubtenantLightThemeImageAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingImage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingImage> call() {
                                        return endpoints.getTenantUserInterfaceConfigurationImagesApi()
                                                        .getAccountLightImageData(finalAccountId,
                                                                                  finalReference == null ? null
                                                                                                         : finalReference.getString());
                                    }
                                });
    }

    /**
     * Modifies a dark theme color.
     * 
     * <p>
     * Similar to
     * {@link #updateDarkThemeColor(com.arm.mbed.cloud.sdk.branding.model.DarkThemeColorReference, com.arm.mbed.cloud.sdk.branding.model.DarkThemeColor)}
     * 
     * @param darkThemeColor
     *            a dark theme color.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public DarkThemeColor updateDarkThemeColor(@NonNull DarkThemeColor darkThemeColor) throws MbedCloudException {
        checkNotNull(darkThemeColor, TAG_DARK_THEME_COLOR);
        checkModelValidity(darkThemeColor, TAG_DARK_THEME_COLOR);
        return updateDarkThemeColor(darkThemeColor.getReference(), darkThemeColor);
    }

    /**
     * Modifies a dark theme color.
     * 
     * <p>
     * Update a dark theme branding color. [b]Note:[/b] This endpoint is restricted to administrators.
     * 
     * **Example:** ``` curl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/dark/primary \ -H
     * 'Authorization: Bearer [access_key]' \ -H 'content-type: application/json' \ -d '{ "color": "#f3f93e" }' ```
     * 
     * @param reference
     *            Color name.
     * @param darkThemeColor
     *            a dark theme color.
     * @return an updated dark theme color
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public DarkThemeColor updateDarkThemeColor(@NonNull DarkThemeColorReference reference,
                                               @NonNull DarkThemeColor darkThemeColor) throws MbedCloudException {
        checkNotNull(reference, TAG_REFERENCE);
        checkNotNull(darkThemeColor, TAG_DARK_THEME_COLOR);
        checkModelValidity(darkThemeColor, TAG_DARK_THEME_COLOR);
        final DarkThemeColorReference finalReference = reference;
        final DarkThemeColor finalDarkThemeColor = darkThemeColor;
        return CloudCaller.call(this, "updateDarkThemeColor()", DarkThemeColorAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingColor>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingColor> call() {
                                        return endpoints.getUserInterfaceConfigurationColorsApi()
                                                        .setDarkColor(finalReference == null ? null
                                                                                             : finalReference.getString(),
                                                                      DarkThemeColorAdapter.reverseMapUpdateRequest(finalDarkThemeColor));
                                    }
                                }, true);
    }

    /**
     * Modifies a dark theme image.
     * 
     * <p>
     * Similar to
     * {@link #updateDarkThemeImage(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.branding.model.DarkThemeImageReference)}
     * 
     * @param image
     *            The image in PNG or JPEG format as multipart form data.
     * @param darkThemeImage
     *            a dark theme image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public DarkThemeImage updateDarkThemeImage(@NonNull DataFile image,
                                               @NonNull DarkThemeImage darkThemeImage) throws MbedCloudException {
        checkNotNull(image, TAG_IMAGE);
        checkNotNull(darkThemeImage, TAG_DARK_THEME_IMAGE);
        checkModelValidity(image, TAG_IMAGE);
        checkModelValidity(darkThemeImage, TAG_DARK_THEME_IMAGE);
        return updateDarkThemeImage(image, darkThemeImage.getReference());
    }

    /**
     * Modifies a dark theme image.
     * 
     * <p>
     * Upload a new account branding image as form data in the dark theme in PNG or JPEG format. [b]Note:[/b] This
     * endpoint is restricted to administrators.
     * 
     * @param image
     *            The image in PNG or JPEG format as multipart form data.
     * @param reference
     *            Name of the image.
     * @return an updated dark theme image
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public DarkThemeImage updateDarkThemeImage(@NonNull DataFile image,
                                               @NonNull DarkThemeImageReference reference) throws MbedCloudException {
        checkNotNull(image, TAG_IMAGE);
        checkNotNull(reference, TAG_REFERENCE);
        checkModelValidity(image, TAG_IMAGE);
        final DataFile finalImage = image;
        final DarkThemeImageReference finalReference = reference;
        return CloudCaller.call(this, "updateDarkThemeImage()", DarkThemeImageAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingImage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingImage> call() {
                                        return endpoints.getUserInterfaceConfigurationImagesApi()
                                                        .uploadDarkImageMultipart(finalReference == null ? null
                                                                                                         : finalReference.getString(),
                                                                                  DataFileAdapter.reverseMap("image",
                                                                                                             finalImage));
                                    }
                                }, true);
    }

    /**
     * Modifies a light theme color.
     * 
     * <p>
     * Similar to
     * {@link #updateLightThemeColor(com.arm.mbed.cloud.sdk.branding.model.LightThemeColorReference, com.arm.mbed.cloud.sdk.branding.model.LightThemeColor)}
     * 
     * @param lightThemeColor
     *            a light theme color.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public LightThemeColor updateLightThemeColor(@NonNull LightThemeColor lightThemeColor) throws MbedCloudException {
        checkNotNull(lightThemeColor, TAG_LIGHT_THEME_COLOR);
        checkModelValidity(lightThemeColor, TAG_LIGHT_THEME_COLOR);
        return updateLightThemeColor(lightThemeColor.getReference(), lightThemeColor);
    }

    /**
     * Modifies a light theme color.
     * 
     * <p>
     * Update light theme branding color. [b]Note:[/b] This endpoint is restricted to administrators.
     * 
     * **Example:** ``` curl -X PUT https://api.us-east-1.mbedcloud.com/v3/branding-colors/light/primary \ -H
     * 'Authorization: Bearer [access_key]' \ -H 'content-type: application/json' \ -d '{ "color": "purple" }' ```
     * 
     * @param reference
     *            Color name.
     * @param lightThemeColor
     *            a light theme color.
     * @return an updated light theme color
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public LightThemeColor updateLightThemeColor(@NonNull LightThemeColorReference reference,
                                                 @NonNull LightThemeColor lightThemeColor) throws MbedCloudException {
        checkNotNull(reference, TAG_REFERENCE);
        checkNotNull(lightThemeColor, TAG_LIGHT_THEME_COLOR);
        checkModelValidity(lightThemeColor, TAG_LIGHT_THEME_COLOR);
        final LightThemeColorReference finalReference = reference;
        final LightThemeColor finalLightThemeColor = lightThemeColor;
        return CloudCaller.call(this, "updateLightThemeColor()", LightThemeColorAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingColor>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingColor> call() {
                                        return endpoints.getUserInterfaceConfigurationColorsApi()
                                                        .setLightColor(finalReference == null ? null
                                                                                              : finalReference.getString(),
                                                                       LightThemeColorAdapter.reverseMapUpdateRequest(finalLightThemeColor));
                                    }
                                }, true);
    }

    /**
     * Modifies a light theme image.
     * 
     * <p>
     * Similar to
     * {@link #updateLightThemeImage(com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.branding.model.LightThemeImageReference)}
     * 
     * @param image
     *            The image in PNG or JPEG format as multipart form data.
     * @param lightThemeImage
     *            a light theme image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public LightThemeImage updateLightThemeImage(@NonNull DataFile image,
                                                 @NonNull LightThemeImage lightThemeImage) throws MbedCloudException {
        checkNotNull(image, TAG_IMAGE);
        checkNotNull(lightThemeImage, TAG_LIGHT_THEME_IMAGE);
        checkModelValidity(image, TAG_IMAGE);
        checkModelValidity(lightThemeImage, TAG_LIGHT_THEME_IMAGE);
        return updateLightThemeImage(image, lightThemeImage.getReference());
    }

    /**
     * Modifies a light theme image.
     * 
     * <p>
     * Upload a new account branding image as form data in the light theme in PNG or JPEG format. [b]Note:[/b] This
     * endpoint is restricted to administrators.
     * 
     * @param image
     *            The image in PNG or JPEG format as multipart form data.
     * @param reference
     *            Name of the image.
     * @return an updated light theme image
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public LightThemeImage
           updateLightThemeImage(@NonNull DataFile image,
                                 @NonNull LightThemeImageReference reference) throws MbedCloudException {
        checkNotNull(image, TAG_IMAGE);
        checkNotNull(reference, TAG_REFERENCE);
        checkModelValidity(image, TAG_IMAGE);
        final DataFile finalImage = image;
        final LightThemeImageReference finalReference = reference;
        return CloudCaller.call(this, "updateLightThemeImage()", LightThemeImageAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingImage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingImage> call() {
                                        return endpoints.getUserInterfaceConfigurationImagesApi()
                                                        .uploadLightImageMultipart(finalReference == null ? null
                                                                                                          : finalReference.getString(),
                                                                                   DataFileAdapter.reverseMap("image",
                                                                                                              finalImage));
                                    }
                                }, true);
    }

    /**
     * Modifies a subtenant dark theme color.
     * 
     * <p>
     * Similar to
     * {@link #updateSubtenantDarkThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeColorReference, com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeColor)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantDarkThemeColor
     *            a subtenant dark theme color.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantDarkThemeColor
           updateSubtenantDarkThemeColor(@NonNull String accountId,
                                         @NonNull SubtenantDarkThemeColor subtenantDarkThemeColor) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantDarkThemeColor, TAG_SUBTENANT_DARK_THEME_COLOR);
        checkModelValidity(subtenantDarkThemeColor, TAG_SUBTENANT_DARK_THEME_COLOR);
        return updateSubtenantDarkThemeColor(accountId, subtenantDarkThemeColor.getReference(),
                                             subtenantDarkThemeColor);
    }

    /**
     * Modifies a subtenant dark theme color.
     * 
     * <p>
     * Update a dark theme branding color. [b]Note:[/b] This endpoint is restricted to administrators.
     * 
     * **Example:** ``` curl -X PUT
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/dark/primary \ -H 'Authorization:
     * Bearer [access_key]' \ -H 'content-type: application/json' \ -d '{ "color": "#f3f93e" }' ```
     * 
     * @param accountId
     *            The ID of the account.
     * @param reference
     *            Color name.
     * @param subtenantDarkThemeColor
     *            a subtenant dark theme color.
     * @return an updated subtenant dark theme color
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantDarkThemeColor
           updateSubtenantDarkThemeColor(@NonNull String accountId, @NonNull SubtenantDarkThemeColorReference reference,
                                         @NonNull SubtenantDarkThemeColor subtenantDarkThemeColor) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(reference, TAG_REFERENCE);
        checkNotNull(subtenantDarkThemeColor, TAG_SUBTENANT_DARK_THEME_COLOR);
        checkModelValidity(subtenantDarkThemeColor, TAG_SUBTENANT_DARK_THEME_COLOR);
        final String finalAccountId = accountId;
        final SubtenantDarkThemeColorReference finalReference = reference;
        final SubtenantDarkThemeColor finalSubtenantDarkThemeColor = subtenantDarkThemeColor;
        return CloudCaller.call(this, "updateSubtenantDarkThemeColor()", SubtenantDarkThemeColorAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingColor>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingColor> call() {
                                        return endpoints.getTenantUserInterfaceConfigurationColorsApi()
                                                        .setAccountDarkColor(finalAccountId,
                                                                             finalReference == null ? null
                                                                                                    : finalReference.getString(),
                                                                             SubtenantDarkThemeColorAdapter.reverseMapUpdateRequest(finalSubtenantDarkThemeColor));
                                    }
                                }, true);
    }

    /**
     * Modifies a subtenant dark theme image.
     * 
     * <p>
     * Similar to
     * {@link #updateSubtenantDarkThemeImage(String, com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.branding.model.SubtenantDarkThemeImageReference)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param image
     *            The image in PNG or JPEG format as multipart form data.
     * @param subtenantDarkThemeImage
     *            a subtenant dark theme image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantDarkThemeImage
           updateSubtenantDarkThemeImage(@NonNull String accountId, @NonNull DataFile image,
                                         @NonNull SubtenantDarkThemeImage subtenantDarkThemeImage) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(image, TAG_IMAGE);
        checkNotNull(subtenantDarkThemeImage, TAG_SUBTENANT_DARK_THEME_IMAGE);
        checkModelValidity(image, TAG_IMAGE);
        checkModelValidity(subtenantDarkThemeImage, TAG_SUBTENANT_DARK_THEME_IMAGE);
        return updateSubtenantDarkThemeImage(accountId, image, subtenantDarkThemeImage.getReference());
    }

    /**
     * Modifies a subtenant dark theme image.
     * 
     * <p>
     * Upload a new account dark theme branding image as form data in PNG or JPEG format. [b]Note:[/b] This endpoint is
     * restricted to administrators.
     * 
     * @param accountId
     *            The ID of the account.
     * @param image
     *            The image in PNG or JPEG format as multipart form data.
     * @param reference
     *            Name of the image.
     * @return an updated subtenant dark theme image
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantDarkThemeImage
           updateSubtenantDarkThemeImage(@NonNull String accountId, @NonNull DataFile image,
                                         @NonNull SubtenantDarkThemeImageReference reference) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(image, TAG_IMAGE);
        checkNotNull(reference, TAG_REFERENCE);
        checkModelValidity(image, TAG_IMAGE);
        final String finalAccountId = accountId;
        final DataFile finalImage = image;
        final SubtenantDarkThemeImageReference finalReference = reference;
        return CloudCaller.call(this, "updateSubtenantDarkThemeImage()", SubtenantDarkThemeImageAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingImage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingImage> call() {
                                        return endpoints.getTenantUserInterfaceConfigurationImagesApi()
                                                        .uploadAccountDarkImageMultipart(finalAccountId,
                                                                                         finalReference == null ? null
                                                                                                                : finalReference.getString(),
                                                                                         DataFileAdapter.reverseMap("image",
                                                                                                                    finalImage));
                                    }
                                }, true);
    }

    /**
     * Modifies a subtenant light theme color.
     * 
     * <p>
     * Similar to
     * {@link #updateSubtenantLightThemeColor(String, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColorReference, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeColor)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param subtenantLightThemeColor
     *            a subtenant light theme color.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantLightThemeColor
           updateSubtenantLightThemeColor(@NonNull String accountId,
                                          @NonNull SubtenantLightThemeColor subtenantLightThemeColor) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(subtenantLightThemeColor, TAG_SUBTENANT_LIGHT_THEME_COLOR);
        checkModelValidity(subtenantLightThemeColor, TAG_SUBTENANT_LIGHT_THEME_COLOR);
        return updateSubtenantLightThemeColor(accountId, subtenantLightThemeColor.getReference(),
                                              subtenantLightThemeColor);
    }

    /**
     * Modifies a subtenant light theme color.
     * 
     * <p>
     * Update a light theme branding color. [b]Note:[/b] This endpoint is restricted to administrators.
     * 
     * **Example:** ``` curl -X PUT
     * https://api.us-east-1.mbedcloud.com/v3/accounts/{account_id)/branding-colors/light/primary \ -H 'Authorization:
     * Bearer [access_key]' \ -H 'content-type: application/json' \ -d '{ "color": "purple" }' ```
     * 
     * @param accountId
     *            The ID of the account.
     * @param reference
     *            Color name.
     * @param subtenantLightThemeColor
     *            a subtenant light theme color.
     * @return an updated subtenant light theme color
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantLightThemeColor
           updateSubtenantLightThemeColor(@NonNull String accountId,
                                          @NonNull SubtenantLightThemeColorReference reference,
                                          @NonNull SubtenantLightThemeColor subtenantLightThemeColor) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(reference, TAG_REFERENCE);
        checkNotNull(subtenantLightThemeColor, TAG_SUBTENANT_LIGHT_THEME_COLOR);
        checkModelValidity(subtenantLightThemeColor, TAG_SUBTENANT_LIGHT_THEME_COLOR);
        final String finalAccountId = accountId;
        final SubtenantLightThemeColorReference finalReference = reference;
        final SubtenantLightThemeColor finalSubtenantLightThemeColor = subtenantLightThemeColor;
        return CloudCaller.call(this, "updateSubtenantLightThemeColor()", SubtenantLightThemeColorAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingColor>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingColor> call() {
                                        return endpoints.getTenantUserInterfaceConfigurationColorsApi()
                                                        .setAccountLightColor(finalAccountId,
                                                                              finalReference == null ? null
                                                                                                     : finalReference.getString(),
                                                                              SubtenantLightThemeColorAdapter.reverseMapUpdateRequest(finalSubtenantLightThemeColor));
                                    }
                                }, true);
    }

    /**
     * Modifies a subtenant light theme image.
     * 
     * <p>
     * Similar to
     * {@link #updateSubtenantLightThemeImage(String, com.arm.mbed.cloud.sdk.common.model.DataFile, com.arm.mbed.cloud.sdk.branding.model.SubtenantLightThemeImageReference)}
     * 
     * @param accountId
     *            The ID of the account.
     * @param image
     *            The image in PNG or JPEG format as multipart form data.
     * @param subtenantLightThemeImage
     *            a subtenant light theme image.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantLightThemeImage
           updateSubtenantLightThemeImage(@NonNull String accountId, @NonNull DataFile image,
                                          @NonNull SubtenantLightThemeImage subtenantLightThemeImage) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(image, TAG_IMAGE);
        checkNotNull(subtenantLightThemeImage, TAG_SUBTENANT_LIGHT_THEME_IMAGE);
        checkModelValidity(image, TAG_IMAGE);
        checkModelValidity(subtenantLightThemeImage, TAG_SUBTENANT_LIGHT_THEME_IMAGE);
        return updateSubtenantLightThemeImage(accountId, image, subtenantLightThemeImage.getReference());
    }

    /**
     * Modifies a subtenant light theme image.
     * 
     * <p>
     * Upload a new account branding image as form data in PNG or JPEG format. [b]Note:[/b] This endpoint is restricted
     * to administrators.
     * 
     * @param accountId
     *            The ID of the account.
     * @param image
     *            The image in PNG or JPEG format as multipart form data.
     * @param reference
     *            Name of the image.
     * @return an updated subtenant light theme image
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @API
    @Nullable
    public SubtenantLightThemeImage
           updateSubtenantLightThemeImage(@NonNull String accountId, @NonNull DataFile image,
                                          @NonNull SubtenantLightThemeImageReference reference) throws MbedCloudException {
        checkNotNull(accountId, TAG_ACCOUNT_ID);
        checkNotNull(image, TAG_IMAGE);
        checkNotNull(reference, TAG_REFERENCE);
        checkModelValidity(image, TAG_IMAGE);
        final String finalAccountId = accountId;
        final DataFile finalImage = image;
        final SubtenantLightThemeImageReference finalReference = reference;
        return CloudCaller.call(this, "updateSubtenantLightThemeImage()", SubtenantLightThemeImageAdapter.getMapper(),
                                new CloudRequest.CloudCall<BrandingImage>() {
                                    /**
                                     * Makes the low level call to the Cloud.
                                     * 
                                     * @return Corresponding Retrofit2 Call object
                                     */
                                    @Override
                                    public Call<BrandingImage> call() {
                                        return endpoints.getTenantUserInterfaceConfigurationImagesApi()
                                                        .uploadAccountLightImageMultipart(finalAccountId,
                                                                                          finalReference == null ? null
                                                                                                                 : finalReference.getString(),
                                                                                          DataFileAdapter.reverseMap("image",
                                                                                                                     finalImage));
                                    }
                                }, true);
    }
}
