// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.adapters;

import com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProvider;
import com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderStatus;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.common.listing.ListResponse;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.CertificateGenerationReq;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.IdentityProviderCreationReq;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.IdentityProviderInfo;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.IdentityProviderList;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.IdentityProviderUpdateReq;
import java.util.List;

/**
 * Adapter for subtenant identity providers.
 */
@Preamble(description = "Adapter for subtenant identity providers.")
@Internal
@SuppressWarnings("checkstyle:LineLength")
public final class SubtenantIdentityProviderAdapter {
    /**
     * Constructor.
     */
    private SubtenantIdentityProviderAdapter() {
        super();
        // Nothing to do;
    }

    /**
     * Maps a subtenant identity provider into an identity provider creation req.
     * 
     * @param toBeMapped
     *            a subtenant identity provider.
     * @return mapped an identity provider creation req
     */
    @Internal
    public static IdentityProviderCreationReq reverseMapAddRequest(SubtenantIdentityProvider toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final IdentityProviderCreationReq identityProviderCreationReq = new IdentityProviderCreationReq();
        identityProviderCreationReq.setDescription(toBeMapped.getDescription());
        identityProviderCreationReq.setName(toBeMapped.getName());
        identityProviderCreationReq.setOidcAttributes(OidcRequestAdapter.reverseMapAddRequest(toBeMapped.getOidcAttributes()));
        // No adapter method was found in order to perform a translation from Object to SAML2Req for field:
        // saml2Attributes
        identityProviderCreationReq.setStatus(translateToComArmMbedCloudSdkLowlevelPelionclouddevicemanagementModelIdentityprovidercreationreqStatusenum(toBeMapped.getStatus()));
        // No field equivalent to type in IdentityProviderCreationReq was found in SubtenantIdentityProvider
        return identityProviderCreationReq;
    }

    /**
     * Maps an identity provider info into a subtenant identity provider.
     * 
     * @param toBeMapped
     *            an identity provider info.
     * @return mapped a subtenant identity provider
     */
    @Internal
    public static SubtenantIdentityProvider map(IdentityProviderInfo toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final SubtenantIdentityProvider subtenantIdentityProvider = new SubtenantIdentityProvider(TranslationUtils.toDate(toBeMapped.getCreatedAt()),
                                                                                                  TranslationUtils.toBool(toBeMapped.isIsDefault()),
                                                                                                  TranslationUtils.toDate(toBeMapped.getUpdatedAt()));
        subtenantIdentityProvider.setAccountId(toBeMapped.getAccountId());
        subtenantIdentityProvider.setDescription(toBeMapped.getDescription());
        subtenantIdentityProvider.setId(toBeMapped.getId());
        subtenantIdentityProvider.setName(toBeMapped.getName());
        subtenantIdentityProvider.setOidcAttributes(OidcRequestAdapter.map(toBeMapped.getOidcAttributes()));
        subtenantIdentityProvider.setSaml2Attributes(toBeMapped.getSaml2Attributes());
        subtenantIdentityProvider.setStatus(translateToSubtenantIdentityProviderStatus(toBeMapped.getStatus()));
        return subtenantIdentityProvider;
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<IdentityProviderInfo, SubtenantIdentityProvider> getMapper() {
        return new GenericAdapter.Mapper<IdentityProviderInfo, SubtenantIdentityProvider>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public SubtenantIdentityProvider map(IdentityProviderInfo toBeMapped) {
                return SubtenantIdentityProviderAdapter.map(toBeMapped);
            }
        };
    }

    /**
     * Maps a subtenant identity provider into a certificate generation req.
     * 
     * @param toBeMapped
     *            a subtenant identity provider.
     * @return mapped a certificate generation req
     */
    @Internal
    public static CertificateGenerationReq
           mapToComArmMbedCloudSdkLowlevelPelionclouddevicemanagementModelCertificateGenerationReq(SubtenantIdentityProvider toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final CertificateGenerationReq certificateGenerationReq = new CertificateGenerationReq();
        // No field equivalent to algorithm in CertificateGenerationReq was found in SubtenantIdentityProvider
        // No field equivalent to validity in CertificateGenerationReq was found in SubtenantIdentityProvider
        return certificateGenerationReq;
    }

    /**
     * Maps an identity provider list into a subtenant identity provider.
     * 
     * @param toBeMapped
     *            an identity provider list.
     * @return mapped list response
     */
    @Internal
    public static ListResponse<SubtenantIdentityProvider> mapList(IdentityProviderList toBeMapped) {
        final IdentityProviderList finalList = toBeMapped;
        final GenericAdapter.RespList<IdentityProviderInfo> respList = new GenericAdapter.RespList<IdentityProviderInfo>() {
            /**
             * Executes getAfter.
             * 
             * @return something
             */
            @Override
            public String getAfter() {
                return (finalList == null) ? null : finalList.getAfter();
            }

            /**
             * Executes getContinuationMarker.
             * 
             * @return something
             */
            @Override
            public String getContinuationMarker() {
                return null;
            }

            /**
             * Executes getData.
             * 
             * @return something
             */
            @Override
            public List<IdentityProviderInfo> getData() {
                return (finalList == null) ? null : finalList.getData();
            }

            /**
             * Executes getHasMore.
             * 
             * @return something
             */
            @Override
            public Boolean getHasMore() {
                return (finalList == null) ? null : finalList.isHasMore();
            }

            /**
             * Executes getLimit.
             * 
             * @return something
             */
            @Override
            public Integer getLimit() {
                return (finalList == null) ? null : finalList.getLimit();
            }

            /**
             * Executes getOrder.
             * 
             * @return something
             */
            @Override
            public String getOrder() {
                return (finalList == null) ? null : finalList.getOrder().toString();
            }

            /**
             * Executes getTotalCount.
             * 
             * @return something
             */
            @Override
            public Integer getTotalCount() {
                return (finalList == null) ? null : finalList.getTotalCount();
            }
        };
        return GenericAdapter.mapList(respList, SubtenantIdentityProviderAdapter.getMapper());
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<IdentityProviderList, ListResponse<SubtenantIdentityProvider>> getListMapper() {
        return new GenericAdapter.Mapper<IdentityProviderList, ListResponse<SubtenantIdentityProvider>>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public ListResponse<SubtenantIdentityProvider> map(IdentityProviderList toBeMapped) {
                return SubtenantIdentityProviderAdapter.mapList(toBeMapped);
            }
        };
    }

    /**
     * Maps a subtenant identity provider into an identity provider update req.
     * 
     * @param toBeMapped
     *            a subtenant identity provider.
     * @return mapped an identity provider update req
     */
    @Internal
    public static IdentityProviderUpdateReq reverseMapUpdateRequest(SubtenantIdentityProvider toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final IdentityProviderUpdateReq identityProviderUpdateReq = new IdentityProviderUpdateReq();
        identityProviderUpdateReq.setDescription(toBeMapped.getDescription());
        identityProviderUpdateReq.setName(toBeMapped.getName());
        identityProviderUpdateReq.setOidcAttributes(OidcRequestAdapter.reverseMapUpdateRequest(toBeMapped.getOidcAttributes()));
        // No adapter method was found in order to perform a translation from Object to SAML2Req for field:
        // saml2Attributes
        identityProviderUpdateReq.setStatus(translateToComArmMbedCloudSdkLowlevelPelionclouddevicemanagementModelIdentityproviderupdatereqStatusenum(toBeMapped.getStatus()));
        // No field equivalent to type in IdentityProviderUpdateReq was found in SubtenantIdentityProvider
        return identityProviderUpdateReq;
    }

    /**
     * Maps the enum value.
     * 
     * @param toBeMapped
     *            a subtenant identity provider status.
     * @return mapped enum value
     */
    @Internal
    protected static IdentityProviderCreationReq.StatusEnum
              translateToComArmMbedCloudSdkLowlevelPelionclouddevicemanagementModelIdentityprovidercreationreqStatusenum(SubtenantIdentityProviderStatus toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        switch (toBeMapped) {
            case ACTIVE:
                return IdentityProviderCreationReq.StatusEnum.ACTIVE;
            case SUSPENDED:
                return IdentityProviderCreationReq.StatusEnum.SUSPENDED;
            default:
                return null;
        }
    }

    /**
     * Maps the enum value.
     * 
     * @param toBeMapped
     *            a status enum.
     * @return mapped enum value
     */
    @Internal
    protected static SubtenantIdentityProviderStatus
              translateToSubtenantIdentityProviderStatus(IdentityProviderInfo.StatusEnum toBeMapped) {
        if (toBeMapped == null) {
            return SubtenantIdentityProviderStatus.getUnknownEnum();
        }
        switch (toBeMapped) {
            case ACTIVE:
                return SubtenantIdentityProviderStatus.ACTIVE;
            case SUSPENDED:
                return SubtenantIdentityProviderStatus.SUSPENDED;
            default:
                return SubtenantIdentityProviderStatus.getUnknownEnum();
        }
    }

    /**
     * Maps the enum value.
     * 
     * @param toBeMapped
     *            a subtenant identity provider status.
     * @return mapped enum value
     */
    @Internal
    protected static IdentityProviderUpdateReq.StatusEnum
              translateToComArmMbedCloudSdkLowlevelPelionclouddevicemanagementModelIdentityproviderupdatereqStatusenum(SubtenantIdentityProviderStatus toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        switch (toBeMapped) {
            case ACTIVE:
                return IdentityProviderUpdateReq.StatusEnum.ACTIVE;
            case SUSPENDED:
                return IdentityProviderUpdateReq.StatusEnum.SUSPENDED;
            default:
                return null;
        }
    }
}
