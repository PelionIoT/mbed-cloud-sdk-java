// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import com.arm.mbed.cloud.sdk.Security;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NonNull;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.ApiClientWrapper;
import com.arm.mbed.cloud.sdk.common.ConnectionOptions;
import com.arm.mbed.cloud.sdk.common.MbedCloudException;
import com.arm.mbed.cloud.sdk.common.SdkContext;
import com.arm.mbed.cloud.sdk.common.dao.AbstractModelDao;
import com.arm.mbed.cloud.sdk.common.dao.CrudDao;

/**
 * Data Access Object (DAO) for certificate issuer configs.
 * <p>
 * 
 * @see <a href="http://www.corej2eepatterns.com/Patterns/DataAccessObject.htm">Core J2EE Patterns - Data Access
 *      Object</a>
 */
@Preamble(description = "Data Access Object (DAO) for certificate issuer configs.")
public class CertificateIssuerConfigDao extends AbstractModelDao<CertificateIssuerConfig>
                                        implements CrudDao<CertificateIssuerConfig> {
    /**
     * Constructor.
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public CertificateIssuerConfigDao() throws MbedCloudException {
        super();
    }

    /**
     * Constructor.
     * 
     * @param client
     *            an api client wrapper.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public CertificateIssuerConfigDao(ApiClientWrapper client) throws MbedCloudException {
        super(client);
    }

    /**
     * Constructor.
     * 
     * @param options
     *            a connection options.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public CertificateIssuerConfigDao(ConnectionOptions options) throws MbedCloudException {
        super(options);
    }

    /**
     * Constructor.
     * 
     * @param sdkContext
     *            an sdk context.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public CertificateIssuerConfigDao(SdkContext sdkContext) throws MbedCloudException {
        super(sdkContext);
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    @SuppressWarnings({ "resource", "unused" })
    public CertificateIssuerConfigDao clone() {
        try {
            return new CertificateIssuerConfigDao().configureAndGet(getModuleOrThrow() == null ? null
                                                                                               : getModuleOrThrow().clone());
        } catch (MbedCloudException exception) {
            return null;
        }
    }

    /**
     * Adds a certificate issuer config.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfigDao#create(com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig)}
     * 
     * @return an added certificate issuer config
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public CertificateIssuerConfig create() throws MbedCloudException {
        return create(getModel());
    }

    /**
     * Adds a certificate issuer config.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Security#createCertificateIssuerConfig(com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig)}
     * 
     * @param createCertificateIssuerConfig
     *            a certificate issuer config.
     * @return an added certificate issuer config
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public CertificateIssuerConfig
           create(@NonNull CertificateIssuerConfig createCertificateIssuerConfig) throws MbedCloudException {
        return setAndGetModel(((Security) getModuleOrThrow()).createCertificateIssuerConfig(createCertificateIssuerConfig));
    }

    /**
     * Deletes a certificate issuer config.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfigDao#delete(com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig)}
     * 
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete() throws MbedCloudException {
        delete(getModel());
    }

    /**
     * Deletes a certificate issuer config.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Security#deleteCertificateIssuerConfig(com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig)}
     * 
     * @param certificateIssuerConfig
     *            a certificate issuer config.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull CertificateIssuerConfig certificateIssuerConfig) throws MbedCloudException {
        ((Security) getModuleOrThrow()).deleteCertificateIssuerConfig(certificateIssuerConfig);
    }

    /**
     * Deletes a certificate issuer config.
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Security#deleteCertificateIssuerConfig(String)}
     * 
     * @param id
     *            Certificate issuer ID configuration.
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public void delete(@NonNull String id) throws MbedCloudException {
        ((Security) getModuleOrThrow()).deleteCertificateIssuerConfig(id);
    }

    /**
     * Get certificate issuer configuration.
     * 
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Security#getDefault()}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public CertificateIssuerConfig getDefault() throws MbedCloudException {
        return setAndGetModel(((Security) getModuleOrThrow()).getDefault());
    }

    /**
     * Instantiates model.
     * 
     * @return instantiated model
     */
    @Override
    @Internal
    protected CertificateIssuerConfig instantiateModel() {
        return new CertificateIssuerConfig();
    }

    /**
     * Instantiates modules.
     * 
     * @param client
     *            an api client wrapper.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ApiClientWrapper client) {
        return new Security(client);
    }

    /**
     * Instantiates modules.
     * 
     * @param options
     *            a connection options.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(ConnectionOptions options) {
        return new Security(options);
    }

    /**
     * Instantiates modules.
     * 
     * @param context
     *            an sdk context.
     * @return instantiated module
     */
    @Override
    @Internal
    protected SdkContext instantiateModule(SdkContext context) {
        return new Security(context);
    }

    /**
     * Gets a certificate issuer config.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfigDao#read(com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public CertificateIssuerConfig read() throws MbedCloudException {
        return read(getModel());
    }

    /**
     * Gets a certificate issuer config.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Security#readCertificateIssuerConfig(com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig)}
     * 
     * @param certificateIssuerConfig
     *            a certificate issuer config.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public CertificateIssuerConfig
           read(@NonNull CertificateIssuerConfig certificateIssuerConfig) throws MbedCloudException {
        return setAndGetModel(((Security) getModuleOrThrow()).readCertificateIssuerConfig(certificateIssuerConfig));
    }

    /**
     * Gets a certificate issuer config.
     * 
     * <p>
     * Similar to {@link com.arm.mbed.cloud.sdk.Security#readCertificateIssuerConfig(String)}
     * 
     * @param id
     *            Certificate issuer ID. configuration.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public CertificateIssuerConfig read(@NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Security) getModuleOrThrow()).readCertificateIssuerConfig(id));
    }

    /**
     * Modifies a certificate issuer config.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfigDao#update(com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig)}
     * 
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public CertificateIssuerConfig update() throws MbedCloudException {
        return update(getModel());
    }

    /**
     * Modifies a certificate issuer config.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Security#updateCertificateIssuerConfig(com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig, String)}
     * 
     * @param certificateIssuerConfigRequest
     *            a certificate issuer config.
     * @param id
     *            Certificate issuer ID. configuration.
     * @return an updated certificate issuer config
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public CertificateIssuerConfig update(@NonNull CertificateIssuerConfig certificateIssuerConfigRequest,
                                          @NonNull String id) throws MbedCloudException {
        return setAndGetModel(((Security) getModuleOrThrow()).updateCertificateIssuerConfig(certificateIssuerConfigRequest,
                                                                                            id));
    }

    /**
     * Modifies a certificate issuer config.
     * 
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.Security#updateCertificateIssuerConfig(com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig)}
     * 
     * @param certificateIssuerConfig
     *            a certificate issuer config.
     * @return something
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    @Override
    public CertificateIssuerConfig
           update(@NonNull CertificateIssuerConfig certificateIssuerConfig) throws MbedCloudException {
        return setAndGetModel(((Security) getModuleOrThrow()).updateCertificateIssuerConfig(certificateIssuerConfig));
    }

    /**
     * Modifies a certificate issuer config.
     * 
     * <p>
     * Note: uses internal data model
     * <p>
     * Similar to
     * {@link com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfigDao#update(com.arm.mbed.cloud.sdk.security.model.CertificateIssuerConfig, String)}
     * 
     * @param id
     *            Certificate issuer ID. configuration.
     * @return an updated certificate issuer config
     * @throws MbedCloudException
     *             if an error occurs during the process.
     */
    public CertificateIssuerConfig update(@NonNull String id) throws MbedCloudException {
        return update(getModel(), id);
    }
}
