// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.adapters;

import com.arm.mbed.cloud.sdk.accounts.model.OidcRequest;
import com.arm.mbed.cloud.sdk.accounts.model.OidcRequestTokenMode;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.GenericAdapter;
import com.arm.mbed.cloud.sdk.common.TranslationUtils;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.OIDCInfo;

/**
 * Adapter for oidc requests.
 */
@Preamble(description = "Adapter for oidc requests.")
@Internal
@SuppressWarnings("checkstyle:LineLength")
public final class OidcRequestAdapter {
    /**
     * Constructor.
     */
    private OidcRequestAdapter() {
        super();
        // Nothing to do;
    }

    /**
     * Maps an oidc request into an o i d c info.
     * 
     * @param toBeMapped
     *            an oidc request.
     * @return mapped an o i d c info
     */
    @Internal
    public static OIDCInfo reverseMapAddRequest(OidcRequest toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final OIDCInfo oidcInfo = new OIDCInfo();
        oidcInfo.setAuthorizationEndpoint(toBeMapped.getAuthorizationEndpoint());
        oidcInfo.setAutoEnrollment(Boolean.valueOf(toBeMapped.isAutoEnrollment()));
        oidcInfo.setClaimMapping(OidcRequestClaimMappingAdapter.reverseMapAddRequest(toBeMapped.getClaimMapping()));
        oidcInfo.setClientId(toBeMapped.getClientId());
        oidcInfo.setClientSecret(toBeMapped.getClientSecret());
        oidcInfo.setEndSessionEndpoint(toBeMapped.getEndSessionEndpoint());
        oidcInfo.setIssuer(toBeMapped.getIssuer());
        oidcInfo.setJwksUri(toBeMapped.getJwksUri());
        oidcInfo.setKeys(IdentityProviderPublicKeyAdapter.reverseMapAddSimpleList(toBeMapped.getKeys()));
        oidcInfo.setRedirectUri(toBeMapped.getRedirectUri());
        oidcInfo.setRevocationEndpoint(toBeMapped.getRevocationEndpoint());
        oidcInfo.setScopes(toBeMapped.getScopes());
        oidcInfo.setTokenEndpoint(toBeMapped.getTokenEndpoint());
        oidcInfo.setTokenRequestMode(translateToComArmMbedCloudSdkLowlevelPelionclouddevicemanagementModelOidcinfoTokenrequestmodeenum(toBeMapped.getTokenRequestMode()));
        oidcInfo.setTokenResponsePath(toBeMapped.getTokenResponsePath());
        oidcInfo.setUserinfoEndpoint(toBeMapped.getUserinfoEndpoint());
        return oidcInfo;
    }

    /**
     * Maps an o i d c info into an oidc request.
     * 
     * @param toBeMapped
     *            an o i d c info.
     * @return mapped an oidc request
     */
    @Internal
    public static OidcRequest map(OIDCInfo toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final OidcRequest oidcRequest = new OidcRequest(toBeMapped.getAuthorizationEndpoint(),
                                                        TranslationUtils.toBool(toBeMapped.isAutoEnrollment()),
                                                        OidcRequestClaimMappingAdapter.map(toBeMapped.getClaimMapping()),
                                                        toBeMapped.getClientId(), toBeMapped.getClientSecret(),
                                                        toBeMapped.getEndSessionEndpoint(), toBeMapped.getIssuer(),
                                                        toBeMapped.getJwksUri(),
                                                        IdentityProviderPublicKeyAdapter.mapSimpleList(toBeMapped.getKeys()),
                                                        toBeMapped.getRedirectUri(), toBeMapped.getRevocationEndpoint(),
                                                        toBeMapped.getScopes(), toBeMapped.getTokenEndpoint(),
                                                        translateToOidcRequestTokenMode(toBeMapped.getTokenRequestMode()),
                                                        toBeMapped.getTokenResponsePath(),
                                                        toBeMapped.getUserinfoEndpoint());
        return oidcRequest;
    }

    /**
     * Gets a mapper.
     * 
     * @return a mapper
     */
    @Internal
    public static GenericAdapter.Mapper<OIDCInfo, OidcRequest> getMapper() {
        return new GenericAdapter.Mapper<OIDCInfo, OidcRequest>() {
            /**
             * Maps.
             * 
             * @param toBeMapped
             *            model to be mapped.
             * @return a mapped object
             */
            @Override
            public OidcRequest map(OIDCInfo toBeMapped) {
                return OidcRequestAdapter.map(toBeMapped);
            }
        };
    }

    /**
     * Maps an oidc request into an o i d c info.
     * 
     * @param toBeMapped
     *            an oidc request.
     * @return mapped an o i d c info
     */
    @Internal
    public static OIDCInfo reverseMapUpdateRequest(OidcRequest toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        final OIDCInfo oidcInfo = new OIDCInfo();
        oidcInfo.setAuthorizationEndpoint(toBeMapped.getAuthorizationEndpoint());
        oidcInfo.setAutoEnrollment(Boolean.valueOf(toBeMapped.isAutoEnrollment()));
        oidcInfo.setClaimMapping(OidcRequestClaimMappingAdapter.reverseMapUpdateRequest(toBeMapped.getClaimMapping()));
        oidcInfo.setClientId(toBeMapped.getClientId());
        oidcInfo.setClientSecret(toBeMapped.getClientSecret());
        oidcInfo.setEndSessionEndpoint(toBeMapped.getEndSessionEndpoint());
        oidcInfo.setIssuer(toBeMapped.getIssuer());
        oidcInfo.setJwksUri(toBeMapped.getJwksUri());
        oidcInfo.setKeys(IdentityProviderPublicKeyAdapter.reverseMapUpdateSimpleList(toBeMapped.getKeys()));
        oidcInfo.setRedirectUri(toBeMapped.getRedirectUri());
        oidcInfo.setRevocationEndpoint(toBeMapped.getRevocationEndpoint());
        oidcInfo.setScopes(toBeMapped.getScopes());
        oidcInfo.setTokenEndpoint(toBeMapped.getTokenEndpoint());
        oidcInfo.setTokenRequestMode(translateToComArmMbedCloudSdkLowlevelPelionclouddevicemanagementModelOidcinfoTokenrequestmodeenum(toBeMapped.getTokenRequestMode()));
        oidcInfo.setTokenResponsePath(toBeMapped.getTokenResponsePath());
        oidcInfo.setUserinfoEndpoint(toBeMapped.getUserinfoEndpoint());
        return oidcInfo;
    }

    /**
     * Maps the enum value.
     * 
     * @param toBeMapped
     *            an oidc request token mode.
     * @return mapped enum value
     */
    @Internal
    protected static OIDCInfo.TokenRequestModeEnum
              translateToComArmMbedCloudSdkLowlevelPelionclouddevicemanagementModelOidcinfoTokenrequestmodeenum(OidcRequestTokenMode toBeMapped) {
        if (toBeMapped == null) {
            return null;
        }
        switch (toBeMapped) {
            case POST:
                return OIDCInfo.TokenRequestModeEnum.POST;
            case GET:
                return OIDCInfo.TokenRequestModeEnum.GET;
            default:
                return null;
        }
    }

    /**
     * Maps the enum value.
     * 
     * @param toBeMapped
     *            a token request mode enum.
     * @return mapped enum value
     */
    @Internal
    protected static OidcRequestTokenMode translateToOidcRequestTokenMode(OIDCInfo.TokenRequestModeEnum toBeMapped) {
        if (toBeMapped == null) {
            return OidcRequestTokenMode.getUnknownEnum();
        }
        switch (toBeMapped) {
            case POST:
                return OidcRequestTokenMode.POST;
            case GET:
                return OidcRequestTokenMode.GET;
            default:
                return OidcRequestTokenMode.getUnknownEnum();
        }
    }
}
