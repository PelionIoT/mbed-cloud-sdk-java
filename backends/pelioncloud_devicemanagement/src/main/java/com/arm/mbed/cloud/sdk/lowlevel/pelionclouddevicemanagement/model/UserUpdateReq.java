/*
 * Pelion Device Management API
 * Pelion Device Management API build from the publicly defined API definitions.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * Represents a user in requests towards Device Management.
 */
@ApiModel(description = "Represents a user in requests towards Device Management.")

public class UserUpdateReq implements Serializable {
    private static final long serialVersionUID = 1L;

    @SerializedName("address")
    private String address = null;

    @SerializedName("email")
    private String email = null;

    @SerializedName("full_name")
    private String fullName = null;

    @SerializedName("groups")
    private List<String> groups = null;

    @SerializedName("is_gtc_accepted")
    private Boolean isGtcAccepted = null;

    @SerializedName("is_marketing_accepted")
    private Boolean isMarketingAccepted = null;

    @SerializedName("is_totp_enabled")
    private Boolean isTotpEnabled = null;

    @SerializedName("login_profiles")
    private List<LoginProfile> loginProfiles = null;

    @SerializedName("phone_number")
    private String phoneNumber = null;

    /**
     * The status of the user. ENROLLING indicates that the user is in the middle of the enrollment process. INVITED
     * means that the user has not accepted the invitation request. RESET means that the password must be changed
     * immediately. INACTIVE users are locked out and not permitted to use the system. Can be changed by the Aggregator
     * Admin only.
     */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        ENROLLING("ENROLLING"),

        INVITED("INVITED"),

        ACTIVE("ACTIVE"),

        RESET("RESET"),

        INACTIVE("INACTIVE");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String text) {
            for (StatusEnum b : StatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StatusEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("status")
    private StatusEnum status = null;

    @SerializedName("username")
    private String username = null;

    public UserUpdateReq address(String address) {
        this.address = address;
        return this;
    }

    /**
     * Address.
     * 
     * @return address
     **/
    @ApiModelProperty(value = "Address.")
    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public UserUpdateReq email(String email) {
        this.email = email;
        return this;
    }

    /**
     * The email address. Not allowed to update other user&#39;s email address.
     * 
     * @return email
     **/
    @ApiModelProperty(value = "The email address. Not allowed to update other user's email address.")
    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public UserUpdateReq fullName(String fullName) {
        this.fullName = fullName;
        return this;
    }

    /**
     * The full name of the user.
     * 
     * @return fullName
     **/
    @ApiModelProperty(value = "The full name of the user.")
    public String getFullName() {
        return fullName;
    }

    public void setFullName(String fullName) {
        this.fullName = fullName;
    }

    public UserUpdateReq groups(List<String> groups) {
        this.groups = groups;
        return this;
    }

    public UserUpdateReq addGroupsItem(String groupsItem) {
        if (this.groups == null) {
            this.groups = new ArrayList<String>();
        }
        this.groups.add(groupsItem);
        return this;
    }

    /**
     * A list of group IDs this user belongs to. Can be updated by the Account Admin only.
     * 
     * @return groups
     **/
    @ApiModelProperty(value = "A list of group IDs this user belongs to. Can be updated by the Account Admin only.")
    public List<String> getGroups() {
        return groups;
    }

    public void setGroups(List<String> groups) {
        this.groups = groups;
    }

    public UserUpdateReq isGtcAccepted(Boolean isGtcAccepted) {
        this.isGtcAccepted = isGtcAccepted;
        return this;
    }

    /**
     * A flag indicating that the user has accepted General Terms and Conditions.
     * 
     * @return isGtcAccepted
     **/
    @ApiModelProperty(value = "A flag indicating that the user has accepted General Terms and Conditions.")
    public Boolean isIsGtcAccepted() {
        return isGtcAccepted;
    }

    public void setIsGtcAccepted(Boolean isGtcAccepted) {
        this.isGtcAccepted = isGtcAccepted;
    }

    public UserUpdateReq isMarketingAccepted(Boolean isMarketingAccepted) {
        this.isMarketingAccepted = isMarketingAccepted;
        return this;
    }

    /**
     * A flag indicating that the user has consented to receive marketing information.
     * 
     * @return isMarketingAccepted
     **/
    @ApiModelProperty(value = "A flag indicating that the user has consented to receive marketing information.")
    public Boolean isIsMarketingAccepted() {
        return isMarketingAccepted;
    }

    public void setIsMarketingAccepted(Boolean isMarketingAccepted) {
        this.isMarketingAccepted = isMarketingAccepted;
    }

    public UserUpdateReq isTotpEnabled(Boolean isTotpEnabled) {
        this.isTotpEnabled = isTotpEnabled;
        return this;
    }

    /**
     * A flag indicating whether two-factor authentication (TOTP) is enabled. An account administrator can disable it,
     * but cannot enable it for other users.
     * 
     * @return isTotpEnabled
     **/
    @ApiModelProperty(value = "A flag indicating whether two-factor authentication (TOTP) is enabled. An account administrator can disable it, but cannot enable it for other users.")
    public Boolean isIsTotpEnabled() {
        return isTotpEnabled;
    }

    public void setIsTotpEnabled(Boolean isTotpEnabled) {
        this.isTotpEnabled = isTotpEnabled;
    }

    public UserUpdateReq loginProfiles(List<LoginProfile> loginProfiles) {
        this.loginProfiles = loginProfiles;
        return this;
    }

    public UserUpdateReq addLoginProfilesItem(LoginProfile loginProfilesItem) {
        if (this.loginProfiles == null) {
            this.loginProfiles = new ArrayList<LoginProfile>();
        }
        this.loginProfiles.add(loginProfilesItem);
        return this;
    }

    /**
     * &#39;A list of login profiles for the user, specified as identity providers associated with the user. Only the ID
     * attribute of the login profile should be set in the request object. The list cannot be empty. Only an account
     * admin may update login profiles.&#39;
     * 
     * @return loginProfiles
     **/
    @ApiModelProperty(value = "'A list of login profiles for the user, specified as identity providers associated with the user. Only the ID attribute of the login profile should be set in the request object. The list cannot be empty. Only an account admin may update login profiles.'")
    public List<LoginProfile> getLoginProfiles() {
        return loginProfiles;
    }

    public void setLoginProfiles(List<LoginProfile> loginProfiles) {
        this.loginProfiles = loginProfiles;
    }

    public UserUpdateReq phoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Phone number.
     * 
     * @return phoneNumber
     **/
    @ApiModelProperty(value = "Phone number.")
    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public UserUpdateReq status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * The status of the user. ENROLLING indicates that the user is in the middle of the enrollment process. INVITED
     * means that the user has not accepted the invitation request. RESET means that the password must be changed
     * immediately. INACTIVE users are locked out and not permitted to use the system. Can be changed by the Aggregator
     * Admin only.
     * 
     * @return status
     **/
    @ApiModelProperty(example = "ACTIVE",
                      value = "The status of the user. ENROLLING indicates that the user is in the middle of the enrollment process. INVITED means that the user has not accepted the invitation request. RESET means that the password must be changed immediately. INACTIVE users are locked out and not permitted to use the system. Can be changed by the Aggregator Admin only.")
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public UserUpdateReq username(String username) {
        this.username = username;
        return this;
    }

    /**
     * A username.
     * 
     * @return username
     **/
    @ApiModelProperty(value = "A username.")
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserUpdateReq userUpdateReq = (UserUpdateReq) o;
        return Objects.equals(this.address, userUpdateReq.address) && Objects.equals(this.email, userUpdateReq.email)
               && Objects.equals(this.fullName, userUpdateReq.fullName)
               && Objects.equals(this.groups, userUpdateReq.groups)
               && Objects.equals(this.isGtcAccepted, userUpdateReq.isGtcAccepted)
               && Objects.equals(this.isMarketingAccepted, userUpdateReq.isMarketingAccepted)
               && Objects.equals(this.isTotpEnabled, userUpdateReq.isTotpEnabled)
               && Objects.equals(this.loginProfiles, userUpdateReq.loginProfiles)
               && Objects.equals(this.phoneNumber, userUpdateReq.phoneNumber)
               && Objects.equals(this.status, userUpdateReq.status)
               && Objects.equals(this.username, userUpdateReq.username);
    }

    @Override
    public int hashCode() {
        return Objects.hash(address, email, fullName, groups, isGtcAccepted, isMarketingAccepted, isTotpEnabled,
                            loginProfiles, phoneNumber, status, username);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UserUpdateReq {\n");

        sb.append("    address: ").append(toIndentedString(address)).append("\n");
        sb.append("    email: ").append(toIndentedString(email)).append("\n");
        sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
        sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
        sb.append("    isGtcAccepted: ").append(toIndentedString(isGtcAccepted)).append("\n");
        sb.append("    isMarketingAccepted: ").append(toIndentedString(isMarketingAccepted)).append("\n");
        sb.append("    isTotpEnabled: ").append(toIndentedString(isTotpEnabled)).append("\n");
        sb.append("    loginProfiles: ").append(toIndentedString(loginProfiles)).append("\n");
        sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    username: ").append(toIndentedString(username)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
