/*
 * Pelion Device Management API
 * Pelion Device Management API build from the publicly defined API definitions.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * BrandingColorUpdate
 */

public class BrandingColorUpdate implements Serializable {
    private static final long serialVersionUID = 1L;

    @SerializedName("color")
    private String color = null;

    /**
     * Color name.
     */
    @JsonAdapter(ReferenceEnum.Adapter.class)
    public enum ReferenceEnum {
        ERROR_COLOR("error_color"),

        PRIMARY("primary"),

        SECONDARY("secondary"),

        SUCCESS_COLOR("success_color"),

        WARNING_COLOR("warning_color"),

        CANVAS_BACKGROUND("canvas_background"),

        CANVAS_BACKGROUND_FONT_COLOR("canvas_background_font_color"),

        WORKSPACE_BACKGROUND("workspace_background"),

        WORKSPACE_BACKGROUND_FONT_COLOR("workspace_background_font_color"),

        INFO_COLOR("info_color"),

        INFO_FONT_COLOR("info_font_color"),

        PRIMARY_FONT_COLOR("primary_font_color"),

        SECONDARY_FONT_COLOR("secondary_font_color"),

        ERROR_FONT_COLOR("error_font_color"),

        SUCCESS_FONT_COLOR("success_font_color"),

        WARNING_FONT_COLOR("warning_font_color"),

        MENU_BACKGROUND_COLOR("menu_background_color"),

        MENU_TEXT_COLOR("menu_text_color"),

        NAV_MENU_BACKGROUND("nav_menu_background"),

        NAV_MENU_BACKGROUND_FONT_COLOR("nav_menu_background_font_color"),

        NAV_MENU_ACTIVE_BACKGROUND("nav_menu_active_background"),

        NAV_MENU_ACTIVE_BACKGROUND_FONT_COLOR("nav_menu_active_background_font_color"),

        NAV_MENU_HIGHLIGHT("nav_menu_highlight"),

        NAV_MENU_HIGHLIGHT_FONT_COLOR("nav_menu_highlight_font_color");

        private String value;

        ReferenceEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ReferenceEnum fromValue(String text) {
            for (ReferenceEnum b : ReferenceEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ReferenceEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ReferenceEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ReferenceEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ReferenceEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("reference")
    private ReferenceEnum reference = null;

    public BrandingColorUpdate color(String color) {
        this.color = color;
        return this;
    }

    /**
     * The color given as name (purple) or as a hex code.
     * 
     * @return color
     **/
    @ApiModelProperty(example = "#f3f93e", value = "The color given as name (purple) or as a hex code.")
    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public BrandingColorUpdate reference(ReferenceEnum reference) {
        this.reference = reference;
        return this;
    }

    /**
     * Color name.
     * 
     * @return reference
     **/
    @ApiModelProperty(required = true, value = "Color name.")
    public ReferenceEnum getReference() {
        return reference;
    }

    public void setReference(ReferenceEnum reference) {
        this.reference = reference;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BrandingColorUpdate brandingColorUpdate = (BrandingColorUpdate) o;
        return Objects.equals(this.color, brandingColorUpdate.color)
               && Objects.equals(this.reference, brandingColorUpdate.reference);
    }

    @Override
    public int hashCode() {
        return Objects.hash(color, reference);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BrandingColorUpdate {\n");

        sb.append("    color: ").append(toIndentedString(color)).append("\n");
        sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
