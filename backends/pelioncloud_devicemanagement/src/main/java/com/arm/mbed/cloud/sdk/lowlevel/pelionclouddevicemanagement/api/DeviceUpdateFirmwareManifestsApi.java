package com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.api;

import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.CollectionFormats.*;

import retrofit2.Call;
import retrofit2.http.*;

import okhttp3.MultipartBody;

import org.joda.time.DateTime;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareManifest;
import com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model.FirmwareManifestPage;

public interface DeviceUpdateFirmwareManifestsApi {
    /**
     * Upload a manifest Upload a firmware manifest. The API enforces a maximum manifest size of 2KB. &lt;br&gt; **Usage
     * example:** &#x60;&#x60;&#x60; curl -X POST https://api.us-east-1.mbedcloud.com/v3/firmware-manifests \\ -H
     * &#39;Authorization: Bearer &lt;api_key&gt;&#39; \\ -H &#39;Content-Type: multipart/form-data&#39; \\ -F
     * &#39;datafile&#x3D;@myimage.bin;type&#x3D;application/octet-stream&#39; \\ -F &#39;description&#x3D;bla bla&#39;
     * \\ -F &#39;key_table&#x3D;@myKeyTable.proto;type&#x3D;&#39; \\ -F &#39;name&#x3D;My Manifest&#39;
     * &#x60;&#x60;&#x60;
     * 
     * @param datafile
     *            The manifest file to create. The API gateway enforces the account-specific file size. File name must
     *            not exceed 100 characters. (required)
     * @param name
     *            The name of the firmware manifest. (required)
     * @param description
     *            The description of the firmware manifest. (optional)
     * @param keyTable
     *            The key table of pre-shared keys for devices. The table is generated by the manifest tool. File name
     *            must not exceed 100 characters. (optional)
     * @return Call&lt;FirmwareManifest&gt;
     */
    @retrofit2.http.Multipart
    @POST("v3/firmware-manifests/")
    Call<FirmwareManifest> firmwareManifestCreate(@retrofit2.http.Part() MultipartBody.Part datafile,
                                                  @retrofit2.http.Part("name") String name,
                                                  @retrofit2.http.Part("description") String description,
                                                  @retrofit2.http.Part() MultipartBody.Part keyTable);

    /**
     * Delete a manifest Delete a firmware manifest. &lt;br&gt; **Usage example:** &#x60;&#x60;&#x60; curl -X DELETE
     * https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/11234567f9012ab56780120000789012 \\ -H
     * &#39;Authorization: Bearer &lt;api_key&gt;&#39; &#x60;&#x60;&#x60;
     * 
     * @param manifestId
     *            The firmware manifest ID. (required)
     * @return Call&lt;Void&gt;
     */
    @DELETE("v3/firmware-manifests/{manifest_id}")
    Call<Void> firmwareManifestDestroy(@retrofit2.http.Path(value = "manifest_id", encoded = true) String manifestId);

    /**
     * List all firmware manifests. List all firmware manifests. &lt;br&gt; **Usage example:** &#x60;&#x60;&#x60; curl
     * -X GET https://api.us-east-1.mbedcloud.com/v3/firmware-manifests \\ -H &#39;Authorization: Bearer
     * &lt;api_key&gt;&#39; &#x60;&#x60;&#x60;
     * 
     * @param limit
     *            How many objects to retrieve in the page. The minimum limit is 2 and the maximum is 1000. Limit values
     *            outside of this range are set to the closest limit. (optional)
     * @param order
     *            ASC or DESC. (optional)
     * @param after
     *            The ID of the item after which to retrieve the next page. (optional)
     * @param include
     *            A comma-separated list of data fields to return. Currently supported: total_count. (optional)
     * @param filter
     *            URL-encoded query string parameter to filter returned data &#x60;?filter&#x3D;{URL-encoded query
     *            string}&#x60; ###### Filterable fields: The table lists all the fields that can be filtered on with
     *            certain filters: &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Field&lt;/th&gt; &lt;th&gt;&#x3D; /
     *            __eq / __neq&lt;/th&gt; &lt;th&gt;__in / __nin&lt;/th&gt; &lt;th&gt;__lte / __gte&lt;/th&gt;
     *            &lt;tr&gt; &lt;thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;created_at&lt;/td&gt;
     *            &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;
     *            &lt;td&gt;datafile&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt;
     *            &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;datafile_size&lt;/td&gt;
     *            &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt;
     *            &lt;tr&gt; &lt;td&gt;description&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt;
     *            &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;device_class&lt;/td&gt;
     *            &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt;
     *            &lt;tr&gt; &lt;td&gt;etag&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt;
     *            &lt;td&gt;✓&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;id&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt;
     *            &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;
     *            &lt;td&gt;name&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt;
     *            &lt;td&gt;&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;timestamp&lt;/td&gt;
     *            &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;
     *            &lt;td&gt;updated_at&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt; &lt;td&gt;✓&lt;/td&gt;
     *            &lt;td&gt;✓&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &amp;nbsp; The query string is made
     *            up of key-value pairs separated by ampersands. For example, this query:
     *            &#x60;key1__eq&#x3D;value1&amp;key2__eq&#x3D;value2&amp;key3__eq&#x3D;value3&#x60; would be
     *            URL-encoded as: &#x60;?filter&#x3D;key1__eq%3Dvalue1%26key2__eq%3Dvalue2%26key3__eq%3Dvalue3&#x60;
     *            **Filtering by properties** &#x60;name__eq&#x3D;mymanifest&#x60; **Filtering on date-time fields**
     *            Date-time fields should be specified in UTC RFC3339 format, &#x60;YYYY-MM-DDThh:mm:ss.msZ&#x60;. There
     *            are three permitted variations: * UTC RFC3339 with milliseconds. Example:
     *            &#x60;2016-11-30T16:25:12.1234Z&#x60; * UTC RFC3339 without milliseconds. Example:
     *            &#x60;2016-11-30T16:25:12Z&#x60; * UTC RFC3339 shortened without milliseconds and punctuation.
     *            Example: &#x60;20161130T162512Z&#x60; Date-time filtering supports three operators: * equality by
     *            appending &#x60;__eq&#x60; to the field name * greater than or equal to by appending &#x60;__gte&#x60;
     *            to the field name * less than or equal to by appending &#x60;__lte&#x60; to the field name
     *            &#x60;{field name}[|__eq|__lte|__gte]&#x3D;{UTC RFC3339 date-time}&#x60; Time ranges may be specified
     *            by including both the &#x60;__gte&#x60; and &#x60;__lte&#x60; forms in the filter. For example:
     *            &#x60;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;
     *            **Filtering on multiple fields**
     *            &#x60;name__eq&#x3D;mymanifest&amp;created_at__gte&#x3D;2016-11-30T16:25:12.1234Z&amp;created_at__lte&#x3D;2016-12-30T00:00:00Z&#x60;
     *            **Filtering with filter operators** String field filtering supports the following operators: *
     *            equality: &#x60;__eq&#x60; * non-equality: &#x60;__neq&#x60; * in : &#x60;__in&#x60; * not in:
     *            &#x60;__nin&#x60; For &#x60;__in&#x60; and &#x60;__nin&#x60; filters list of parameters must be
     *            comma-separated: &#x60;name__in&#x3D;fw-manifest1,fw-manifest2&#x60; (optional)
     * @param createdAtIn
     *            in filter for the \&quot;created_at\&quot; field (optional)
     * @param createdAtNin
     *            nin filter for the \&quot;created_at\&quot; field (optional)
     * @param createdAtLte
     *            lte filter for the \&quot;created_at\&quot; field (optional)
     * @param createdAtGte
     *            gte filter for the \&quot;created_at\&quot; field (optional)
     * @param datafileEq
     *            eq filter for the \&quot;datafile\&quot; field (optional)
     * @param datafileNeq
     *            neq filter for the \&quot;datafile\&quot; field (optional)
     * @param datafileIn
     *            in filter for the \&quot;datafile\&quot; field (optional)
     * @param datafileNin
     *            nin filter for the \&quot;datafile\&quot; field (optional)
     * @param datafileSizeEq
     *            eq filter for the \&quot;datafile_size\&quot; field (optional)
     * @param datafileSizeNeq
     *            neq filter for the \&quot;datafile_size\&quot; field (optional)
     * @param datafileSizeIn
     *            in filter for the \&quot;datafile_size\&quot; field (optional)
     * @param datafileSizeNin
     *            nin filter for the \&quot;datafile_size\&quot; field (optional)
     * @param descriptionEq
     *            eq filter for the \&quot;description\&quot; field (optional)
     * @param descriptionNeq
     *            neq filter for the \&quot;description\&quot; field (optional)
     * @param descriptionIn
     *            in filter for the \&quot;description\&quot; field (optional)
     * @param descriptionNin
     *            nin filter for the \&quot;description\&quot; field (optional)
     * @param deviceClassEq
     *            eq filter for the \&quot;device_class\&quot; field (optional)
     * @param deviceClassNeq
     *            neq filter for the \&quot;device_class\&quot; field (optional)
     * @param deviceClassIn
     *            in filter for the \&quot;device_class\&quot; field (optional)
     * @param deviceClassNin
     *            nin filter for the \&quot;device_class\&quot; field (optional)
     * @param idEq
     *            eq filter for the \&quot;id\&quot; field (optional)
     * @param idNeq
     *            neq filter for the \&quot;id\&quot; field (optional)
     * @param idIn
     *            in filter for the \&quot;id\&quot; field (optional)
     * @param idNin
     *            nin filter for the \&quot;id\&quot; field (optional)
     * @param nameEq
     *            eq filter for the \&quot;name\&quot; field (optional)
     * @param nameNeq
     *            neq filter for the \&quot;name\&quot; field (optional)
     * @param nameIn
     *            in filter for the \&quot;name\&quot; field (optional)
     * @param nameNin
     *            nin filter for the \&quot;name\&quot; field (optional)
     * @param timestampIn
     *            in filter for the \&quot;timestamp\&quot; field (optional)
     * @param timestampNin
     *            nin filter for the \&quot;timestamp\&quot; field (optional)
     * @param timestampLte
     *            lte filter for the \&quot;timestamp\&quot; field (optional)
     * @param timestampGte
     *            gte filter for the \&quot;timestamp\&quot; field (optional)
     * @param updatedAtIn
     *            in filter for the \&quot;updated_at\&quot; field (optional)
     * @param updatedAtNin
     *            nin filter for the \&quot;updated_at\&quot; field (optional)
     * @param updatedAtLte
     *            lte filter for the \&quot;updated_at\&quot; field (optional)
     * @param updatedAtGte
     *            gte filter for the \&quot;updated_at\&quot; field (optional)
     * @return Call&lt;FirmwareManifestPage&gt;
     */
    @GET("v3/firmware-manifests/")
    Call<FirmwareManifestPage>
        firmwareManifestList(@retrofit2.http.Query("limit") Integer limit, @retrofit2.http.Query("order") String order,
                             @retrofit2.http.Query("after") String after,
                             @retrofit2.http.Query("include") String include,
                             @retrofit2.http.Query("filter") String filter,
                             @retrofit2.http.Query("created_at__in") String createdAtIn,
                             @retrofit2.http.Query("created_at__nin") String createdAtNin,
                             @retrofit2.http.Query("created_at__lte") DateTime createdAtLte,
                             @retrofit2.http.Query("created_at__gte") DateTime createdAtGte,
                             @retrofit2.http.Query("datafile__eq") String datafileEq,
                             @retrofit2.http.Query("datafile__neq") String datafileNeq,
                             @retrofit2.http.Query("datafile__in") String datafileIn,
                             @retrofit2.http.Query("datafile__nin") String datafileNin,
                             @retrofit2.http.Query("datafile_size__eq") Long datafileSizeEq,
                             @retrofit2.http.Query("datafile_size__neq") Long datafileSizeNeq,
                             @retrofit2.http.Query("datafile_size__in") String datafileSizeIn,
                             @retrofit2.http.Query("datafile_size__nin") String datafileSizeNin,
                             @retrofit2.http.Query("description__eq") String descriptionEq,
                             @retrofit2.http.Query("description__neq") String descriptionNeq,
                             @retrofit2.http.Query("description__in") String descriptionIn,
                             @retrofit2.http.Query("description__nin") String descriptionNin,
                             @retrofit2.http.Query("device_class__eq") String deviceClassEq,
                             @retrofit2.http.Query("device_class__neq") String deviceClassNeq,
                             @retrofit2.http.Query("device_class__in") String deviceClassIn,
                             @retrofit2.http.Query("device_class__nin") String deviceClassNin,
                             @retrofit2.http.Query("id__eq") String idEq, @retrofit2.http.Query("id__neq") String idNeq,
                             @retrofit2.http.Query("id__in") String idIn, @retrofit2.http.Query("id__nin") String idNin,
                             @retrofit2.http.Query("name__eq") String nameEq,
                             @retrofit2.http.Query("name__neq") String nameNeq,
                             @retrofit2.http.Query("name__in") String nameIn,
                             @retrofit2.http.Query("name__nin") String nameNin,
                             @retrofit2.http.Query("timestamp__in") String timestampIn,
                             @retrofit2.http.Query("timestamp__nin") String timestampNin,
                             @retrofit2.http.Query("timestamp__lte") DateTime timestampLte,
                             @retrofit2.http.Query("timestamp__gte") DateTime timestampGte,
                             @retrofit2.http.Query("updated_at__in") String updatedAtIn,
                             @retrofit2.http.Query("updated_at__nin") String updatedAtNin,
                             @retrofit2.http.Query("updated_at__lte") DateTime updatedAtLte,
                             @retrofit2.http.Query("updated_at__gte") DateTime updatedAtGte);

    /**
     * Get a manifest Retrieve a firmware manifest. &lt;br&gt; **Usage example:** &#x60;&#x60;&#x60; curl -X GET
     * https://api.us-east-1.mbedcloud.com/v3/firmware-manifests/1123467f9012ab567890120000789012 \\ -H
     * &#39;Authorization: Bearer &lt;api_key&gt;&#39; &#x60;&#x60;&#x60;
     * 
     * @param manifestId
     *            The firmware manifest ID. (required)
     * @return Call&lt;FirmwareManifest&gt;
     */
    @GET("v3/firmware-manifests/{manifest_id}")
    Call<FirmwareManifest>
        firmwareManifestRetrieve(@retrofit2.http.Path(value = "manifest_id", encoded = true) String manifestId);

}
