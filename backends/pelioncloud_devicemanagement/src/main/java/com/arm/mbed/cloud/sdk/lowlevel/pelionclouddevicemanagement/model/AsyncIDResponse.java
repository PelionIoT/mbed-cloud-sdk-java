/*
 * Pelion Device Management API
 * Pelion Device Management API build from the publicly defined API definitions.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.io.Serializable;

/**
 * AsyncIDResponse
 */

public class AsyncIDResponse implements Serializable {
    private static final long serialVersionUID = 1L;

    @SerializedName("ct")
    private String ct = null;

    @SerializedName("error")
    private String error = null;

    @SerializedName("id")
    private String id = null;

    @SerializedName("max-age")
    private String maxAge = null;

    @SerializedName("payload")
    private String payload = null;

    @SerializedName("status")
    private Integer status = null;

    public AsyncIDResponse ct(String ct) {
        this.ct = ct;
        return this;
    }

    /**
     * The content type.
     * 
     * @return ct
     **/
    @ApiModelProperty(example = "text/plain", value = "The content type.")
    public String getCt() {
        return ct;
    }

    public void setCt(String ct) {
        this.ct = ct;
    }

    public AsyncIDResponse error(String error) {
        this.error = error;
        return this;
    }

    /**
     * An optional error message describing the error. Please refer to status listing above.
     * 
     * @return error
     **/
    @ApiModelProperty(example = "TIMEOUT",
                      value = "An optional error message describing the error. Please refer to status listing above. ")
    public String getError() {
        return error;
    }

    public void setError(String error) {
        this.error = error;
    }

    public AsyncIDResponse id(String id) {
        this.id = id;
        return this;
    }

    /**
     * The unique ID of the asynchronous response.
     * 
     * @return id
     **/
    @ApiModelProperty(example = "9e3c96b8-c4d7-496a-ab90-cc732b9b560e",
                      value = "The unique ID of the asynchronous response.")
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public AsyncIDResponse maxAge(String maxAge) {
        this.maxAge = maxAge;
        return this;
    }

    /**
     * Determines how long this value stays valid in the cache, in seconds. 0 means that the value is not stored in the
     * cache.
     * 
     * @return maxAge
     **/
    @ApiModelProperty(example = "60",
                      value = "Determines how long this value stays valid in the cache, in seconds. 0 means that the value is not stored in the cache.")
    public String getMaxAge() {
        return maxAge;
    }

    public void setMaxAge(String maxAge) {
        this.maxAge = maxAge;
    }

    public AsyncIDResponse payload(String payload) {
        this.payload = payload;
        return this;
    }

    /**
     * Requested data, base64 encoded.
     * 
     * @return payload
     **/
    @ApiModelProperty(example = "My4zMQ==", value = "Requested data, base64 encoded.")
    public String getPayload() {
        return payload;
    }

    public void setPayload(String payload) {
        this.payload = payload;
    }

    public AsyncIDResponse status(Integer status) {
        this.status = status;
        return this;
    }

    /**
     * States whether sending a command to the device succeeded or failed. &lt;table&gt; &lt;thead&gt; &lt;tr&gt;
     * &lt;th&gt;Code&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;
     * &lt;td&gt;&lt;b&gt;200&lt;/b&gt;&lt;/td&gt; &lt;td&gt;Operation succeeded. The payload contains result of the
     * operation from the device.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;400&lt;/b&gt;&lt;/td&gt;
     * &lt;td&gt;The device rejected the request, possibly because it does not support the request method. See how the
     * supported methods are [configured for the device
     * resources](https://developer.pelion.com/docs/device-management/current/resources/index.html).&lt;/td&gt;
     * &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;404&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The device replied that it does not
     * have the requested resource.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;412&lt;/b&gt;&lt;/td&gt;
     * &lt;td&gt;Precondition failed and the operation was not executed. The device responded with 4.12 CoAP response
     * code. The device may reject a subscription request with this response code.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;
     * &lt;td&gt;&lt;b&gt;413&lt;/b&gt;&lt;/td&gt; &lt;td&gt;Request entity is too large and could not be delivered to
     * the device.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;415&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The device
     * does not support the media type in the request.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;
     * &lt;td&gt;&lt;b&gt;429&lt;/b&gt;&lt;/td&gt; &lt;td&gt;An expired request was removed from queue
     * (REQUEST_EXPIRED), the device requested deregistration (DEVICE_REMOVED_REGISTRATION), or the device was suspended
     * (DEVICE_BLOCKED). The request was never delivered to the device.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;
     * &lt;td&gt;&lt;b&gt;502&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The request to the device failed and the retry count was
     * exceeded. The last retry failed to establish TCP or TLS connection to the device.&lt;/td&gt; &lt;/tr&gt;
     * &lt;tr&gt; &lt;td&gt;&lt;b&gt;503&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The request to the device failed and the retry
     * count was exceeded. The last retry failed because the device is currently unavailable (NOT_CONNECTED).&lt;/td&gt;
     * &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;b&gt;504&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The request to the device failed and
     * the retry count was exceeded. The last retry failed because the device did not respond in time according to the
     * protocol-specific retransmission logic (TIMEOUT).&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;
     * 
     * @return status
     **/
    @ApiModelProperty(example = "200",
                      value = " States whether sending a command to the device succeeded or failed.  <table>   <thead>     <tr>       <th>Code</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><b>200</b></td>       <td>Operation succeeded. The payload contains result of the operation from the device.</td>     </tr>     <tr>       <td><b>400</b></td>       <td>The device rejected the request, possibly because it does not support the request method.       See how the supported methods are       [configured for the device resources](https://developer.pelion.com/docs/device-management/current/resources/index.html).</td>     </tr>     <tr>       <td><b>404</b></td>       <td>The device replied that it does not have the requested resource.</td>     </tr>     <tr>       <td><b>412</b></td>       <td>Precondition failed and the operation was not executed. The device responded with 4.12 CoAP       response code. The device may reject a subscription request with this response code.</td>     </tr>     <tr>       <td><b>413</b></td>       <td>Request entity is too large and could not be delivered to the device.</td>     </tr>     <tr>       <td><b>415</b></td>       <td>The device does not support the media type in the request.</td>     </tr>     <tr>       <td><b>429</b></td>       <td>An expired request was removed from queue (REQUEST_EXPIRED),       the device requested deregistration (DEVICE_REMOVED_REGISTRATION),       or the device was suspended (DEVICE_BLOCKED). The request was never delivered to the device.</td>     </tr>     <tr>       <td><b>502</b></td>       <td>The request to the device failed and the retry count was exceeded.       The last retry failed to establish TCP or TLS connection to the device.</td>     </tr>     <tr>       <td><b>503</b></td>       <td>The request to the device failed and the retry count was exceeded.       The last retry failed because the device is currently unavailable (NOT_CONNECTED).</td>     </tr>     <tr>       <td><b>504</b></td>       <td>The request to the device failed and the retry count was exceeded.       The last retry failed because the device did not respond in time according to the protocol-specific       retransmission logic (TIMEOUT).</td>     </tr>   </tbody> </table> ")
    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AsyncIDResponse asyncIDResponse = (AsyncIDResponse) o;
        return Objects.equals(this.ct, asyncIDResponse.ct) && Objects.equals(this.error, asyncIDResponse.error)
               && Objects.equals(this.id, asyncIDResponse.id) && Objects.equals(this.maxAge, asyncIDResponse.maxAge)
               && Objects.equals(this.payload, asyncIDResponse.payload)
               && Objects.equals(this.status, asyncIDResponse.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(ct, error, id, maxAge, payload, status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AsyncIDResponse {\n");

        sb.append("    ct: ").append(toIndentedString(ct)).append("\n");
        sb.append("    error: ").append(toIndentedString(error)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    maxAge: ").append(toIndentedString(maxAge)).append("\n");
        sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
