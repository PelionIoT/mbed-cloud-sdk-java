/*
 * Pelion Device Management API
 * Pelion Device Management API build from the publicly defined API definitions.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.joda.time.DateTime;
import java.io.Serializable;

/**
 * Represents an application in Device Management.
 */
@ApiModel(description = "Represents an application in Device Management.")

public class AccessKey implements Serializable {
    private static final long serialVersionUID = 1L;

    @SerializedName("account_id")
    private String accountId = null;

    @SerializedName("application_id")
    private String applicationId = null;

    @SerializedName("created_at")
    private DateTime createdAt = null;

    @SerializedName("description")
    private String description = null;

    @SerializedName("etag")
    private String etag = null;

    @SerializedName("expiration")
    private DateTime expiration = null;

    @SerializedName("id")
    private String id = null;

    @SerializedName("key")
    private String key = null;

    @SerializedName("last_used_at")
    private DateTime lastUsedAt = null;

    @SerializedName("name")
    private String name = null;

    /**
     * Entity name: always &#39;access-key&#39;
     */
    @JsonAdapter(ObjectEnum.Adapter.class)
    public enum ObjectEnum {
        KEY("access-key");

        private String value;

        ObjectEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ObjectEnum fromValue(String text) {
            for (ObjectEnum b : ObjectEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ObjectEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ObjectEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return ObjectEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("object")
    private ObjectEnum object = null;

    /**
     * The status of the access key. ACTIVE means that the access key is operational. INACTIVE means that the access key
     * is not operational and it prevents the clients to use the REST API. Inactivating the access key does not
     * invalidate existing configurations meaning that subscribed events will continue to flow on existing channels. The
     * EXPIRED status is not allowed to be set directly, it is derived from the expiration attribute.
     */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        ACTIVE("ACTIVE"),

        INACTIVE("INACTIVE"),

        EXPIRED("EXPIRED");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String text) {
            for (StatusEnum b : StatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return StatusEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("status")
    private StatusEnum status = null;

    @SerializedName("updated_at")
    private DateTime updatedAt = null;

    /**
     * The ID of the account.
     * 
     * @return accountId
     **/
    @ApiModelProperty(example = "01619571e2e90242ac12000600000000", value = "The ID of the account.")
    public String getAccountId() {
        return accountId;
    }

    /**
     * The ID of the application.
     * 
     * @return applicationId
     **/
    @ApiModelProperty(example = "01705c6383f6c85b76f92f4e00000000", value = "The ID of the application.")
    public String getApplicationId() {
        return applicationId;
    }

    /**
     * Creation UTC time RFC3339.
     * 
     * @return createdAt
     **/
    @ApiModelProperty(example = "2020-02-13T09:35:20Z", value = "Creation UTC time RFC3339.")
    public DateTime getCreatedAt() {
        return createdAt;
    }

    public AccessKey description(String description) {
        this.description = description;
        return this;
    }

    /**
     * The description of the access key.
     * 
     * @return description
     **/
    @ApiModelProperty(example = "Access key to control the warp drive", value = "The description of the access key.")
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * API resource entity version.
     * 
     * @return etag
     **/
    @ApiModelProperty(example = "1", value = "API resource entity version.")
    public String getEtag() {
        return etag;
    }

    public AccessKey expiration(DateTime expiration) {
        this.expiration = expiration;
        return this;
    }

    /**
     * Expiration time of the access key, as UTC time RFC3339. Expiration makes the access key inoperative and the
     * status will be EXPIRED. The client using the expired access key is no longer able to use the REST API. The access
     * key expiration does not invalidate existing configurations meaning that subscribed events will continue to flow
     * on existing channels.
     * 
     * @return expiration
     **/
    @ApiModelProperty(value = "Expiration time of the access key, as UTC time RFC3339. Expiration makes the access key inoperative and the status will be EXPIRED. The client using the expired access key is no longer able to use the REST API. The access key expiration does not invalidate existing configurations meaning that subscribed events will continue to flow on existing channels.")
    public DateTime getExpiration() {
        return expiration;
    }

    public void setExpiration(DateTime expiration) {
        this.expiration = expiration;
    }

    /**
     * The ID of the access key.
     * 
     * @return id
     **/
    @ApiModelProperty(example = "01619571f7020242ac12000600000000", value = "The ID of the access key.")
    public String getId() {
        return id;
    }

    /**
     * The access key. The full key including the secret part is visible in the response for create only
     * 
     * @return key
     **/
    @ApiModelProperty(example = "ak_2MDE2MTk1NzFmNmU4MDI0MmFjMTIwMDA2MDAwMDAwMDA01619571f7020242ac12000600000000",
                      value = "The access key. The full key including the secret part is visible in the response for create only")
    public String getKey() {
        return key;
    }

    /**
     * The time of the latest access key usage.
     * 
     * @return lastUsedAt
     **/
    @ApiModelProperty(example = "2020-02-14T15:24:14Z", value = "The time of the latest access key usage.")
    public DateTime getLastUsedAt() {
        return lastUsedAt;
    }

    public AccessKey name(String name) {
        this.name = name;
        return this;
    }

    /**
     * The display name for the access key.
     * 
     * @return name
     **/
    @ApiModelProperty(example = "Access key warp", required = true, value = "The display name for the access key.")
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /**
     * Entity name: always &#39;access-key&#39;
     * 
     * @return object
     **/
    @ApiModelProperty(value = "Entity name: always 'access-key'")
    public ObjectEnum getObject() {
        return object;
    }

    public AccessKey status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * The status of the access key. ACTIVE means that the access key is operational. INACTIVE means that the access key
     * is not operational and it prevents the clients to use the REST API. Inactivating the access key does not
     * invalidate existing configurations meaning that subscribed events will continue to flow on existing channels. The
     * EXPIRED status is not allowed to be set directly, it is derived from the expiration attribute.
     * 
     * @return status
     **/
    @ApiModelProperty(example = "ACTIVE",
                      value = "The status of the access key. ACTIVE means that the access key is operational. INACTIVE means that the access key is not operational and it prevents the clients to use the REST API. Inactivating the access key does not invalidate existing configurations meaning that subscribed events will continue to flow on existing channels. The EXPIRED status is not allowed to be set directly, it is derived from the expiration attribute.")
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    /**
     * Last update UTC time RFC3339.
     * 
     * @return updatedAt
     **/
    @ApiModelProperty(example = "2020-02-14T15:24:14Z", value = "Last update UTC time RFC3339.")
    public DateTime getUpdatedAt() {
        return updatedAt;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccessKey accessKey = (AccessKey) o;
        return Objects.equals(this.accountId, accessKey.accountId)
               && Objects.equals(this.applicationId, accessKey.applicationId)
               && Objects.equals(this.createdAt, accessKey.createdAt)
               && Objects.equals(this.description, accessKey.description) && Objects.equals(this.etag, accessKey.etag)
               && Objects.equals(this.expiration, accessKey.expiration) && Objects.equals(this.id, accessKey.id)
               && Objects.equals(this.key, accessKey.key) && Objects.equals(this.lastUsedAt, accessKey.lastUsedAt)
               && Objects.equals(this.name, accessKey.name) && Objects.equals(this.object, accessKey.object)
               && Objects.equals(this.status, accessKey.status) && Objects.equals(this.updatedAt, accessKey.updatedAt);
    }

    @Override
    public int hashCode() {
        return Objects.hash(accountId, applicationId, createdAt, description, etag, expiration, id, key, lastUsedAt,
                            name, object, status, updatedAt);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccessKey {\n");

        sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
        sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
        sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
        sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    key: ").append(toIndentedString(key)).append("\n");
        sb.append("    lastUsedAt: ").append(toIndentedString(lastUsedAt)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    object: ").append(toIndentedString(object)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
