/*
 * Pelion Device Management API
 * Pelion Device Management API build from the publicly defined API definitions.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.arm.mbed.cloud.sdk.lowlevel.pelionclouddevicemanagement.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.io.Serializable;

/**
 * Serialization configuration for a channel.
 */
@ApiModel(description = "Serialization configuration for a channel.")

public class SerializationConfigData implements Serializable {
    private static final long serialVersionUID = 1L;

    @SerializedName("cfg")
    private SerializationConfigObjectV2 cfg = null;

    @SerializedName("max_chunk_size")
    private Integer maxChunkSize = null;

    /**
     * Serialization type: v2 - specified in NotificationMessage.
     */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        V2("v2");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TypeEnum fromValue(String text) {
            for (TypeEnum b : TypeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("type")
    private TypeEnum type = TypeEnum.V2;

    public SerializationConfigData cfg(SerializationConfigObjectV2 cfg) {
        this.cfg = cfg;
        return this;
    }

    /**
     * Get cfg
     * 
     * @return cfg
     **/
    @ApiModelProperty(value = "")
    public SerializationConfigObjectV2 getCfg() {
        return cfg;
    }

    public void setCfg(SerializationConfigObjectV2 cfg) {
        this.cfg = cfg;
    }

    public SerializationConfigData maxChunkSize(Integer maxChunkSize) {
        this.maxChunkSize = maxChunkSize;
        return this;
    }

    /**
     * Maximum number of messages in NotificationMessage container delivered in one request. Default is 10000. Using a
     * very low value for high troughput applications may cause lag in notification delivery, as a new chunk is sent
     * only after the previous one has been acknowledged. Using a high value is recommended and safe, as chunks are sent
     * quickly after notifications are received from devices. See [notification sending
     * logic](https://developer.pelion.com/docs/device-management/current/integrate-web-app/event-notification.html#notification-sending-logic)
     * for more details. minimum: 100 maximum: 10000
     * 
     * @return maxChunkSize
     **/
    @ApiModelProperty(example = "500",
                      value = "Maximum number of messages in NotificationMessage container delivered in one request. Default is 10000. Using a very low value for high troughput applications may cause lag in notification delivery, as a new chunk is sent only after the previous one has been acknowledged. Using a high value is recommended and safe, as chunks are sent quickly after notifications are received from devices. See [notification sending logic](https://developer.pelion.com/docs/device-management/current/integrate-web-app/event-notification.html#notification-sending-logic) for more details.")
    public Integer getMaxChunkSize() {
        return maxChunkSize;
    }

    public void setMaxChunkSize(Integer maxChunkSize) {
        this.maxChunkSize = maxChunkSize;
    }

    public SerializationConfigData type(TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Serialization type: v2 - specified in NotificationMessage.
     * 
     * @return type
     **/
    @ApiModelProperty(example = "v2", required = true,
                      value = "Serialization type: v2 - specified in NotificationMessage.")
    public TypeEnum getType() {
        return type;
    }

    public void setType(TypeEnum type) {
        this.type = type;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SerializationConfigData serializationConfigData = (SerializationConfigData) o;
        return Objects.equals(this.cfg, serializationConfigData.cfg)
               && Objects.equals(this.maxChunkSize, serializationConfigData.maxChunkSize)
               && Objects.equals(this.type, serializationConfigData.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cfg, maxChunkSize, type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SerializationConfigData {\n");

        sb.append("    cfg: ").append(toIndentedString(cfg)).append("\n");
        sb.append("    maxChunkSize: ").append(toIndentedString(maxChunkSize)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
