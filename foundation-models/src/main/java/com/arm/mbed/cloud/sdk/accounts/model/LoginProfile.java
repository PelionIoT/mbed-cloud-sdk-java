// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.SdkModel;
import java.util.Hashtable;
import java.util.Map;

/**
 * Model for a login profile.
 */
@Preamble(description = "Model for a login profile.")
public class LoginProfile implements SdkModel {
    /**
     * Mapping needed for encoding or decoding filters.
     * 
     * <p>
     * Filters are used when listing models. See {@link com.arm.mbed.cloud.sdk.common.listing.filtering.Filters}
     */
    @Internal
    public static final Map<String, String> FILTER_MAPPING = generateFilterMapping();

    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = -244427560121579L;

    /**
     * The ID of the user in the identity provider's service.
     */
    private final String foreignId;

    /**
     * ID of the identity provider.
     */
    private String id;

    /**
     * Identity provider type.
     */
    private final LoginProfileType loginProfileType;

    /**
     * Name of the identity provider.
     */
    private String name;

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on all fields.
     * <p>
     * Note: Should not be used. Use {@link #LoginProfile()} instead.
     * 
     * @param foreignId
     *            The ID of the user in the identity provider's service.
     * @param id
     *            ID of the identity provider.
     * @param loginProfileType
     *            Identity provider type.
     * @param name
     *            Name of the identity provider.
     */
    @Internal
    public LoginProfile(String foreignId, String id, LoginProfileType loginProfileType, String name) {
        super();
        this.foreignId = foreignId;
        this.loginProfileType = loginProfileType;
        setId(id);
        setName(name);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on a similar object.
     * <p>
     * Note: Should not be used. Use {@link #LoginProfile()} instead.
     * 
     * @param loginProfile
     *            a login profile.
     */
    @Internal
    public LoginProfile(LoginProfile loginProfile) {
        this(loginProfile == null ? (String) null : loginProfile.foreignId,
             loginProfile == null ? (String) null : loginProfile.id,
             loginProfile == null ? LoginProfileType.getDefault() : loginProfile.loginProfileType,
             loginProfile == null ? (String) null : loginProfile.name);
    }

    /**
     * Constructor.
     */
    public LoginProfile() {
        this((String) null, (String) null, LoginProfileType.getDefault(), (String) null);
    }

    /**
     * Constructor.
     * 
     * <p>
     * Constructor based on object identifier.
     * <p>
     * 
     * @param id
     *            ID of the identity provider.
     */
    public LoginProfile(String id) {
        this();
        setId(id);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on read-only fields.
     * <p>
     * Note: Should not be used. Use {@link #LoginProfile()} instead.
     * 
     * @param foreignId
     *            The ID of the user in the identity provider's service.
     * @param loginProfileType
     *            Identity provider type.
     */
    @Internal
    public LoginProfile(String foreignId, LoginProfileType loginProfileType) {
        this(foreignId, (String) null, loginProfileType, (String) null);
    }

    /**
     * Gets the id of the user in the identity provider's service.
     * 
     * @return foreignId
     */
    public String getForeignId() {
        return foreignId;
    }

    /**
     * Gets id of the identity provider.
     * 
     * @return id
     */
    @Override
    public String getId() {
        return id;
    }

    /**
     * Sets id of the identity provider.
     * 
     * @param id
     *            ID of the identity provider.
     */
    @Override
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Sets id of the identity provider.
     * 
     * <p>
     * Similar to {@link #setId(String)}
     * 
     * @param loginProfileId
     *            ID of the identity provider.
     */
    @Internal
    public void setLoginProfileId(String loginProfileId) {
        setId(loginProfileId);
    }

    /**
     * Gets identity provider type.
     * 
     * @return loginProfileType
     */
    public LoginProfileType getLoginProfileType() {
        return loginProfileType;
    }

    /**
     * Gets name of the identity provider.
     * 
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets name of the identity provider.
     * 
     * @param name
     *            Name of the identity provider.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Method generating the mapping needed for encoding or decoding filters.
     * 
     * <p>
     * Filters are used when listing models. See {@link com.arm.mbed.cloud.sdk.common.listing.filtering.Filters}
     * 
     * @return the mapping table
     */
    @Internal
    protected static final Map<String, String> generateFilterMapping() {
        final Map<String, String> filterMapping = new Hashtable<>(1);
        filterMapping.put("loginProfileType", "type");
        return filterMapping;
    }

    /**
     * Returns a string representation of the object.
     * 
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "LoginProfile [foreignId=" + foreignId + ", id=" + id + ", loginProfileType=" + loginProfileType
               + ", name=" + name + "]";
    }

    /**
     * Calculates the hash code of this instance based on field values.
     * 
     * <p>
     * 
     * @see java.lang.Object#hashCode()
     * @return hash code
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((foreignId == null) ? 0 : foreignId.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((loginProfileType == null) ? 0 : loginProfileType.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    /**
     * Method to ensure {@link #equals(Object)} is correct.
     * 
     * <p>
     * Note: see this article: <a href="https://www.artima.com/lejava/articles/equality.html">canEqual()</a>
     * 
     * @param other
     *            another object.
     * @return true if the other object is an instance of the class in which canEqual is (re)defined, false otherwise.
     */
    protected boolean canEqual(Object other) {
        return other instanceof LoginProfile;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * 
     * <p>
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @param obj
     *            an object to compare with this instance.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof LoginProfile)) {
            return false;
        }
        final LoginProfile other = (LoginProfile) obj;
        if (!other.canEqual(this)) {
            return false;
        }
        if (foreignId == null) {
            if (other.foreignId != null) {
                return false;
            }
        } else if (!foreignId.equals(other.foreignId)) {
            return false;
        }
        if (id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        if (loginProfileType != other.loginProfileType) {
            return false;
        }
        if (name == null) {
            if (other.name != null) {
                return false;
            }
        } else if (!name.equals(other.name)) {
            return false;
        }
        return true;
    }

    /**
     * Checks whether the model is valid or not.
     * 
     * <p>
     * 
     * @see SdkModel#isValid()
     * @return true if the model is valid; false otherwise.
     */
    @Override
    public boolean isValid() {
        return true;
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public LoginProfile clone() {
        return new LoginProfile(this);
    }
}
