// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.annotations.DefaultValue;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.SdkModel;
import java.util.Date;
import java.util.Objects;

/**
 * Model for an account limitation.
 */
@Preamble(description = "Model for an account limitation.")
@SuppressWarnings({ "PMD.CyclomaticComplexity", "PMD.AvoidDuplicateLiterals" })
public class AccountLimitation implements SdkModel {
    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = 1215620287133152L;

    /**
     * Billing period of the account limitation.
     */
    @DefaultValue("1")
    private final int billingPeriod;

    /**
     * Creation UTC time RFC3339.
     */
    private final Date createdAt;

    /**
     * Description of the account limitation.
     */
    private final String description;

    /**
     * Entity ID.
     */
    private String id;

    /**
     * Flag indicating whether this limitation is inherited.
     */
    private final boolean inherited;

    /**
     * Indicates where this limit is inherited from.
     */
    private final String inheritedFrom;

    /**
     * Indicates the type of the entity where the limitation is inherited from.
     */
    private final AccountLimitationInheritedType inheritedType;

    /**
     * Used as default value if parent entity has this limitation defined. If parent entity does not have such a
     * limitation, the value is null.
     */
    private final Object inheritedValue;

    /**
     * The value of the limit.
     */
    private final long limit;

    /**
     * Name of the account limitation.
     */
    private final String name;

    /**
     * Quota of the account limitation.
     */
    private final long quota;

    /**
     * Last update UTC time RFC3339.
     */
    private final Date updatedAt;

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on all fields.
     * <p>
     * Note: Should not be used. Use {@link #AccountLimitation()} instead.
     * 
     * @param billingPeriod
     *            Billing period of the account limitation.
     * @param createdAt
     *            Creation UTC time RFC3339.
     * @param description
     *            Description of the account limitation.
     * @param id
     *            Entity ID.
     * @param inherited
     *            Flag indicating whether this limitation is inherited.
     * @param inheritedFrom
     *            Indicates where this limit is inherited from.
     * @param inheritedType
     *            Indicates the type of the entity where the limitation is inherited from.
     * @param inheritedValue
     *            Used as default value if parent entity has this limitation defined. If parent entity does not have
     *            such a limitation, the value is null.
     * @param limit
     *            The value of the limit.
     * @param name
     *            Name of the account limitation.
     * @param quota
     *            Quota of the account limitation.
     * @param updatedAt
     *            Last update UTC time RFC3339.
     */
    @Internal
    @SuppressWarnings("PMD.CyclomaticComplexity")
    public AccountLimitation(@DefaultValue("1") int billingPeriod, Date createdAt, String description, String id,
                             boolean inherited, String inheritedFrom, AccountLimitationInheritedType inheritedType,
                             Object inheritedValue, long limit, String name, long quota, Date updatedAt) {
        super();
        this.billingPeriod = billingPeriod;
        this.createdAt = createdAt;
        this.description = description;
        this.inherited = inherited;
        this.inheritedFrom = inheritedFrom;
        this.inheritedType = inheritedType;
        this.inheritedValue = inheritedValue;
        this.limit = limit;
        this.name = name;
        this.quota = quota;
        this.updatedAt = updatedAt;
        setId(id);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on a similar object.
     * <p>
     * Note: Should not be used. Use {@link #AccountLimitation()} instead.
     * 
     * @param accountLimitation
     *            an account limitation.
     */
    @Internal
    public AccountLimitation(AccountLimitation accountLimitation) {
        this(accountLimitation == null ? 1 : accountLimitation.billingPeriod,
             accountLimitation == null ? new Date() : accountLimitation.createdAt,
             accountLimitation == null ? (String) null : accountLimitation.description,
             accountLimitation == null ? (String) null : accountLimitation.id,
             accountLimitation != null && accountLimitation.inherited,
             accountLimitation == null ? (String) null : accountLimitation.inheritedFrom,
             accountLimitation == null ? AccountLimitationInheritedType.getDefault() : accountLimitation.inheritedType,
             accountLimitation == null ? (Object) null : accountLimitation.inheritedValue,
             accountLimitation == null ? 0 : accountLimitation.limit,
             accountLimitation == null ? (String) null : accountLimitation.name,
             accountLimitation == null ? 0 : accountLimitation.quota,
             accountLimitation == null ? new Date() : accountLimitation.updatedAt);
    }

    /**
     * Constructor.
     */
    public AccountLimitation() {
        this(1, new Date(), (String) null, (String) null, false, (String) null,
             AccountLimitationInheritedType.getDefault(), (Object) null, 0, (String) null, 0, new Date());
    }

    /**
     * Constructor.
     * 
     * <p>
     * Constructor based on object identifier.
     * <p>
     * 
     * @param id
     *            Entity ID.
     */
    public AccountLimitation(String id) {
        this();
        setId(id);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on read-only fields.
     * <p>
     * Note: Should not be used. Use {@link #AccountLimitation()} instead.
     * 
     * @param billingPeriod
     *            Billing period of the account limitation.
     * @param createdAt
     *            Creation UTC time RFC3339.
     * @param description
     *            Description of the account limitation.
     * @param inherited
     *            Flag indicating whether this limitation is inherited.
     * @param inheritedFrom
     *            Indicates where this limit is inherited from.
     * @param inheritedType
     *            Indicates the type of the entity where the limitation is inherited from.
     * @param inheritedValue
     *            Used as default value if parent entity has this limitation defined. If parent entity does not have
     *            such a limitation, the value is null.
     * @param limit
     *            The value of the limit.
     * @param name
     *            Name of the account limitation.
     * @param quota
     *            Quota of the account limitation.
     * @param updatedAt
     *            Last update UTC time RFC3339.
     */
    @Internal
    @SuppressWarnings("PMD.CyclomaticComplexity")
    public AccountLimitation(@DefaultValue("1") int billingPeriod, Date createdAt, String description,
                             boolean inherited, String inheritedFrom, AccountLimitationInheritedType inheritedType,
                             Object inheritedValue, long limit, String name, long quota, Date updatedAt) {
        this(billingPeriod, createdAt, description, (String) null, inherited, inheritedFrom, inheritedType,
             inheritedValue, limit, name, quota, updatedAt);
    }

    /**
     * Gets billing period of the account limitation.
     * 
     * @return billingPeriod
     */
    public int getBillingPeriod() {
        return billingPeriod;
    }

    /**
     * Gets creation utc time rfc3339.
     * 
     * @return createdAt
     */
    public Date getCreatedAt() {
        return createdAt;
    }

    /**
     * Gets description of the account limitation.
     * 
     * @return description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Gets entity id.
     * 
     * @return id
     */
    @Override
    public String getId() {
        return id;
    }

    /**
     * Sets entity id.
     * 
     * @param id
     *            Entity ID.
     */
    @Override
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Sets entity id.
     * 
     * <p>
     * Similar to {@link #setId(String)}
     * 
     * @param accountLimitationId
     *            Entity ID.
     */
    @Internal
    public void setAccountLimitationId(String accountLimitationId) {
        setId(accountLimitationId);
    }

    /**
     * Gets flag indicating whether this limitation is inherited.
     * 
     * @return inherited
     */
    public boolean isInherited() {
        return inherited;
    }

    /**
     * Gets indicates where this limit is inherited from.
     * 
     * @return inheritedFrom
     */
    public String getInheritedFrom() {
        return inheritedFrom;
    }

    /**
     * Gets indicates the type of the entity where the limitation is inherited from.
     * 
     * @return inheritedType
     */
    public AccountLimitationInheritedType getInheritedType() {
        return inheritedType;
    }

    /**
     * Gets used as default value if parent entity has this limitation defined. if parent entity does not have such a
     * limitation, the value is null.
     * 
     * @return inheritedValue
     */
    public Object getInheritedValue() {
        return inheritedValue;
    }

    /**
     * Gets the value of the limit.
     * 
     * @return limit
     */
    public long getLimit() {
        return limit;
    }

    /**
     * Gets name of the account limitation.
     * 
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * Gets quota of the account limitation.
     * 
     * @return quota
     */
    public long getQuota() {
        return quota;
    }

    /**
     * Gets last update utc time rfc3339.
     * 
     * @return updatedAt
     */
    public Date getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Returns a string representation of the object.
     * 
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "AccountLimitation [billingPeriod=" + billingPeriod + ", createdAt=" + createdAt + ", description="
               + description + ", id=" + id + ", inherited=" + inherited + ", inheritedFrom=" + inheritedFrom
               + ", inheritedType=" + inheritedType + ", inheritedValue=" + inheritedValue + ", limit=" + limit
               + ", name=" + name + ", quota=" + quota + ", updatedAt=" + updatedAt + "]";
    }

    /**
     * Calculates the hash code of this instance based on field values.
     * 
     * <p>
     * 
     * @see java.lang.Object#hashCode()
     * @return hash code
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Objects.hashCode(Integer.valueOf(billingPeriod));
        result = prime * result + ((createdAt == null) ? 0 : createdAt.hashCode());
        result = prime * result + ((description == null) ? 0 : description.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + Objects.hashCode(Boolean.valueOf(inherited));
        result = prime * result + ((inheritedFrom == null) ? 0 : inheritedFrom.hashCode());
        result = prime * result + ((inheritedType == null) ? 0 : inheritedType.hashCode());
        result = prime * result + ((inheritedValue == null) ? 0 : inheritedValue.hashCode());
        result = prime * result + Objects.hashCode(Long.valueOf(limit));
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + Objects.hashCode(Long.valueOf(quota));
        result = prime * result + ((updatedAt == null) ? 0 : updatedAt.hashCode());
        return result;
    }

    /**
     * Method to ensure {@link #equals(Object)} is correct.
     * 
     * <p>
     * Note: see this article: <a href="https://www.artima.com/lejava/articles/equality.html">canEqual()</a>
     * 
     * @param other
     *            another object.
     * @return true if the other object is an instance of the class in which canEqual is (re)defined, false otherwise.
     */
    protected boolean canEqual(Object other) {
        return other instanceof AccountLimitation;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * 
     * <p>
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @param obj
     *            an object to compare with this instance.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof AccountLimitation)) {
            return false;
        }
        final AccountLimitation other = (AccountLimitation) obj;
        if (!other.canEqual(this)) {
            return false;
        }
        if (billingPeriod != other.billingPeriod) {
            return false;
        }
        if (createdAt == null) {
            if (other.createdAt != null) {
                return false;
            }
        } else if (!createdAt.equals(other.createdAt)) {
            return false;
        }
        if (description == null) {
            if (other.description != null) {
                return false;
            }
        } else if (!description.equals(other.description)) {
            return false;
        }
        if (id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        if (inherited != other.inherited) {
            return false;
        }
        if (inheritedFrom == null) {
            if (other.inheritedFrom != null) {
                return false;
            }
        } else if (!inheritedFrom.equals(other.inheritedFrom)) {
            return false;
        }
        if (inheritedType != other.inheritedType) {
            return false;
        }
        if (inheritedValue == null) {
            if (other.inheritedValue != null) {
                return false;
            }
        } else if (!inheritedValue.equals(other.inheritedValue)) {
            return false;
        }
        if (limit != other.limit) {
            return false;
        }
        if (name == null) {
            if (other.name != null) {
                return false;
            }
        } else if (!name.equals(other.name)) {
            return false;
        }
        if (quota != other.quota) {
            return false;
        }
        if (updatedAt == null) {
            if (other.updatedAt != null) {
                return false;
            }
        } else if (!updatedAt.equals(other.updatedAt)) {
            return false;
        }
        return true;
    }

    /**
     * Checks whether the model is valid or not.
     * 
     * <p>
     * 
     * @see SdkModel#isValid()
     * @return true if the model is valid; false otherwise.
     */
    @Override
    public boolean isValid() {
        return true;
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public AccountLimitation clone() {
        return new AccountLimitation(this);
    }
}
