// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.annotations.Required;
import com.arm.mbed.cloud.sdk.common.SdkModel;
import java.util.Date;
import java.util.Objects;

/**
 * Model for a subtenant identity provider.
 */
@Preamble(description = "Model for a subtenant identity provider.")
@SuppressWarnings({ "PMD.CyclomaticComplexity", "PMD.AvoidDuplicateLiterals" })
public class SubtenantIdentityProvider implements SdkModel {
    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = 5800203319212205L;

    /**
     * The ID of the account the identity provider belongs to.
     */
    @Required
    private String accountId;

    /**
     * Creation UTC time RFC3339.
     */
    private final Date createdAt;

    /**
     * Description for the identity provider.
     */
    private String description;

    /**
     * Entity ID.
     */
    private String id;

    /**
     * Flag indicating whether this is the global default identity provider.
     */
    private final boolean isDefault;

    /**
     * Name of the identity provider.
     */
    @Required
    private String name;

    /**
     * Represents OIDC specific attributes.
     */
    private OidcRequest oidcAttributes;

    /**
     * Represents SAML2 specific attributes in responses.
     */
    private Object saml2Attributes;

    /**
     * Status of the identity provider.
     */
    private SubtenantIdentityProviderStatus status;

    /**
     * Last update UTC time RFC3339.
     */
    private final Date updatedAt;

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on all fields.
     * <p>
     * Note: Should not be used. Use {@link #SubtenantIdentityProvider()} instead.
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param createdAt
     *            Creation UTC time RFC3339.
     * @param description
     *            Description for the identity provider.
     * @param id
     *            Entity ID.
     * @param isDefault
     *            Flag indicating whether this is the global default identity provider.
     * @param name
     *            Name of the identity provider.
     * @param oidcAttributes
     *            Represents OIDC specific attributes.
     * @param saml2Attributes
     *            Represents SAML2 specific attributes in responses.
     * @param status
     *            Status of the identity provider.
     * @param updatedAt
     *            Last update UTC time RFC3339.
     */
    @Internal
    @SuppressWarnings("PMD.CyclomaticComplexity")
    public SubtenantIdentityProvider(String accountId, Date createdAt, String description, String id, boolean isDefault,
                                     String name, OidcRequest oidcAttributes, Object saml2Attributes,
                                     SubtenantIdentityProviderStatus status, Date updatedAt) {
        super();
        this.createdAt = createdAt;
        this.isDefault = isDefault;
        this.updatedAt = updatedAt;
        setAccountId(accountId);
        setDescription(description);
        setId(id);
        setName(name);
        setOidcAttributes(oidcAttributes);
        setSaml2Attributes(saml2Attributes);
        setStatus(status);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on a similar object.
     * <p>
     * Note: Should not be used. Use {@link #SubtenantIdentityProvider()} instead.
     * 
     * @param subtenantIdentityProvider
     *            a subtenant identity provider.
     */
    @Internal
    public SubtenantIdentityProvider(SubtenantIdentityProvider subtenantIdentityProvider) {
        this(subtenantIdentityProvider == null ? (String) null : subtenantIdentityProvider.accountId,
             subtenantIdentityProvider == null ? new Date() : subtenantIdentityProvider.createdAt,
             subtenantIdentityProvider == null ? (String) null : subtenantIdentityProvider.description,
             subtenantIdentityProvider == null ? (String) null : subtenantIdentityProvider.id,
             subtenantIdentityProvider != null && subtenantIdentityProvider.isDefault,
             subtenantIdentityProvider == null ? (String) null : subtenantIdentityProvider.name,
             subtenantIdentityProvider == null ? (OidcRequest) null : subtenantIdentityProvider.oidcAttributes,
             subtenantIdentityProvider == null ? (Object) null : subtenantIdentityProvider.saml2Attributes,
             subtenantIdentityProvider == null ? SubtenantIdentityProviderStatus.getDefault()
                                               : subtenantIdentityProvider.status,
             subtenantIdentityProvider == null ? new Date() : subtenantIdentityProvider.updatedAt);
    }

    /**
     * Constructor.
     */
    public SubtenantIdentityProvider() {
        this((String) null, new Date(), (String) null, (String) null, false, (String) null, (OidcRequest) null,
             (Object) null, SubtenantIdentityProviderStatus.getDefault(), new Date());
    }

    /**
     * Constructor.
     * 
     * <p>
     * Constructor based on object identifier.
     * <p>
     * 
     * @param id
     *            Entity ID.
     */
    public SubtenantIdentityProvider(String id) {
        this();
        setId(id);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on read-only fields.
     * <p>
     * Note: Should not be used. Use {@link #SubtenantIdentityProvider()} instead.
     * 
     * @param createdAt
     *            Creation UTC time RFC3339.
     * @param isDefault
     *            Flag indicating whether this is the global default identity provider.
     * @param updatedAt
     *            Last update UTC time RFC3339.
     */
    @Internal
    public SubtenantIdentityProvider(Date createdAt, boolean isDefault, Date updatedAt) {
        this((String) null, createdAt, (String) null, (String) null, isDefault, (String) null, (OidcRequest) null,
             (Object) null, SubtenantIdentityProviderStatus.getDefault(), updatedAt);
    }

    /**
     * Constructor.
     * 
     * <p>
     * Constructor based on required fields.
     * <p>
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     * @param name
     *            Name of the identity provider.
     */
    public SubtenantIdentityProvider(String accountId, String name) {
        this(accountId, new Date(), (String) null, (String) null, false, name, (OidcRequest) null, (Object) null,
             SubtenantIdentityProviderStatus.getDefault(), new Date());
    }

    /**
     * Gets the id of the account the identity provider belongs to.
     * 
     * @return accountId
     */
    public String getAccountId() {
        return accountId;
    }

    /**
     * Sets the id of the account the identity provider belongs to.
     * 
     * <p>
     * Note: the length of the string has to match {@code /[a-f0-9]{32}/} to be valid
     * 
     * @param accountId
     *            The ID of the account the identity provider belongs to.
     */
    @Required
    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    /**
     * Checks whether accountId value is valid.
     * 
     * @return true if the value is valid; false otherwise.
     */
    @SuppressWarnings("PMD.UselessParentheses")
    public boolean isAccountIdValid() {
        return accountId != null && (accountId.matches("[a-f0-9]{32}"));
    }

    /**
     * Gets creation utc time rfc3339.
     * 
     * @return createdAt
     */
    public Date getCreatedAt() {
        return createdAt;
    }

    /**
     * Gets description for the identity provider.
     * 
     * @return description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets description for the identity provider.
     * 
     * <p>
     * Note: the length of the string has to be less than or equal to {@code 500} to be valid
     * 
     * @param description
     *            Description for the identity provider.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Checks whether description value is valid.
     * 
     * @return true if the value is valid; false otherwise.
     */
    @SuppressWarnings("PMD.UselessParentheses")
    public boolean isDescriptionValid() {
        return (description == null || description.length() <= 500);
    }

    /**
     * Gets entity id.
     * 
     * @return id
     */
    @Override
    public String getId() {
        return id;
    }

    /**
     * Sets entity id.
     * 
     * <p>
     * Note: the length of the string has to match {@code /[a-f0-9]{32}/} to be valid
     * 
     * @param id
     *            Entity ID.
     */
    @Override
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Sets entity id.
     * 
     * <p>
     * Similar to {@link #setId(String)}
     * <p>
     * Note: the length of the string has to match {@code /[a-f0-9]{32}/} to be valid
     * 
     * @param subtenantIdentityProviderId
     *            Entity ID.
     */
    @Internal
    public void setSubtenantIdentityProviderId(String subtenantIdentityProviderId) {
        setId(subtenantIdentityProviderId);
    }

    /**
     * Checks whether id value is valid.
     * 
     * @return true if the value is valid; false otherwise.
     */
    @SuppressWarnings("PMD.UselessParentheses")
    public boolean isIdValid() {
        return (id == null || id.matches("[a-f0-9]{32}"));
    }

    /**
     * Gets flag indicating whether this is the global default identity provider.
     * 
     * @return isDefault
     */
    public boolean isDefault() {
        return isDefault;
    }

    /**
     * Gets name of the identity provider.
     * 
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets name of the identity provider.
     * 
     * <p>
     * Note: the length of the string has to be less than or equal to {@code 100} to be valid
     * 
     * @param name
     *            Name of the identity provider.
     */
    @Required
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Checks whether name value is valid.
     * 
     * @return true if the value is valid; false otherwise.
     */
    @SuppressWarnings("PMD.UselessParentheses")
    public boolean isNameValid() {
        return name != null && (name.length() <= 100);
    }

    /**
     * Gets represents oidc specific attributes.
     * 
     * @return oidcAttributes
     */
    public OidcRequest getOidcAttributes() {
        return oidcAttributes;
    }

    /**
     * Sets represents oidc specific attributes.
     * 
     * @param oidcAttributes
     *            Represents OIDC specific attributes.
     */
    public void setOidcAttributes(OidcRequest oidcAttributes) {
        this.oidcAttributes = oidcAttributes;
    }

    /**
     * Gets represents saml2 specific attributes in responses.
     * 
     * @return saml2Attributes
     */
    public Object getSaml2Attributes() {
        return saml2Attributes;
    }

    /**
     * Sets represents saml2 specific attributes in responses.
     * 
     * @param saml2Attributes
     *            Represents SAML2 specific attributes in responses.
     */
    public void setSaml2Attributes(Object saml2Attributes) {
        this.saml2Attributes = saml2Attributes;
    }

    /**
     * Gets status of the identity provider.
     * 
     * @return status
     */
    public SubtenantIdentityProviderStatus getStatus() {
        return status;
    }

    /**
     * Sets status of the identity provider.
     * 
     * @param status
     *            Status of the identity provider.
     */
    public void setStatus(SubtenantIdentityProviderStatus status) {
        this.status = status;
    }

    /**
     * Sets status of the identity provider.
     * 
     * <p>
     * Similar to {@link #setStatus(com.arm.mbed.cloud.sdk.accounts.model.SubtenantIdentityProviderStatus)}
     * 
     * @param status
     *            Status of the identity provider.
     */
    @Internal
    public void setStatus(String status) {
        this.status = SubtenantIdentityProviderStatus.getValue(status);
    }

    /**
     * Gets last update utc time rfc3339.
     * 
     * @return updatedAt
     */
    public Date getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Returns a string representation of the object.
     * 
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "SubtenantIdentityProvider [accountId=" + accountId + ", createdAt=" + createdAt + ", description="
               + description + ", id=" + id + ", isDefault=" + isDefault + ", name=" + name + ", oidcAttributes="
               + oidcAttributes + ", saml2Attributes=" + saml2Attributes + ", status=" + status + ", updatedAt="
               + updatedAt + "]";
    }

    /**
     * Calculates the hash code of this instance based on field values.
     * 
     * <p>
     * 
     * @see java.lang.Object#hashCode()
     * @return hash code
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((accountId == null) ? 0 : accountId.hashCode());
        result = prime * result + ((createdAt == null) ? 0 : createdAt.hashCode());
        result = prime * result + ((description == null) ? 0 : description.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + Objects.hashCode(Boolean.valueOf(isDefault));
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((oidcAttributes == null) ? 0 : oidcAttributes.hashCode());
        result = prime * result + ((saml2Attributes == null) ? 0 : saml2Attributes.hashCode());
        result = prime * result + ((status == null) ? 0 : status.hashCode());
        result = prime * result + ((updatedAt == null) ? 0 : updatedAt.hashCode());
        return result;
    }

    /**
     * Method to ensure {@link #equals(Object)} is correct.
     * 
     * <p>
     * Note: see this article: <a href="https://www.artima.com/lejava/articles/equality.html">canEqual()</a>
     * 
     * @param other
     *            another object.
     * @return true if the other object is an instance of the class in which canEqual is (re)defined, false otherwise.
     */
    protected boolean canEqual(Object other) {
        return other instanceof SubtenantIdentityProvider;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * 
     * <p>
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @param obj
     *            an object to compare with this instance.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof SubtenantIdentityProvider)) {
            return false;
        }
        final SubtenantIdentityProvider other = (SubtenantIdentityProvider) obj;
        if (!other.canEqual(this)) {
            return false;
        }
        if (accountId == null) {
            if (other.accountId != null) {
                return false;
            }
        } else if (!accountId.equals(other.accountId)) {
            return false;
        }
        if (createdAt == null) {
            if (other.createdAt != null) {
                return false;
            }
        } else if (!createdAt.equals(other.createdAt)) {
            return false;
        }
        if (description == null) {
            if (other.description != null) {
                return false;
            }
        } else if (!description.equals(other.description)) {
            return false;
        }
        if (id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        if (isDefault != other.isDefault) {
            return false;
        }
        if (name == null) {
            if (other.name != null) {
                return false;
            }
        } else if (!name.equals(other.name)) {
            return false;
        }
        if (oidcAttributes == null) {
            if (other.oidcAttributes != null) {
                return false;
            }
        } else if (!oidcAttributes.equals(other.oidcAttributes)) {
            return false;
        }
        if (saml2Attributes == null) {
            if (other.saml2Attributes != null) {
                return false;
            }
        } else if (!saml2Attributes.equals(other.saml2Attributes)) {
            return false;
        }
        if (status != other.status) {
            return false;
        }
        if (updatedAt == null) {
            if (other.updatedAt != null) {
                return false;
            }
        } else if (!updatedAt.equals(other.updatedAt)) {
            return false;
        }
        return true;
    }

    /**
     * Checks whether the model is valid or not.
     * 
     * <p>
     * 
     * @see SdkModel#isValid()
     * @return true if the model is valid; false otherwise.
     */
    @Override
    public boolean isValid() {
        return isAccountIdValid() && isDescriptionValid() && isIdValid() && isNameValid();
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public SubtenantIdentityProvider clone() {
        return new SubtenantIdentityProvider(this);
    }
}
