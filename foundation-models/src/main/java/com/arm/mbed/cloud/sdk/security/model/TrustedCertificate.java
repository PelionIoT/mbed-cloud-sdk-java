// This file was generated by the Pelion SDK foundation code generator.
// This model class was autogenerated on Wed Jan 06 18:10:54 CST 2021. Feel free to change its contents as you wish.
// TODO The following fields need to be defined:
// - isDeveloperCertificate
package com.arm.mbed.cloud.sdk.security.model;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NotImplemented;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.NotImplementedException;
import java.util.Date;

/**
 * Model for a trusted certificate.
 */
@Preamble(description = "Model for a trusted certificate.")
@SuppressWarnings("PMD.CyclomaticComplexity")
public class TrustedCertificate extends AbstractTrustedCertificate {
    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = 1727697502201821L;
    private boolean isDeveloperCertificate;

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on all fields.
     * <p>
     * Note: Should not be used. Use {@link #TrustedCertificate()} instead.
     * 
     * @param isDeveloperCertificate
     *            Whether or not this certificate is a developer certificate.
     * @param accountId
     *            The ID of the account.
     * @param certificate
     *            X509.v3 trusted certificate in PEM format.
     * @param certificateFingerprint
     *            A SHA-256 fingerprint of the certificate.
     * @param createdAt
     *            Creation UTC time RFC3339.
     * @param description
     *            Human readable description of this certificate.
     * @param deviceExecutionMode
     *            Device execution mode where 1 means a developer certificate.
     * @param enrollmentMode
     *            DEPRECATED: Certificate is used in enrollment mode. Default value is false.
     * @param id
     *            Entity ID.
     * @param issuer
     *            Issuer of the certificate.
     * @param name
     *            Certificate name.
     * @param ownerId
     *            The ID of the owner.
     * @param service
     *            Service name where the certificate is used.
     * @param status
     *            Status of the certificate.
     * @param subject
     *            Subject of the certificate.
     * @param updatedAt
     *            Last update UTC time RFC3339.
     * @param valid
     *            This read-only flag indicates whether the certificate is valid or not.
     * @param validity
     *            Expiration time in UTC formatted as RFC3339.
     */
    @Internal
    @SuppressWarnings("PMD.CyclomaticComplexity")
    public TrustedCertificate(String accountId, String certificate, String certificateFingerprint, Date createdAt,
                              String description, int deviceExecutionMode, boolean enrollmentMode, String id,
                              boolean isDeveloperCertificate, String issuer, String name, String ownerId,
                              TrustedCertificateService service, TrustedCertificateStatus status, String subject,
                              Date updatedAt, boolean valid, Date validity) {
        super(accountId, certificate, certificateFingerprint, createdAt, description, deviceExecutionMode,
              enrollmentMode, id, issuer, name, ownerId, service, status, subject, updatedAt, valid, validity);
        this.isDeveloperCertificate = isDeveloperCertificate;
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on a similar object.
     * <p>
     * Note: Should not be used. Use {@link #TrustedCertificate()} instead.
     * 
     * @param trustedCertificate
     *            a trusted certificate.
     */
    @SuppressWarnings("deprecation")
    @Internal
    public TrustedCertificate(TrustedCertificate trustedCertificate) {
        this(trustedCertificate == null ? (String) null : trustedCertificate.accountId,
             trustedCertificate == null ? (String) null : trustedCertificate.certificate,
             trustedCertificate == null ? (String) null : trustedCertificate.certificateFingerprint,
             trustedCertificate == null ? new Date() : trustedCertificate.createdAt,
             trustedCertificate == null ? (String) null : trustedCertificate.description,
             trustedCertificate == null ? 0 : trustedCertificate.deviceExecutionMode,
             trustedCertificate != null && trustedCertificate.enrollmentMode,
             trustedCertificate == null ? (String) null : trustedCertificate.id,
             trustedCertificate != null && trustedCertificate.isDeveloperCertificate(),
             trustedCertificate == null ? (String) null : trustedCertificate.issuer,
             trustedCertificate == null ? (String) null : trustedCertificate.name,
             trustedCertificate == null ? (String) null : trustedCertificate.ownerId,
             trustedCertificate == null ? TrustedCertificateService.getDefault() : trustedCertificate.service,
             trustedCertificate == null ? TrustedCertificateStatus.getDefault() : trustedCertificate.status,
             trustedCertificate == null ? (String) null : trustedCertificate.subject,
             trustedCertificate == null ? new Date() : trustedCertificate.updatedAt,
             trustedCertificate != null && trustedCertificate.valid,
             trustedCertificate == null ? new Date() : trustedCertificate.validity);
    }

    /**
     * Constructor.
     */
    public TrustedCertificate() {
        this((String) null, (String) null, (String) null, new Date(), (String) null, 0, false, (String) null, false,
             (String) null, (String) null, (String) null, TrustedCertificateService.getDefault(),
             TrustedCertificateStatus.getDefault(), (String) null, new Date(), false, new Date());
    }

    @Internal
    public TrustedCertificate(String accountId, String certificate, String certificateFingerprint, Date createdAt,
                              String description, int deviceExecutionMode, boolean enrollmentMode, String id,
                              String issuer, String name, String ownerId, TrustedCertificateService service,
                              TrustedCertificateStatus status, String subject, Date updatedAt, boolean valid,
                              Date validity) {
        super(accountId, certificate, certificateFingerprint, createdAt, description, deviceExecutionMode,
              enrollmentMode, id, issuer, name, ownerId, service, status, subject, updatedAt, valid, validity);
    }

    /**
     * Constructor.
     * 
     * <p>
     * Constructor based on object identifier.
     * <p>
     * 
     * @param id
     *            Entity ID.
     */
    public TrustedCertificate(String id) {
        this();
        setId(id);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on read-only fields.
     * <p>
     * Note: Should not be used. Use {@link #TrustedCertificate()} instead.
     * 
     * @param isDeveloperCertificate
     *            Whether or not this certificate is a developer certificate.
     * @param accountId
     *            The ID of the account.
     * @param certificateFingerprint
     *            A SHA-256 fingerprint of the certificate.
     * @param createdAt
     *            Creation UTC time RFC3339.
     * @param deviceExecutionMode
     *            Device execution mode where 1 means a developer certificate.
     * @param issuer
     *            Issuer of the certificate.
     * @param ownerId
     *            The ID of the owner.
     * @param subject
     *            Subject of the certificate.
     * @param updatedAt
     *            Last update UTC time RFC3339.
     * @param valid
     *            This read-only flag indicates whether the certificate is valid or not.
     * @param validity
     *            Expiration time in UTC formatted as RFC3339.
     */
    @Internal
    @SuppressWarnings("PMD.CyclomaticComplexity")
    public TrustedCertificate(String accountId, String certificateFingerprint, Date createdAt, int deviceExecutionMode,
                              boolean isDeveloperCertificate, String issuer, String ownerId, String subject,
                              Date updatedAt, boolean valid, Date validity) {
        this(accountId, (String) null, certificateFingerprint, createdAt, (String) null, deviceExecutionMode, false,
             (String) null, isDeveloperCertificate, issuer, (String) null, ownerId,
             TrustedCertificateService.getDefault(), TrustedCertificateStatus.getDefault(), subject, updatedAt, valid,
             validity);
    }

    /**
     * Constructor.
     * 
     * <p>
     * Constructor based on required fields.
     * <p>
     * 
     * @param certificate
     *            X509.v3 trusted certificate in PEM format.
     * @param name
     *            Certificate name.
     * @param service
     *            Service name where the certificate is used.
     */
    public TrustedCertificate(String certificate, String name, TrustedCertificateService service) {
        this((String) null, certificate, (String) null, new Date(), (String) null, 0, false, (String) null, false,
             (String) null, name, (String) null, service, TrustedCertificateStatus.getDefault(), (String) null,
             new Date(), false, new Date());
    }

    /**
     * Gets whether or not this certificate is a developer certificate.
     * 
     * @return isDeveloperCertificate
     */
    @NotImplemented
    public boolean isDeveloperCertificate() throws NotImplementedException {
        return isDeveloperCertificate;
    }

    /**
     * Returns a string representation of the object.
     * 
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @SuppressWarnings("deprecation")
    @Override
    public String toString() {
        return "TrustedCertificate [isDeveloperCertificate=" + isDeveloperCertificate() + ", accountId=" + accountId
               + ", certificate=" + certificate + ", certificateFingerprint=" + certificateFingerprint + ", createdAt="
               + createdAt + ", description=" + description + ", deviceExecutionMode=" + deviceExecutionMode
               + ", enrollmentMode=" + enrollmentMode + ", id=" + id + ", issuer=" + issuer + ", name=" + name
               + ", ownerId=" + ownerId + ", service=" + service + ", status=" + status + ", subject=" + subject
               + ", updatedAt=" + updatedAt + ", valid=" + valid + ", validity=" + validity + "]";
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + (isDeveloperCertificate ? 1231 : 1237);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!super.equals(obj)) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final TrustedCertificate other = (TrustedCertificate) obj;
        if (isDeveloperCertificate != other.isDeveloperCertificate) {
            return false;
        }
        return true;
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public TrustedCertificate clone() {
        return new TrustedCertificate(this);
    }

    /**
     * Method to ensure {@link #equals(Object)} is correct.
     * 
     * <p>
     * Note: see this article: <a href="https://www.artima.com/lejava/articles/equality.html">canEqual()</a>
     * 
     * @param other
     *            another object.
     * @return true if the other object is an instance of the class in which canEqual is (re)defined, false otherwise.
     */
    @Override
    protected boolean canEqual(Object other) {
        return other instanceof TrustedCertificate;
    }
}
