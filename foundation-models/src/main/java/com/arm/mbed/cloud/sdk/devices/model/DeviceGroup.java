// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.SdkModel;
import java.util.Date;
import java.util.Map;
import java.util.Objects;

/**
 * Model for a device group.
 */
@Preamble(description = "Model for a device group.")
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class DeviceGroup implements SdkModel {
    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = 1596529818452293L;

    /**
     * The time the group was created.
     */
    private final Date createdAt;

    /**
     * Up to ten custom key-value attributes. Keys cannot begin with a number. Both key and value are limited to 128
     * characters. Updating this field replaces existing contents.
     */
    private Map<String, String> customAttributes;

    /**
     * The description of the group.
     */
    private String description;

    /**
     * The number of devices in this group.
     */
    private final int devicesCount;

    /**
     * The group ID.
     */
    private String id;

    /**
     * Name of the group.
     */
    private String name;

    /**
     * The time this object was updated.
     */
    private final Date updatedAt;

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on all fields.
     * <p>
     * Note: Should not be used. Use {@link #DeviceGroup()} instead.
     * 
     * @param createdAt
     *            The time the group was created.
     * @param customAttributes
     *            Up to ten custom key-value attributes. Keys cannot begin with a number. Both key and value are limited
     *            to 128 characters. Updating this field replaces existing contents.
     * @param description
     *            The description of the group.
     * @param devicesCount
     *            The number of devices in this group.
     * @param id
     *            The group ID.
     * @param name
     *            Name of the group.
     * @param updatedAt
     *            The time this object was updated.
     */
    @Internal
    public DeviceGroup(Date createdAt, Map<String, String> customAttributes, String description, int devicesCount,
                       String id, String name, Date updatedAt) {
        super();
        this.createdAt = createdAt;
        this.devicesCount = devicesCount;
        this.updatedAt = updatedAt;
        setCustomAttributes(customAttributes);
        setDescription(description);
        setId(id);
        setName(name);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on a similar object.
     * <p>
     * Note: Should not be used. Use {@link #DeviceGroup()} instead.
     * 
     * @param deviceGroup
     *            a device group.
     */
    @Internal
    public DeviceGroup(DeviceGroup deviceGroup) {
        this(deviceGroup == null ? new Date() : deviceGroup.createdAt,
             deviceGroup == null ? (Map<String, String>) null : deviceGroup.customAttributes,
             deviceGroup == null ? (String) null : deviceGroup.description,
             deviceGroup == null ? 0 : deviceGroup.devicesCount, deviceGroup == null ? (String) null : deviceGroup.id,
             deviceGroup == null ? (String) null : deviceGroup.name,
             deviceGroup == null ? new Date() : deviceGroup.updatedAt);
    }

    /**
     * Constructor.
     */
    public DeviceGroup() {
        this(new Date(), (Map<String, String>) null, (String) null, 0, (String) null, (String) null, new Date());
    }

    /**
     * Constructor.
     * 
     * <p>
     * Constructor based on object identifier.
     * <p>
     * 
     * @param id
     *            The group ID.
     */
    public DeviceGroup(String id) {
        this();
        setId(id);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on read-only fields.
     * <p>
     * Note: Should not be used. Use {@link #DeviceGroup()} instead.
     * 
     * @param createdAt
     *            The time the group was created.
     * @param devicesCount
     *            The number of devices in this group.
     * @param updatedAt
     *            The time this object was updated.
     */
    @Internal
    public DeviceGroup(Date createdAt, int devicesCount, Date updatedAt) {
        this(createdAt, (Map<String, String>) null, (String) null, devicesCount, (String) null, (String) null,
             updatedAt);
    }

    /**
     * Gets the time the group was created.
     * 
     * @return createdAt
     */
    public Date getCreatedAt() {
        return createdAt;
    }

    /**
     * Gets up to ten custom key-value attributes. keys cannot begin with a number. both key and value are limited to
     * 128 characters. updating this field replaces existing contents.
     * 
     * @return customAttributes
     */
    public Map<String, String> getCustomAttributes() {
        return customAttributes;
    }

    /**
     * Sets up to ten custom key-value attributes. keys cannot begin with a number. both key and value are limited to
     * 128 characters. updating this field replaces existing contents.
     * 
     * <p>
     * Note: the number of elements has to be less than or equal to {@code 10} to be valid
     * 
     * @param customAttributes
     *            Up to ten custom key-value attributes. Keys cannot begin with a number. Both key and value are limited
     *            to 128 characters. Updating this field replaces existing contents.
     */
    public void setCustomAttributes(Map<String, String> customAttributes) {
        this.customAttributes = customAttributes;
    }

    /**
     * Checks whether customAttributes value is valid.
     * 
     * @return true if the value is valid; false otherwise.
     */
    @SuppressWarnings("PMD.UselessParentheses")
    public boolean isCustomAttributesValid() {
        return (customAttributes == null || customAttributes.size() <= 10);
    }

    /**
     * Gets the description of the group.
     * 
     * @return description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of the group.
     * 
     * <p>
     * Note: the length of the string has to be less than or equal to {@code 1024} to be valid
     * 
     * @param description
     *            The description of the group.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Checks whether description value is valid.
     * 
     * @return true if the value is valid; false otherwise.
     */
    @SuppressWarnings("PMD.UselessParentheses")
    public boolean isDescriptionValid() {
        return (description == null || description.length() <= 1024);
    }

    /**
     * Gets the number of devices in this group.
     * 
     * @return devicesCount
     */
    public int getDevicesCount() {
        return devicesCount;
    }

    /**
     * Gets the group id.
     * 
     * @return id
     */
    @Override
    public String getId() {
        return id;
    }

    /**
     * Sets the group id.
     * 
     * @param id
     *            The group ID.
     */
    @Override
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Sets the group id.
     * 
     * <p>
     * Similar to {@link #setId(String)}
     * 
     * @param deviceGroupId
     *            The group ID.
     */
    @Internal
    public void setDeviceGroupId(String deviceGroupId) {
        setId(deviceGroupId);
    }

    /**
     * Gets name of the group.
     * 
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets name of the group.
     * 
     * <p>
     * Note: the length of the string has to be less than or equal to {@code 128} to be valid
     * 
     * @param name
     *            Name of the group.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Checks whether name value is valid.
     * 
     * @return true if the value is valid; false otherwise.
     */
    @SuppressWarnings("PMD.UselessParentheses")
    public boolean isNameValid() {
        return (name == null || name.length() <= 128);
    }

    /**
     * Gets the time this object was updated.
     * 
     * @return updatedAt
     */
    public Date getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Returns a string representation of the object.
     * 
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "DeviceGroup [createdAt=" + createdAt + ", customAttributes=" + customAttributes + ", description="
               + description + ", devicesCount=" + devicesCount + ", id=" + id + ", name=" + name + ", updatedAt="
               + updatedAt + "]";
    }

    /**
     * Calculates the hash code of this instance based on field values.
     * 
     * <p>
     * 
     * @see java.lang.Object#hashCode()
     * @return hash code
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((createdAt == null) ? 0 : createdAt.hashCode());
        result = prime * result + ((customAttributes == null) ? 0 : customAttributes.hashCode());
        result = prime * result + ((description == null) ? 0 : description.hashCode());
        result = prime * result + Objects.hashCode(Integer.valueOf(devicesCount));
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((updatedAt == null) ? 0 : updatedAt.hashCode());
        return result;
    }

    /**
     * Method to ensure {@link #equals(Object)} is correct.
     * 
     * <p>
     * Note: see this article: <a href="https://www.artima.com/lejava/articles/equality.html">canEqual()</a>
     * 
     * @param other
     *            another object.
     * @return true if the other object is an instance of the class in which canEqual is (re)defined, false otherwise.
     */
    protected boolean canEqual(Object other) {
        return other instanceof DeviceGroup;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * 
     * <p>
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @param obj
     *            an object to compare with this instance.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof DeviceGroup)) {
            return false;
        }
        final DeviceGroup other = (DeviceGroup) obj;
        if (!other.canEqual(this)) {
            return false;
        }
        if (createdAt == null) {
            if (other.createdAt != null) {
                return false;
            }
        } else if (!createdAt.equals(other.createdAt)) {
            return false;
        }
        if (customAttributes == null) {
            if (other.customAttributes != null) {
                return false;
            }
        } else if (!customAttributes.equals(other.customAttributes)) {
            return false;
        }
        if (description == null) {
            if (other.description != null) {
                return false;
            }
        } else if (!description.equals(other.description)) {
            return false;
        }
        if (devicesCount != other.devicesCount) {
            return false;
        }
        if (id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        if (name == null) {
            if (other.name != null) {
                return false;
            }
        } else if (!name.equals(other.name)) {
            return false;
        }
        if (updatedAt == null) {
            if (other.updatedAt != null) {
                return false;
            }
        } else if (!updatedAt.equals(other.updatedAt)) {
            return false;
        }
        return true;
    }

    /**
     * Checks whether the model is valid or not.
     * 
     * <p>
     * 
     * @see SdkModel#isValid()
     * @return true if the model is valid; false otherwise.
     */
    @Override
    public boolean isValid() {
        return isCustomAttributesValid() && isDescriptionValid() && isNameValid();
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public DeviceGroup clone() {
        return new DeviceGroup(this);
    }
}
