// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.annotations.Required;
import com.arm.mbed.cloud.sdk.common.SdkModel;
import java.util.Date;
import java.util.Hashtable;
import java.util.Map;
import java.util.Objects;

/**
 * Model for a firmware manifest.
 */
@Preamble(description = "Model for a firmware manifest.")
@SuppressWarnings({ "PMD.CyclomaticComplexity", "PMD.AvoidDuplicateLiterals" })
public class FirmwareManifest implements SdkModel {
    /**
     * Mapping needed for encoding or decoding filters.
     * 
     * <p>
     * Filters are used when listing models. See {@link com.arm.mbed.cloud.sdk.common.listing.filtering.Filters}
     */
    @Internal
    public static final Map<String, String> FILTER_MAPPING = generateFilterMapping();

    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = -945825015691813L;

    /**
     * The time the entity was created.
     */
    private final Date createdAt;

    /**
     * The size of the firmware manifest in bytes.
     */
    private final long datafileSize;

    /**
     * The URL of the ASN.1 DER-encoded firmware manifest binary.
     */
    private final String datafileUrl;

    /**
     * Digest (SHA256, hex-encoded) of the payload to deliver to the device.
     */
    private final String deliveredPayloadDigest;

    /**
     * The size in bytes of the payload to deliver to the device.
     */
    private final long deliveredPayloadSize;

    /**
     * Type of the payload to deliver to the device (full or delta image).
     */
    private final FirmwareManifestDeliveredPayloadType deliveredPayloadType;

    /**
     * The URL of the payload to deliver to the device.
     */
    private final String deliveredPayloadUrl;

    /**
     * The description of the firmware manifest.
     */
    private String description;

    /**
     * The device class ID.
     */
    private final String deviceClass;

    /**
     * The device vendor ID.
     */
    private final String deviceVendor;

    /**
     * The firmware manifest ID.
     */
    private String id;

    /**
     * The key table of pre-shared keys for devices.
     */
    private final String keyTableUrl;

    /**
     * Version of the manifest schema (1 or 3).
     */
    private final FirmwareManifestSchemaVersion manifestSchemaVersion;

    /**
     * The name of the manifest.
     */
    @Required
    private String name;

    /**
     * Raw manifest in JSON format, parsed from ASN.1 DER encoding. Fields may change. Backwards compatibility is not
     * guaranteed. Recommended for debugging only.
     * 
     */
    private final Object parsedRawManifest;

    /**
     * Digest (SHA256, hex-encoded) of the currently installed payload.
     */
    private final String precursorPayloadDigest;

    /**
     * The firmware manifest version as a timestamp.
     */
    private final Date timestamp;

    /**
     * Update priority, passed to the application callback when an update is performed. Allows the application to make
     * application-specific decisions.
     */
    private final long updatePriority;

    /**
     * The time the entity was updated.
     */
    private final Date updatedAt;

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on all fields.
     * <p>
     * Note: Should not be used. Use {@link #FirmwareManifest()} instead.
     * 
     * @param createdAt
     *            The time the entity was created.
     * @param datafileSize
     *            The size of the firmware manifest in bytes.
     * @param datafileUrl
     *            The URL of the ASN.1 DER-encoded firmware manifest binary.
     * @param deliveredPayloadDigest
     *            Digest (SHA256, hex-encoded) of the payload to deliver to the device.
     * @param deliveredPayloadSize
     *            The size in bytes of the payload to deliver to the device.
     * @param deliveredPayloadType
     *            Type of the payload to deliver to the device (full or delta image).
     * @param deliveredPayloadUrl
     *            The URL of the payload to deliver to the device.
     * @param description
     *            The description of the firmware manifest.
     * @param deviceClass
     *            The device class ID.
     * @param deviceVendor
     *            The device vendor ID.
     * @param id
     *            The firmware manifest ID.
     * @param keyTableUrl
     *            The key table of pre-shared keys for devices.
     * @param manifestSchemaVersion
     *            Version of the manifest schema (1 or 3).
     * @param name
     *            The name of the manifest.
     * @param parsedRawManifest
     *            Raw manifest in JSON format, parsed from ASN.1 DER encoding. Fields may change. Backwards
     *            compatibility is not guaranteed. Recommended for debugging only.
     * 
     * @param precursorPayloadDigest
     *            Digest (SHA256, hex-encoded) of the currently installed payload.
     * @param timestamp
     *            The firmware manifest version as a timestamp.
     * @param updatePriority
     *            Update priority, passed to the application callback when an update is performed. Allows the
     *            application to make application-specific decisions.
     * @param updatedAt
     *            The time the entity was updated.
     */
    @Internal
    @SuppressWarnings("PMD.CyclomaticComplexity")
    public FirmwareManifest(Date createdAt, long datafileSize, String datafileUrl, String deliveredPayloadDigest,
                            long deliveredPayloadSize, FirmwareManifestDeliveredPayloadType deliveredPayloadType,
                            String deliveredPayloadUrl, String description, String deviceClass, String deviceVendor,
                            String id, String keyTableUrl, FirmwareManifestSchemaVersion manifestSchemaVersion,
                            String name, Object parsedRawManifest, String precursorPayloadDigest, Date timestamp,
                            long updatePriority, Date updatedAt) {
        super();
        this.createdAt = createdAt;
        this.datafileSize = datafileSize;
        this.datafileUrl = datafileUrl;
        this.deliveredPayloadDigest = deliveredPayloadDigest;
        this.deliveredPayloadSize = deliveredPayloadSize;
        this.deliveredPayloadType = deliveredPayloadType;
        this.deliveredPayloadUrl = deliveredPayloadUrl;
        this.deviceClass = deviceClass;
        this.deviceVendor = deviceVendor;
        this.keyTableUrl = keyTableUrl;
        this.manifestSchemaVersion = manifestSchemaVersion;
        this.parsedRawManifest = parsedRawManifest;
        this.precursorPayloadDigest = precursorPayloadDigest;
        this.timestamp = timestamp;
        this.updatePriority = updatePriority;
        this.updatedAt = updatedAt;
        setDescription(description);
        setId(id);
        setName(name);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on a similar object.
     * <p>
     * Note: Should not be used. Use {@link #FirmwareManifest()} instead.
     * 
     * @param firmwareManifest
     *            a firmware manifest.
     */
    @Internal
    public FirmwareManifest(FirmwareManifest firmwareManifest) {
        this(firmwareManifest == null ? new Date() : firmwareManifest.createdAt,
             firmwareManifest == null ? 0 : firmwareManifest.datafileSize,
             firmwareManifest == null ? (String) null : firmwareManifest.datafileUrl,
             firmwareManifest == null ? (String) null : firmwareManifest.deliveredPayloadDigest,
             firmwareManifest == null ? 0 : firmwareManifest.deliveredPayloadSize,
             firmwareManifest == null ? FirmwareManifestDeliveredPayloadType.getDefault()
                                      : firmwareManifest.deliveredPayloadType,
             firmwareManifest == null ? (String) null : firmwareManifest.deliveredPayloadUrl,
             firmwareManifest == null ? (String) null : firmwareManifest.description,
             firmwareManifest == null ? (String) null : firmwareManifest.deviceClass,
             firmwareManifest == null ? (String) null : firmwareManifest.deviceVendor,
             firmwareManifest == null ? (String) null : firmwareManifest.id,
             firmwareManifest == null ? (String) null : firmwareManifest.keyTableUrl,
             firmwareManifest == null ? FirmwareManifestSchemaVersion.getDefault()
                                      : firmwareManifest.manifestSchemaVersion,
             firmwareManifest == null ? (String) null : firmwareManifest.name,
             firmwareManifest == null ? (Object) null : firmwareManifest.parsedRawManifest,
             firmwareManifest == null ? (String) null : firmwareManifest.precursorPayloadDigest,
             firmwareManifest == null ? new Date() : firmwareManifest.timestamp,
             firmwareManifest == null ? 0 : firmwareManifest.updatePriority,
             firmwareManifest == null ? new Date() : firmwareManifest.updatedAt);
    }

    /**
     * Constructor.
     */
    public FirmwareManifest() {
        this(new Date(), 0, (String) null, (String) null, 0, FirmwareManifestDeliveredPayloadType.getDefault(),
             (String) null, (String) null, (String) null, (String) null, (String) null, (String) null,
             FirmwareManifestSchemaVersion.getDefault(), (String) null, (Object) null, (String) null, new Date(), 0,
             new Date());
    }

    /**
     * Constructor.
     * 
     * <p>
     * Constructor based on object identifier.
     * <p>
     * 
     * @param id
     *            The firmware manifest ID.
     */
    public FirmwareManifest(String id) {
        this();
        setId(id);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on read-only fields.
     * <p>
     * Note: Should not be used. Use {@link #FirmwareManifest()} instead.
     * 
     * @param createdAt
     *            The time the entity was created.
     * @param datafileSize
     *            The size of the firmware manifest in bytes.
     * @param datafileUrl
     *            The URL of the ASN.1 DER-encoded firmware manifest binary.
     * @param deliveredPayloadDigest
     *            Digest (SHA256, hex-encoded) of the payload to deliver to the device.
     * @param deliveredPayloadSize
     *            The size in bytes of the payload to deliver to the device.
     * @param deliveredPayloadType
     *            Type of the payload to deliver to the device (full or delta image).
     * @param deliveredPayloadUrl
     *            The URL of the payload to deliver to the device.
     * @param deviceClass
     *            The device class ID.
     * @param deviceVendor
     *            The device vendor ID.
     * @param keyTableUrl
     *            The key table of pre-shared keys for devices.
     * @param manifestSchemaVersion
     *            Version of the manifest schema (1 or 3).
     * @param parsedRawManifest
     *            Raw manifest in JSON format, parsed from ASN.1 DER encoding. Fields may change. Backwards
     *            compatibility is not guaranteed. Recommended for debugging only.
     * 
     * @param precursorPayloadDigest
     *            Digest (SHA256, hex-encoded) of the currently installed payload.
     * @param timestamp
     *            The firmware manifest version as a timestamp.
     * @param updatePriority
     *            Update priority, passed to the application callback when an update is performed. Allows the
     *            application to make application-specific decisions.
     * @param updatedAt
     *            The time the entity was updated.
     */
    @Internal
    @SuppressWarnings("PMD.CyclomaticComplexity")
    public FirmwareManifest(Date createdAt, long datafileSize, String datafileUrl, String deliveredPayloadDigest,
                            long deliveredPayloadSize, FirmwareManifestDeliveredPayloadType deliveredPayloadType,
                            String deliveredPayloadUrl, String deviceClass, String deviceVendor, String keyTableUrl,
                            FirmwareManifestSchemaVersion manifestSchemaVersion, Object parsedRawManifest,
                            String precursorPayloadDigest, Date timestamp, long updatePriority, Date updatedAt) {
        this(createdAt, datafileSize, datafileUrl, deliveredPayloadDigest, deliveredPayloadSize, deliveredPayloadType,
             deliveredPayloadUrl, (String) null, deviceClass, deviceVendor, (String) null, keyTableUrl,
             manifestSchemaVersion, (String) null, parsedRawManifest, precursorPayloadDigest, timestamp, updatePriority,
             updatedAt);
    }

    /**
     * Gets the time the entity was created.
     * 
     * @return createdAt
     */
    public Date getCreatedAt() {
        return createdAt;
    }

    /**
     * Gets the size of the firmware manifest in bytes.
     * 
     * @return datafileSize
     */
    public long getDatafileSize() {
        return datafileSize;
    }

    /**
     * Gets the url of the asn.1 der-encoded firmware manifest binary.
     * 
     * @return datafileUrl
     */
    public String getDatafileUrl() {
        return datafileUrl;
    }

    /**
     * Gets digest (sha256, hex-encoded) of the payload to deliver to the device.
     * 
     * @return deliveredPayloadDigest
     */
    public String getDeliveredPayloadDigest() {
        return deliveredPayloadDigest;
    }

    /**
     * Gets the size in bytes of the payload to deliver to the device.
     * 
     * @return deliveredPayloadSize
     */
    public long getDeliveredPayloadSize() {
        return deliveredPayloadSize;
    }

    /**
     * Gets type of the payload to deliver to the device (full or delta image).
     * 
     * @return deliveredPayloadType
     */
    public FirmwareManifestDeliveredPayloadType getDeliveredPayloadType() {
        return deliveredPayloadType;
    }

    /**
     * Gets the url of the payload to deliver to the device.
     * 
     * @return deliveredPayloadUrl
     */
    public String getDeliveredPayloadUrl() {
        return deliveredPayloadUrl;
    }

    /**
     * Gets the description of the firmware manifest.
     * 
     * @return description
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the description of the firmware manifest.
     * 
     * <p>
     * Note: the length of the string has to be less than or equal to {@code 2000} to be valid
     * 
     * @param description
     *            The description of the firmware manifest.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Checks whether description value is valid.
     * 
     * @return true if the value is valid; false otherwise.
     */
    @SuppressWarnings("PMD.UselessParentheses")
    public boolean isDescriptionValid() {
        return (description == null || description.length() <= 2000);
    }

    /**
     * Gets the device class id.
     * 
     * @return deviceClass
     */
    public String getDeviceClass() {
        return deviceClass;
    }

    /**
     * Gets the device vendor id.
     * 
     * @return deviceVendor
     */
    public String getDeviceVendor() {
        return deviceVendor;
    }

    /**
     * Gets the firmware manifest id.
     * 
     * @return id
     */
    @Override
    public String getId() {
        return id;
    }

    /**
     * Sets the firmware manifest id.
     * 
     * <p>
     * Note: the length of the string has to match {@code /[A-Fa-f0-9]{32}/} to be valid
     * 
     * @param id
     *            The firmware manifest ID.
     */
    @Override
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Sets the firmware manifest id.
     * 
     * <p>
     * Similar to {@link #setId(String)}
     * <p>
     * Note: the length of the string has to match {@code /[A-Fa-f0-9]{32}/} to be valid
     * 
     * @param firmwareManifestId
     *            The firmware manifest ID.
     */
    @Internal
    public void setFirmwareManifestId(String firmwareManifestId) {
        setId(firmwareManifestId);
    }

    /**
     * Checks whether id value is valid.
     * 
     * @return true if the value is valid; false otherwise.
     */
    @SuppressWarnings("PMD.UselessParentheses")
    public boolean isIdValid() {
        return (id == null || id.matches("[A-Fa-f0-9]{32}"));
    }

    /**
     * Gets the key table of pre-shared keys for devices.
     * 
     * @return keyTableUrl
     */
    public String getKeyTableUrl() {
        return keyTableUrl;
    }

    /**
     * Gets version of the manifest schema (1 or 3).
     * 
     * @return manifestSchemaVersion
     */
    public FirmwareManifestSchemaVersion getManifestSchemaVersion() {
        return manifestSchemaVersion;
    }

    /**
     * Gets the name of the manifest.
     * 
     * @return name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the manifest.
     * 
     * <p>
     * Note: the length of the string has to be less than or equal to {@code 128} to be valid
     * 
     * @param name
     *            The name of the manifest.
     */
    @Required
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Checks whether name value is valid.
     * 
     * @return true if the value is valid; false otherwise.
     */
    @SuppressWarnings("PMD.UselessParentheses")
    public boolean isNameValid() {
        return name != null && (name.length() <= 128);
    }

    /**
     * Gets raw manifest in json format, parsed from asn.1 der encoding. fields may change. backwards compatibility is
     * not guaranteed. recommended for debugging only.
     * 
     * @return parsedRawManifest
     */
    public Object getParsedRawManifest() {
        return parsedRawManifest;
    }

    /**
     * Gets digest (sha256, hex-encoded) of the currently installed payload.
     * 
     * @return precursorPayloadDigest
     */
    public String getPrecursorPayloadDigest() {
        return precursorPayloadDigest;
    }

    /**
     * Gets the firmware manifest version as a timestamp.
     * 
     * @return timestamp
     */
    public Date getTimestamp() {
        return timestamp;
    }

    /**
     * Gets update priority, passed to the application callback when an update is performed. allows the application to
     * make application-specific decisions.
     * 
     * @return updatePriority
     */
    public long getUpdatePriority() {
        return updatePriority;
    }

    /**
     * Gets the time the entity was updated.
     * 
     * @return updatedAt
     */
    public Date getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Method generating the mapping needed for encoding or decoding filters.
     * 
     * <p>
     * Filters are used when listing models. See {@link com.arm.mbed.cloud.sdk.common.listing.filtering.Filters}
     * 
     * @return the mapping table
     */
    @Internal
    protected static final Map<String, String> generateFilterMapping() {
        final Map<String, String> filterMapping = new Hashtable<>(2);
        filterMapping.put("datafileUrl", "datafile");
        filterMapping.put("keyTableUrl", "key_table");
        return filterMapping;
    }

    /**
     * Returns a string representation of the object.
     * 
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "FirmwareManifest [createdAt=" + createdAt + ", datafileSize=" + datafileSize + ", datafileUrl="
               + datafileUrl + ", deliveredPayloadDigest=" + deliveredPayloadDigest + ", deliveredPayloadSize="
               + deliveredPayloadSize + ", deliveredPayloadType=" + deliveredPayloadType + ", deliveredPayloadUrl="
               + deliveredPayloadUrl + ", description=" + description + ", deviceClass=" + deviceClass
               + ", deviceVendor=" + deviceVendor + ", id=" + id + ", keyTableUrl=" + keyTableUrl
               + ", manifestSchemaVersion=" + manifestSchemaVersion + ", name=" + name + ", parsedRawManifest="
               + parsedRawManifest + ", precursorPayloadDigest=" + precursorPayloadDigest + ", timestamp=" + timestamp
               + ", updatePriority=" + updatePriority + ", updatedAt=" + updatedAt + "]";
    }

    /**
     * Calculates the hash code of this instance based on field values.
     * 
     * <p>
     * 
     * @see java.lang.Object#hashCode()
     * @return hash code
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((createdAt == null) ? 0 : createdAt.hashCode());
        result = prime * result + Objects.hashCode(Long.valueOf(datafileSize));
        result = prime * result + ((datafileUrl == null) ? 0 : datafileUrl.hashCode());
        result = prime * result + ((deliveredPayloadDigest == null) ? 0 : deliveredPayloadDigest.hashCode());
        result = prime * result + Objects.hashCode(Long.valueOf(deliveredPayloadSize));
        result = prime * result + ((deliveredPayloadType == null) ? 0 : deliveredPayloadType.hashCode());
        result = prime * result + ((deliveredPayloadUrl == null) ? 0 : deliveredPayloadUrl.hashCode());
        result = prime * result + ((description == null) ? 0 : description.hashCode());
        result = prime * result + ((deviceClass == null) ? 0 : deviceClass.hashCode());
        result = prime * result + ((deviceVendor == null) ? 0 : deviceVendor.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((keyTableUrl == null) ? 0 : keyTableUrl.hashCode());
        result = prime * result + ((manifestSchemaVersion == null) ? 0 : manifestSchemaVersion.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((parsedRawManifest == null) ? 0 : parsedRawManifest.hashCode());
        result = prime * result + ((precursorPayloadDigest == null) ? 0 : precursorPayloadDigest.hashCode());
        result = prime * result + ((timestamp == null) ? 0 : timestamp.hashCode());
        result = prime * result + Objects.hashCode(Long.valueOf(updatePriority));
        result = prime * result + ((updatedAt == null) ? 0 : updatedAt.hashCode());
        return result;
    }

    /**
     * Method to ensure {@link #equals(Object)} is correct.
     * 
     * <p>
     * Note: see this article: <a href="https://www.artima.com/lejava/articles/equality.html">canEqual()</a>
     * 
     * @param other
     *            another object.
     * @return true if the other object is an instance of the class in which canEqual is (re)defined, false otherwise.
     */
    protected boolean canEqual(Object other) {
        return other instanceof FirmwareManifest;
    }

    /**
     * Indicates whether some other object is "equal to" this one.
     * 
     * <p>
     * 
     * @see java.lang.Object#equals(java.lang.Object)
     * @param obj
     *            an object to compare with this instance.
     * @return true if this object is the same as the obj argument; false otherwise.
     */
    @Override
    @SuppressWarnings({ "PMD.ExcessiveMethodLength", "PMD.NcssMethodCount" })
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof FirmwareManifest)) {
            return false;
        }
        final FirmwareManifest other = (FirmwareManifest) obj;
        if (!other.canEqual(this)) {
            return false;
        }
        if (createdAt == null) {
            if (other.createdAt != null) {
                return false;
            }
        } else if (!createdAt.equals(other.createdAt)) {
            return false;
        }
        if (datafileSize != other.datafileSize) {
            return false;
        }
        if (datafileUrl == null) {
            if (other.datafileUrl != null) {
                return false;
            }
        } else if (!datafileUrl.equals(other.datafileUrl)) {
            return false;
        }
        if (deliveredPayloadDigest == null) {
            if (other.deliveredPayloadDigest != null) {
                return false;
            }
        } else if (!deliveredPayloadDigest.equals(other.deliveredPayloadDigest)) {
            return false;
        }
        if (deliveredPayloadSize != other.deliveredPayloadSize) {
            return false;
        }
        if (deliveredPayloadType != other.deliveredPayloadType) {
            return false;
        }
        if (deliveredPayloadUrl == null) {
            if (other.deliveredPayloadUrl != null) {
                return false;
            }
        } else if (!deliveredPayloadUrl.equals(other.deliveredPayloadUrl)) {
            return false;
        }
        if (description == null) {
            if (other.description != null) {
                return false;
            }
        } else if (!description.equals(other.description)) {
            return false;
        }
        if (deviceClass == null) {
            if (other.deviceClass != null) {
                return false;
            }
        } else if (!deviceClass.equals(other.deviceClass)) {
            return false;
        }
        if (deviceVendor == null) {
            if (other.deviceVendor != null) {
                return false;
            }
        } else if (!deviceVendor.equals(other.deviceVendor)) {
            return false;
        }
        if (id == null) {
            if (other.id != null) {
                return false;
            }
        } else if (!id.equals(other.id)) {
            return false;
        }
        if (keyTableUrl == null) {
            if (other.keyTableUrl != null) {
                return false;
            }
        } else if (!keyTableUrl.equals(other.keyTableUrl)) {
            return false;
        }
        if (manifestSchemaVersion != other.manifestSchemaVersion) {
            return false;
        }
        if (name == null) {
            if (other.name != null) {
                return false;
            }
        } else if (!name.equals(other.name)) {
            return false;
        }
        if (parsedRawManifest == null) {
            if (other.parsedRawManifest != null) {
                return false;
            }
        } else if (!parsedRawManifest.equals(other.parsedRawManifest)) {
            return false;
        }
        if (precursorPayloadDigest == null) {
            if (other.precursorPayloadDigest != null) {
                return false;
            }
        } else if (!precursorPayloadDigest.equals(other.precursorPayloadDigest)) {
            return false;
        }
        if (timestamp == null) {
            if (other.timestamp != null) {
                return false;
            }
        } else if (!timestamp.equals(other.timestamp)) {
            return false;
        }
        if (updatePriority != other.updatePriority) {
            return false;
        }
        if (updatedAt == null) {
            if (other.updatedAt != null) {
                return false;
            }
        } else if (!updatedAt.equals(other.updatedAt)) {
            return false;
        }
        return true;
    }

    /**
     * Checks whether the model is valid or not.
     * 
     * <p>
     * 
     * @see SdkModel#isValid()
     * @return true if the model is valid; false otherwise.
     */
    @Override
    public boolean isValid() {
        return isDescriptionValid() && isIdValid() && isNameValid();
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public FirmwareManifest clone() {
        return new FirmwareManifest(this);
    }
}
