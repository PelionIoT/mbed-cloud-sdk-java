// This file was generated by the Pelion SDK foundation code generator.
// This model class was autogenerated on Wed Jan 06 18:10:54 CST 2021. Feel free to change its contents as you wish.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import com.arm.mbed.cloud.sdk.annotations.DefaultValue;
import com.arm.mbed.cloud.sdk.annotations.Internal;
import com.arm.mbed.cloud.sdk.annotations.NotImplemented;
import com.arm.mbed.cloud.sdk.annotations.Preamble;
import com.arm.mbed.cloud.sdk.common.NotImplementedException;
import com.arm.mbed.cloud.sdk.common.listing.filtering.Filters;
import java.util.Date;

/**
 * Model for an update campaign.
 */
@Preamble(description = "Model for an update campaign.")
@SuppressWarnings("PMD.CyclomaticComplexity")
public class UpdateCampaign extends AbstractUpdateCampaign {
    /**
     * Serialisation Id.
     */
    private static final long serialVersionUID = -116737460021164L;

    protected double activationDelay;
    private Filters deviceFilterHelper;

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on all fields.
     * <p>
     * Note: Should not be used. Use {@link #UpdateCampaign()} instead.
     * 
     * @param deviceFilterHelper
     *            Helper for creating the device filter string. This helper can be used instead of setting device filter
     *            directly. This allows the campaign filter to be created in a way which is similar to the device
     *            listing filter.
     * @param activationDelay
     *            The amount of time (in seconds) the device waits to install the firmware update after the download is
     *            complete. For mesh campaigns only.
     * @param activeAt
     *            The time the campaign entered the active state.
     * @param approvalRequired
     *            Flag indicating whether approval is needed to start the campaign.
     * @param archivedAt
     *            The time the campaign was archived.
     * @param autostop
     *            Flag indicating whether the campaign should be auto-stopped on reaching a threshold.
     * @param autostopReason
     *            Text description of why a campaign failed to start or why a campaign stopped.
     * @param autostopSuccessPercent
     *            Percent of successful device updates to auto stop a one-shot campaign. For mesh campaigns, this is the
     *            percentage of devices connected to one border router that acknowledge their readiness to perform an
     *            update.
     * @param campaignStrategy
     *            How the campaign adds devices. A `one-shot` campaign does not add new devices after it has started. A
     *            `continuous` campaign means that devices may be added to the campaign after it has started. A `mesh`
     *            campaign adds only devices in the mesh network. The devices receive the update in groups, with each
     *            group consisting of a border router and nodes (the devices to update).
     *
     *            The default is `one-shot`.
     * @param createdAt
     *            The time the entity was created.
     * @param description
     *            An optional description of the campaign.
     * @param deviceFilter
     *            The filter for the devices the campaign targets. Refer to this using the filter ID.
     * @param finished
     *            The time the campaign finished.
     * @param id
     *            The campaign ID.
     * @param name
     *            The campaign name.
     * @param phase
     *            The phase of the campaign.
     * @param rootManifestId
     *            The ID of the manifest that will be sent to the device as part of the campaign.
     * @param rootManifestUrl
     *            The URL for the manifest that will be sent to the device as part of the campaign.
     * @param startedAt
     *            The time the campaign was started.
     * @param startingAt
     *            The time the campaign will be started.
     * @param stoppedAt
     *            The time the campaign was stopped.
     * @param stoppingAt
     *            The time the campaign will be stopped.
     * @param updatedAt
     *            The time the entity was updated.
     * @param when
     *            The scheduled start time for the campaign. The campaign will start within 1 minute when then start
     *            time has elapsed.
     */
    @Internal
    @SuppressWarnings("PMD.CyclomaticComplexity")
    public UpdateCampaign(Filters deviceFilterHelper, double activationDelay, Date activeAt, boolean approvalRequired,
                          Date archivedAt, boolean autostop, String autostopReason, double autostopSuccessPercent,
                          @DefaultValue("one-shot") UpdateCampaignStrategy campaignStrategy, Date createdAt,
                          String description, String deviceFilter, Date finished, String id, String name,
                          UpdateCampaignPhase phase, String rootManifestId, String rootManifestUrl, Date startedAt,
                          Date startingAt, Date stoppedAt, Date stoppingAt, Date updatedAt, Date when) {
        super(activeAt, approvalRequired, archivedAt, autostop, autostopReason, autostopSuccessPercent,
              campaignStrategy, createdAt, description, deviceFilter, finished, id, name, phase, rootManifestId,
              rootManifestUrl, startedAt, startingAt, stoppedAt, stoppingAt, updatedAt, when);
        this.activationDelay = activationDelay;
        setDeviceFilterHelper(deviceFilterHelper);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on a similar object.
     * <p>
     * Note: Should not be used. Use {@link #UpdateCampaign()} instead.
     * 
     * @param updateCampaign
     *            an update campaign.
     */
    @Internal
    public UpdateCampaign(UpdateCampaign updateCampaign) {
        this(updateCampaign == null ? (Filters) null : updateCampaign.getDeviceFilterHelper(),
             updateCampaign == null ? 0.0 : updateCampaign.activationDelay,
             updateCampaign == null ? new Date() : updateCampaign.activeAt,
             updateCampaign != null && updateCampaign.approvalRequired,
             updateCampaign == null ? new Date() : updateCampaign.archivedAt,
             updateCampaign != null && updateCampaign.autostop,
             updateCampaign == null ? (String) null : updateCampaign.autostopReason,
             updateCampaign == null ? 0.0 : updateCampaign.autostopSuccessPercent,
             updateCampaign == null ? UpdateCampaignStrategy.getValue("one-shot") : updateCampaign.campaignStrategy,
             updateCampaign == null ? new Date() : updateCampaign.createdAt,
             updateCampaign == null ? (String) null : updateCampaign.description,
             updateCampaign == null ? (String) null : updateCampaign.deviceFilter,
             updateCampaign == null ? new Date() : updateCampaign.finished,
             updateCampaign == null ? (String) null : updateCampaign.id,
             updateCampaign == null ? (String) null : updateCampaign.name,
             updateCampaign == null ? UpdateCampaignPhase.getDefault() : updateCampaign.phase,
             updateCampaign == null ? (String) null : updateCampaign.rootManifestId,
             updateCampaign == null ? (String) null : updateCampaign.rootManifestUrl,
             updateCampaign == null ? new Date() : updateCampaign.startedAt,
             updateCampaign == null ? new Date() : updateCampaign.startingAt,
             updateCampaign == null ? new Date() : updateCampaign.stoppedAt,
             updateCampaign == null ? new Date() : updateCampaign.stoppingAt,
             updateCampaign == null ? new Date() : updateCampaign.updatedAt,
             updateCampaign == null ? new Date() : updateCampaign.when);
    }

    /**
     * Constructor.
     */
    public UpdateCampaign() {
        this((Filters) null, 0.0, new Date(), false, new Date(), false, (String) null, 0.0,
             UpdateCampaignStrategy.getValue("one-shot"), new Date(), (String) null, (String) null, new Date(),
             (String) null, (String) null, UpdateCampaignPhase.getDefault(), (String) null, (String) null, new Date(),
             new Date(), new Date(), new Date(), new Date(), new Date());
    }

    /**
     * Constructor.
     * 
     * <p>
     * Constructor based on object identifier.
     * <p>
     * 
     * @param id
     *            The campaign ID.
     */
    public UpdateCampaign(String id) {
        this();
        setId(id);
    }

    /**
     * Internal constructor.
     * 
     * <p>
     * Constructor based on read-only fields.
     * <p>
     * Note: Should not be used. Use {@link #UpdateCampaign()} instead.
     * 
     * @param activeAt
     *            The time the campaign entered the active state.
     * @param archivedAt
     *            The time the campaign was archived.
     * @param autostopReason
     *            Text description of why a campaign failed to start or why a campaign stopped.
     * @param createdAt
     *            The time the entity was created.
     * @param finished
     *            The time the campaign finished.
     * @param phase
     *            The phase of the campaign.
     * @param rootManifestUrl
     *            The URL for the manifest that will be sent to the device as part of the campaign.
     * @param startedAt
     *            The time the campaign was started.
     * @param startingAt
     *            The time the campaign will be started.
     * @param stoppedAt
     *            The time the campaign was stopped.
     * @param stoppingAt
     *            The time the campaign will be stopped.
     * @param updatedAt
     *            The time the entity was updated.
     */
    @Internal
    @SuppressWarnings("PMD.CyclomaticComplexity")
    public UpdateCampaign(Date activeAt, Date archivedAt, String autostopReason, Date createdAt, Date finished,
                          UpdateCampaignPhase phase, String rootManifestUrl, Date startedAt, Date startingAt,
                          Date stoppedAt, Date stoppingAt, Date updatedAt) {
        this((Filters) null, 0.0, activeAt, false, archivedAt, false, autostopReason, 0.0,
             UpdateCampaignStrategy.getValue("one-shot"), createdAt, (String) null, (String) null, finished,
             (String) null, (String) null, phase, (String) null, rootManifestUrl, startedAt, startingAt, stoppedAt,
             stoppingAt, updatedAt, new Date());
    }

    /**
     * Gets helper for creating the device filter string.
     * 
     * <p>
     * This helper can be used instead of setting device filter directly. This allows the campaign filter to be created
     * in a way which is similar to the device listing filter.
     * 
     * @return deviceFilterHelper
     */
    @NotImplemented
    public Filters getDeviceFilterHelper() throws NotImplementedException {
        return deviceFilterHelper;
    }

    /**
     * Sets helper for creating the device filter string.
     * 
     * <p>
     * This helper can be used instead of setting device filter directly. This allows the campaign filter to be created
     * in a way which is similar to the device listing filter.
     * 
     * @param deviceFilterHelper
     *            Helper for creating the device filter string. This helper can be used instead of setting device filter
     *            directly. This allows the campaign filter to be created in a way which is similar to the device
     *            listing filter.
     */
    @NotImplemented
    public void setDeviceFilterHelper(Filters deviceFilterHelper) throws NotImplementedException {
        this.deviceFilterHelper = deviceFilterHelper;
    }

    /**
     * Returns a string representation of the object.
     * 
     * <p>
     * 
     * @see java.lang.Object#toString()
     * @return the string representation
     */
    @Override
    public String toString() {
        return "UpdateCampaign [deviceFilterHelper=" + getDeviceFilterHelper() + ", activationDelay=" + activationDelay
               + ", activeAt=" + activeAt + ", approvalRequired=" + approvalRequired + ", archivedAt=" + archivedAt
               + ", autostop=" + autostop + ", autostopReason=" + autostopReason + ", autostopSuccessPercent="
               + autostopSuccessPercent + ", campaignStrategy=" + campaignStrategy + ", createdAt=" + createdAt
               + ", description=" + description + ", deviceFilter=" + deviceFilter + ", finished=" + finished + ", id="
               + id + ", name=" + name + ", phase=" + phase + ", rootManifestId=" + rootManifestId
               + ", rootManifestUrl=" + rootManifestUrl + ", startedAt=" + startedAt + ", startingAt=" + startingAt
               + ", stoppedAt=" + stoppedAt + ", stoppingAt=" + stoppingAt + ", updatedAt=" + updatedAt + ", when="
               + when + "]";
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        long temp;
        temp = Double.doubleToLongBits(activationDelay);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!super.equals(obj)) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final UpdateCampaign other = (UpdateCampaign) obj;
        if (Double.doubleToLongBits(activationDelay) != Double.doubleToLongBits(other.activationDelay)) {
            return false;
        }
        return true;
    }

    /**
     * Clones this instance.
     * 
     * <p>
     * 
     * @see java.lang.Object#clone()
     * @return a cloned instance
     */
    @Override
    public UpdateCampaign clone() {
        return new UpdateCampaign(this);
    }

    /**
     * Method to ensure {@link #equals(Object)} is correct.
     * 
     * <p>
     * Note: see this article: <a href="https://www.artima.com/lejava/articles/equality.html">canEqual()</a>
     * 
     * @param other
     *            another object.
     * @return true if the other object is an instance of the class in which canEqual is (re)defined, false otherwise.
     */
    @Override
    protected boolean canEqual(Object other) {
        return other instanceof UpdateCampaign;
    }

    public double getActivationDelay() {
        return activationDelay;
    }

    public void setActivationDelay(double activationDelay) {
        this.activationDelay = activationDelay;
    }
}
