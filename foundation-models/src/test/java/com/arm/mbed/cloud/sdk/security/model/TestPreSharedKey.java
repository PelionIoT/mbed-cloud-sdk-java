// This file was generated by the Pelion SDK foundation code generator.
// This unit test suite was autogenerated on Thu May 02 10:47:48 UTC 2019. Feel free to change its contents as you wish.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.Date;

import org.junit.Test;

/**
 * Unit tests for Model PreSharedKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPreSharedKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            PreSharedKey presharedkey1 = new PreSharedKey(">;bC:~='Lbx/O\\\\n[Bv-H?",
                                                          "da720f6d-d32c-42bd-b5e8-76a9055d1e9e",
                                                          new Date(1556794072867L));
            PreSharedKey presharedkey2 = presharedkey1.clone();
            assertNotNull(presharedkey1);
            assertNotNull(presharedkey2);
            assertNotSame(presharedkey2, presharedkey1);
            assertEquals(presharedkey2, presharedkey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }

    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            PreSharedKey presharedkey1 = new PreSharedKey("`7LwU=&lneeG#2!,Ek", "1a61ef9b-afb9-4961-8469-c24fc6ed6e53",
                                                          new Date(1556794071670L));
            PreSharedKey presharedkey2 = new PreSharedKey("`7LwU=&lneeG#2!,Ek", "1a61ef9b-afb9-4961-8469-c24fc6ed6e53",
                                                          new Date(1556794071670L));
            assertNotNull(presharedkey1);
            assertNotNull(presharedkey2);
            assertNotSame(presharedkey2, presharedkey1);
            assertEquals(presharedkey2, presharedkey1);
            assertEquals(presharedkey2.hashCode(), presharedkey1.hashCode());
            int hashCode = presharedkey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, presharedkey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    // @Test
    public void testIsValid() {
        PreSharedKey presharedkey = new PreSharedKey("|-bk5]a;BJt6xF5A5");
        assertTrue(presharedkey.isValid());
        PreSharedKey presharedkeyInvalid = new PreSharedKey("fo#wJn_JF_nFD>`\tQ7j(n{s7r�?㔑H1_FBxINoj2CwF(oHzw\u001fe`nAF䭖nj猋Csz(An(j");
        assertFalse(presharedkeyInvalid.isValid());

    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            PreSharedKey presharedkey1 = new PreSharedKey("$$KZx!1=suzSZe\\\\9[",
                                                          "dfca45d9-20ea-4524-836b-731f9ea1fbe9",
                                                          new Date(1556794076117L));
            PreSharedKey presharedkey2 = new PreSharedKey("$$KZx!1=suzSZe\\\\9[",
                                                          "dfca45d9-20ea-4524-836b-731f9ea1fbe9",
                                                          new Date(1556794076117L));
            PreSharedKey presharedkey3 = new PreSharedKey("H* `N/}hxrv)Nh{1D", "f20d7eb5-50e7-4765-b31b-da0c33aa4824",
                                                          new Date(1556794076658L));
            assertNotNull(presharedkey1);
            assertNotNull(presharedkey2);
            assertNotNull(presharedkey3);
            assertNotSame(presharedkey2, presharedkey1);
            assertNotSame(presharedkey3, presharedkey1);
            assertEquals(presharedkey2, presharedkey1);
            assertEquals(presharedkey2, presharedkey1);
            assertEquals(presharedkey1, presharedkey2);
            assertEquals(presharedkey1, presharedkey1);
            assertFalse(presharedkey1.equals(null));
            assertNotEquals(presharedkey3, presharedkey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }

    }
}
