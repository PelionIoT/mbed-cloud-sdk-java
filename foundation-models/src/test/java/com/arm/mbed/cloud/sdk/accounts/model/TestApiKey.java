// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ApiKey.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestApiKey {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ApiKey apikey1 = new ApiKey("3b2c98a6b0d3341e5184f0f766dde798", new Date(1610683989613L), -64, null,
                                        "3b2c98a6b0d3341e5184f0f766dde798", "11b44b65-9b40-4b7c-a159-34e3111d8824", 83,
                                        "46504163-e023-44a4-bf35-22cf7a294db2", "3b2c98a6b0d3341e5184f0f766dde798",
                                        ApiKeyStatus.getDefault(), new Date(1610683993060L));
            ApiKey apikey2 = apikey1.clone();
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ApiKey apikey1 = new ApiKey("3b2c98a6b0d3341e5184f0f766dde798", new Date(1610683989985L), 115, null,
                                        "3b2c98a6b0d3341e5184f0f766dde798", "113e3047-b753-4b5c-b87e-a87ee20e44d3", 54,
                                        "29756c9e-9f4d-4a8d-a2e8-2faae777daee", "3b2c98a6b0d3341e5184f0f766dde798",
                                        ApiKeyStatus.getDefault(), new Date(1610683993159L));
            ApiKey apikey2 = new ApiKey("3b2c98a6b0d3341e5184f0f766dde798", new Date(1610683989985L), 115, null,
                                        "3b2c98a6b0d3341e5184f0f766dde798", "113e3047-b753-4b5c-b87e-a87ee20e44d3", 54,
                                        "29756c9e-9f4d-4a8d-a2e8-2faae777daee", "3b2c98a6b0d3341e5184f0f766dde798",
                                        ApiKeyStatus.getDefault(), new Date(1610683993159L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotSame(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2.hashCode(), apikey1.hashCode());
            int hashCode = apikey1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, apikey1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ApiKey apikey = new ApiKey("3b2c98a6b0d3341e5184f0f766dde798", new Date(1610683992861L), -17, null,
                                   "3b2c98a6b0d3341e5184f0f766dde798", "2f5bfefa-2900-49d3-9f40-1dda7d362dde", -46,
                                   "0e635f0b-30a6-47e5-8e07-e42b58676ef0", "3b2c98a6b0d3341e5184f0f766dde798",
                                   ApiKeyStatus.getDefault(), new Date(1610683987458L));
        assertTrue(apikey.isValid());
        ApiKey apikeyInvalid = new ApiKey("\u001aëº³@ê©µ@çª¥VUD\u000eA.L=GZâ¼”ä?ºW \u0011\u000fæ•ƒæ³?<R>ëœ²â„??â?£T/<-ç¸­ ì¨Š\u0007Y'ìª¹å?²î—»//,ä”‘X,Q\u000báª”Sê?˜à¸¾=í”—(,ä?–^\u000e",
                                          new Date(1610683986604L), -47, null,
                                          "\u001aëº³@ê©µ@çª¥VUD\u000eA.L=GZâ¼”ä?ºW \u0011\u000fæ•ƒæ³?<R>ëœ²â„??â?£T/<-ç¸­ ì¨Š\u0007Y'ìª¹å?²î—»//,ä”‘X,Q\u000báª”Sê?˜à¸¾=í”—(,ä?–^\u000e",
                                          "788f151b-1152-434a-aad8-dd6ba4e056dc", 44, null,
                                          "\u001aëº³@ê©µ@çª¥VUD\u000eA.L=GZâ¼”ä?ºW \u0011\u000fæ•ƒæ³?<R>ëœ²â„??â?£T/<-ç¸­ ì¨Š\u0007Y'ìª¹å?²î—»//,ä”‘X,Q\u000báª”Sê?˜à¸¾=í”—(,ä?–^\u000e",
                                          ApiKeyStatus.getDefault(), new Date(1610683988271L));
        assertFalse(apikeyInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ApiKey apikey1 = new ApiKey("3b2c98a6b0d3341e5184f0f766dde798", new Date(1610683991289L), -43, null,
                                        "3b2c98a6b0d3341e5184f0f766dde798", "70bbb5f8-e45a-4d02-a158-73a8da912e15", -92,
                                        "722ef426-618f-4e76-a9ca-8b7f4d02aad7", "3b2c98a6b0d3341e5184f0f766dde798",
                                        ApiKeyStatus.getDefault(), new Date(1610683989660L));
            ApiKey apikey2 = new ApiKey("3b2c98a6b0d3341e5184f0f766dde798", new Date(1610683991289L), -43, null,
                                        "3b2c98a6b0d3341e5184f0f766dde798", "70bbb5f8-e45a-4d02-a158-73a8da912e15", -92,
                                        "722ef426-618f-4e76-a9ca-8b7f4d02aad7", "3b2c98a6b0d3341e5184f0f766dde798",
                                        ApiKeyStatus.getDefault(), new Date(1610683989660L));
            ApiKey apikey3 = new ApiKey("3b2c98a6b0d3341e5184f0f766dde798", new Date(1610683992223L), -113, null,
                                        "3b2c98a6b0d3341e5184f0f766dde798", "4b96c1db-8511-4175-ae6e-caa89ab1074a", 116,
                                        "dc213917-ff0e-4951-8312-eb93349b82c9", "3b2c98a6b0d3341e5184f0f766dde798",
                                        ApiKeyStatus.getDefault(), new Date(1610683993461L));
            assertNotNull(apikey1);
            assertNotNull(apikey2);
            assertNotNull(apikey3);
            assertNotSame(apikey2, apikey1);
            assertNotSame(apikey3, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey2, apikey1);
            assertEquals(apikey1, apikey2);
            assertEquals(apikey1, apikey1);
            assertFalse(apikey1.equals(null));
            assertNotEquals(apikey3, apikey1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
