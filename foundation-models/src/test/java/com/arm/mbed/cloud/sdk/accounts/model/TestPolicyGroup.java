// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model PolicyGroup.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestPolicyGroup {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            PolicyGroup policygroup1 = new PolicyGroup("3b2c98a6b0d3341e5184f0f766dde798", -27, 20,
                                                       new Date(1610683987315L), "3b2c98a6b0d3341e5184f0f766dde798",
                                                       "8df478f2-37db-4b49-b8d2-0bf670d7912d", new Date(1610683993938L),
                                                       -125);
            PolicyGroup policygroup2 = policygroup1.clone();
            assertNotNull(policygroup1);
            assertNotNull(policygroup2);
            assertNotSame(policygroup2, policygroup1);
            assertEquals(policygroup2, policygroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            PolicyGroup policygroup1 = new PolicyGroup("3b2c98a6b0d3341e5184f0f766dde798", 6, -39,
                                                       new Date(1610683990840L), "3b2c98a6b0d3341e5184f0f766dde798",
                                                       "b678a38b-cb2a-469a-ad6f-37aa8225d271", new Date(1610683989858L),
                                                       14);
            PolicyGroup policygroup2 = new PolicyGroup("3b2c98a6b0d3341e5184f0f766dde798", 6, -39,
                                                       new Date(1610683990840L), "3b2c98a6b0d3341e5184f0f766dde798",
                                                       "b678a38b-cb2a-469a-ad6f-37aa8225d271", new Date(1610683989858L),
                                                       14);
            assertNotNull(policygroup1);
            assertNotNull(policygroup2);
            assertNotSame(policygroup2, policygroup1);
            assertEquals(policygroup2, policygroup1);
            assertEquals(policygroup2.hashCode(), policygroup1.hashCode());
            int hashCode = policygroup1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, policygroup1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        PolicyGroup policygroup = new PolicyGroup("3b2c98a6b0d3341e5184f0f766dde798", 99, 103, new Date(1610683987065L),
                                                  "3b2c98a6b0d3341e5184f0f766dde798",
                                                  "5aef8a7e-3582-4636-ad22-87eac0754975", new Date(1610683994204L), 31);
        assertTrue(policygroup.isValid());
        PolicyGroup policygroupInvalid = new PolicyGroup("\u001aëº³@ê©µ@çª¥VUD\u000eA.L=GZâ¼”ä?ºW \u0011\u000fæ•ƒæ³?<R>ëœ²â„??â?£T/<-ç¸­ ì¨Š\u0007Y'ìª¹å?²î—»//,ä”‘X,Q\u000báª”Sê?˜à¸¾=í”—(,ä?–^\u000e",
                                                         36, 121, new Date(1610683994860L),
                                                         "\u001aëº³@ê©µ@çª¥VUD\u000eA.L=GZâ¼”ä?ºW \u0011\u000fæ•ƒæ³?<R>ëœ²â„??â?£T/<-ç¸­ ì¨Š\u0007Y'ìª¹å?²î—»//,ä”‘X,Q\u000báª”Sê?˜à¸¾=í”—(,ä?–^\u000e",
                                                         null, new Date(1610683989703L), 61);
        assertFalse(policygroupInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            PolicyGroup policygroup1 = new PolicyGroup("3b2c98a6b0d3341e5184f0f766dde798", -31, -71,
                                                       new Date(1610683987011L), "3b2c98a6b0d3341e5184f0f766dde798",
                                                       "ace4c45e-27f4-4db2-8614-743e327296fa", new Date(1610683992804L),
                                                       114);
            PolicyGroup policygroup2 = new PolicyGroup("3b2c98a6b0d3341e5184f0f766dde798", -31, -71,
                                                       new Date(1610683987011L), "3b2c98a6b0d3341e5184f0f766dde798",
                                                       "ace4c45e-27f4-4db2-8614-743e327296fa", new Date(1610683992804L),
                                                       114);
            PolicyGroup policygroup3 = new PolicyGroup("3b2c98a6b0d3341e5184f0f766dde798", -113, 74,
                                                       new Date(1610683993364L), "3b2c98a6b0d3341e5184f0f766dde798",
                                                       "10a0f4ee-8ae4-45e4-a786-6ef210b39a51", new Date(1610683987738L),
                                                       -99);
            assertNotNull(policygroup1);
            assertNotNull(policygroup2);
            assertNotNull(policygroup3);
            assertNotSame(policygroup2, policygroup1);
            assertNotSame(policygroup3, policygroup1);
            assertEquals(policygroup2, policygroup1);
            assertEquals(policygroup2, policygroup1);
            assertEquals(policygroup1, policygroup2);
            assertEquals(policygroup1, policygroup1);
            assertFalse(policygroup1.equals(null));
            assertNotEquals(policygroup3, policygroup1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
