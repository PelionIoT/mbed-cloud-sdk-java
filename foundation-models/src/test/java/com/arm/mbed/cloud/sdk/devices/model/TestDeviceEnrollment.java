// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.devices.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model DeviceEnrollment.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestDeviceEnrollment {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("c4f78826-35a5-4b22-8ee5-17e6c8e57be4",
                                                                      new Date(1610683993507L),
                                                                      new Date(1610683989223L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4",
                                                                      "A-g9al6k5oEcqu5bkRDl4hY1cjzc997:Tn2pR:1rY49ybb2LtdNoypU6L7j1G507lguVb:Q51s0Z2NimdUwah7R6d76HsYUkg",
                                                                      new Date(1610683992443L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4");
            DeviceEnrollment deviceenrollment2 = deviceenrollment1.clone();
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("26d7e1a9-d15b-42b0-b477-bbba5b502ef4",
                                                                      new Date(1610683991980L),
                                                                      new Date(1610683985691L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4",
                                                                      "A-g9al6k5oEcqu5bkRDl4hY1cjzc997:Tn2pR:1rY49ybb2LtdNoypU6L7j1G507lguVb:Q51s0Z2NimdUwah7R6d76HsYUkg",
                                                                      new Date(1610683987954L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("26d7e1a9-d15b-42b0-b477-bbba5b502ef4",
                                                                      new Date(1610683991980L),
                                                                      new Date(1610683985691L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4",
                                                                      "A-g9al6k5oEcqu5bkRDl4hY1cjzc997:Tn2pR:1rY49ybb2LtdNoypU6L7j1G507lguVb:Q51s0Z2NimdUwah7R6d76HsYUkg",
                                                                      new Date(1610683987954L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2.hashCode(), deviceenrollment1.hashCode());
            int hashCode = deviceenrollment1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, deviceenrollment1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        DeviceEnrollment deviceenrollment = new DeviceEnrollment("a3a73d80-d679-4565-a004-c04f90484071",
                                                                 new Date(1610683992522L), new Date(1610683988635L),
                                                                 "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4",
                                                                 "A-g9al6k5oEcqu5bkRDl4hY1cjzc997:Tn2pR:1rY49ybb2LtdNoypU6L7j1G507lguVb:Q51s0Z2NimdUwah7R6d76HsYUkg",
                                                                 new Date(1610683994215L),
                                                                 "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4");
        assertTrue(deviceenrollment.isValid());
        DeviceEnrollment deviceenrollmentInvalid = new DeviceEnrollment("cefeead4-6661-4eda-aee4-c6db16406565",
                                                                        new Date(1610683992831L),
                                                                        new Date(1610683987746L),
                                                                        "RCwB2W>weRCM][eZRQBEEtc8;cM8M^<뵆]wTXEweBwHeM#UCJ_wBe2Cc=8eCe?$$KM",
                                                                        null, new Date(1610683992883L),
                                                                        "RCwB2W>weRCM][eZRQBEEtc8;cM8M^<뵆]wTXEweBwHeM#UCJ_wBe2Cc=8eCe?$$KM");
        assertFalse(deviceenrollmentInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            DeviceEnrollment deviceenrollment1 = new DeviceEnrollment("a238b432-3026-4ab9-b6e8-a6f41a1d4fbc",
                                                                      new Date(1610683990342L),
                                                                      new Date(1610683988428L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4",
                                                                      "A-g9al6k5oEcqu5bkRDl4hY1cjzc997:Tn2pR:1rY49ybb2LtdNoypU6L7j1G507lguVb:Q51s0Z2NimdUwah7R6d76HsYUkg",
                                                                      new Date(1610683988040L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4");
            DeviceEnrollment deviceenrollment2 = new DeviceEnrollment("a238b432-3026-4ab9-b6e8-a6f41a1d4fbc",
                                                                      new Date(1610683990342L),
                                                                      new Date(1610683988428L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4",
                                                                      "A-g9al6k5oEcqu5bkRDl4hY1cjzc997:Tn2pR:1rY49ybb2LtdNoypU6L7j1G507lguVb:Q51s0Z2NimdUwah7R6d76HsYUkg",
                                                                      new Date(1610683988040L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4");
            DeviceEnrollment deviceenrollment3 = new DeviceEnrollment("4a3c1d93-6818-4636-9d5f-589c6a7bf834",
                                                                      new Date(1610683990380L),
                                                                      new Date(1610683990785L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4",
                                                                      "A-g9al6k5oEcqu5bkRDl4hY1cjzc997:Tn2pR:1rY49ybb2LtdNoypU6L7j1G507lguVb:Q51s0Z2NimdUwah7R6d76HsYUkg",
                                                                      new Date(1610683986763L),
                                                                      "v9PPaz1f91YA6aS0uxuDdby3N77O5LL4");
            assertNotNull(deviceenrollment1);
            assertNotNull(deviceenrollment2);
            assertNotNull(deviceenrollment3);
            assertNotSame(deviceenrollment2, deviceenrollment1);
            assertNotSame(deviceenrollment3, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment2, deviceenrollment1);
            assertEquals(deviceenrollment1, deviceenrollment2);
            assertEquals(deviceenrollment1, deviceenrollment1);
            assertFalse(deviceenrollment1.equals(null));
            assertNotEquals(deviceenrollment3, deviceenrollment1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
