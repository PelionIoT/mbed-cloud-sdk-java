// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model LoginHistory.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestLoginHistory {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1610683993287L),
                                                          "3815d951-6d65-4e4b-a415-734b57268190", false,
                                                          "8585a03c-06d8-4dad-ab43-bff46877a58b");
            LoginHistory loginhistory2 = loginhistory1.clone();
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1610683986301L),
                                                          "be826a47-5bd7-429c-a8ae-04848d2fc319", false,
                                                          "ca9798d3-33e3-4093-873d-49732cb045ec");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1610683986301L),
                                                          "be826a47-5bd7-429c-a8ae-04848d2fc319", false,
                                                          "ca9798d3-33e3-4093-873d-49732cb045ec");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotSame(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2.hashCode(), loginhistory1.hashCode());
            int hashCode = loginhistory1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, loginhistory1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        LoginHistory loginhistory = new LoginHistory(new Date(1610683989292L), "7b05728b-bc6c-4f92-8041-06e52a01c17a",
                                                     true, "ed0fbfe8-f656-49c4-8d52-b0ca007b65c1");
        assertTrue(loginhistory.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            LoginHistory loginhistory1 = new LoginHistory(new Date(1610683993727L),
                                                          "a68eb840-83de-4b31-a447-7000bff5a5e4", true,
                                                          "cb51353a-3eec-4d72-9ea0-5b5188dee8f1");
            LoginHistory loginhistory2 = new LoginHistory(new Date(1610683993727L),
                                                          "a68eb840-83de-4b31-a447-7000bff5a5e4", true,
                                                          "cb51353a-3eec-4d72-9ea0-5b5188dee8f1");
            LoginHistory loginhistory3 = new LoginHistory(new Date(1610683991898L),
                                                          "3dc35c40-791d-4d24-a3fb-bc697f08c7a1", true,
                                                          "7d776c5d-7a54-48b7-b52d-a0bcb78e9c1b");
            assertNotNull(loginhistory1);
            assertNotNull(loginhistory2);
            assertNotNull(loginhistory3);
            assertNotSame(loginhistory2, loginhistory1);
            assertNotSame(loginhistory3, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory2, loginhistory1);
            assertEquals(loginhistory1, loginhistory2);
            assertEquals(loginhistory1, loginhistory1);
            assertFalse(loginhistory1.equals(null));
            assertNotEquals(loginhistory3, loginhistory1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
