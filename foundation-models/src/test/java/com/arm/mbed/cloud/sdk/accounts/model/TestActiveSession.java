// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ActiveSession.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestActiveSession {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ActiveSession activesession1 = new ActiveSession("3b2c98a6b0d3341e5184f0f766dde798",
                                                             new Date(1610683986409L),
                                                             "d68d8c47-4067-4ff5-811b-f095a1a4ddef",
                                                             new Date(1610683989563L),
                                                             "8c8e5b80-fcda-43bb-a1cc-02fd4e79825f",
                                                             "df55ccbc-5162-4611-9497-9da77479edb0");
            ActiveSession activesession2 = activesession1.clone();
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ActiveSession activesession1 = new ActiveSession("3b2c98a6b0d3341e5184f0f766dde798",
                                                             new Date(1610683993392L),
                                                             "efd25a42-5eb8-413d-a994-1612e5acb43d",
                                                             new Date(1610683994169L),
                                                             "80ee6fef-4236-4e90-ae2a-af0440aaea21",
                                                             "eea10221-4692-4cee-8245-d56c5179f36d");
            ActiveSession activesession2 = new ActiveSession("3b2c98a6b0d3341e5184f0f766dde798",
                                                             new Date(1610683993392L),
                                                             "efd25a42-5eb8-413d-a994-1612e5acb43d",
                                                             new Date(1610683994169L),
                                                             "80ee6fef-4236-4e90-ae2a-af0440aaea21",
                                                             "eea10221-4692-4cee-8245-d56c5179f36d");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotSame(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2.hashCode(), activesession1.hashCode());
            int hashCode = activesession1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, activesession1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ActiveSession activesession = new ActiveSession("3b2c98a6b0d3341e5184f0f766dde798", new Date(1610683987420L),
                                                        "d7b261e8-068f-49e0-9229-a3b48cfcf5c1",
                                                        new Date(1610683987451L),
                                                        "322c0c85-3e80-4cd7-8827-7a4921e2198c",
                                                        "02879c4a-70db-4c8d-97e2-70e1b5c878e0");
        assertTrue(activesession.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ActiveSession activesession1 = new ActiveSession("3b2c98a6b0d3341e5184f0f766dde798",
                                                             new Date(1610683986294L),
                                                             "e33cdc48-3830-4759-92dc-935f531f028c",
                                                             new Date(1610683990019L),
                                                             "3349362c-9f7c-4a85-9fb5-9066c7b1532f",
                                                             "cb99de9a-eb3a-4cbe-9be6-e04ec48da386");
            ActiveSession activesession2 = new ActiveSession("3b2c98a6b0d3341e5184f0f766dde798",
                                                             new Date(1610683986294L),
                                                             "e33cdc48-3830-4759-92dc-935f531f028c",
                                                             new Date(1610683990019L),
                                                             "3349362c-9f7c-4a85-9fb5-9066c7b1532f",
                                                             "cb99de9a-eb3a-4cbe-9be6-e04ec48da386");
            ActiveSession activesession3 = new ActiveSession("3b2c98a6b0d3341e5184f0f766dde798",
                                                             new Date(1610683993266L),
                                                             "2a5b498d-76ee-4682-a98b-e8df7c8f64e0",
                                                             new Date(1610683993126L),
                                                             "845c561b-ddab-41c7-918e-60f786c6f7b9",
                                                             "8711f27b-4b67-4d71-b5db-0626a6533f07");
            assertNotNull(activesession1);
            assertNotNull(activesession2);
            assertNotNull(activesession3);
            assertNotSame(activesession2, activesession1);
            assertNotSame(activesession3, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession2, activesession1);
            assertEquals(activesession1, activesession2);
            assertEquals(activesession1, activesession1);
            assertFalse(activesession1.equals(null));
            assertNotEquals(activesession3, activesession1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
