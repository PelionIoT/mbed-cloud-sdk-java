// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model IdentityProvider.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestIdentityProvider {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            IdentityProvider identityprovider1 = new IdentityProvider("3b2c98a6b0d3341e5184f0f766dde798",
                                                                      new Date(1610683991680L),
                                                                      "e33650b5-4100-42c8-bf55-5eaadb61a070",
                                                                      "3b2c98a6b0d3341e5184f0f766dde798",
                                                                      IdentityProviderType.getDefault(), false,
                                                                      "089500b5-ec26-4bda-a215-61b7b1e9ab35",
                                                                      new OidcRequest(), null,
                                                                      IdentityProviderStatus.getDefault(),
                                                                      new Date(1610683991607L));
            IdentityProvider identityprovider2 = identityprovider1.clone();
            assertNotNull(identityprovider1);
            assertNotNull(identityprovider2);
            assertNotSame(identityprovider2, identityprovider1);
            assertEquals(identityprovider2, identityprovider1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            IdentityProvider identityprovider1 = new IdentityProvider("3b2c98a6b0d3341e5184f0f766dde798",
                                                                      new Date(1610683987208L),
                                                                      "c1cc198d-f5e5-45bd-84ce-0b3fff93eb49",
                                                                      "3b2c98a6b0d3341e5184f0f766dde798",
                                                                      IdentityProviderType.getDefault(), true,
                                                                      "c375bfb0-6d42-4c15-8f45-c31ab68b7bb1",
                                                                      new OidcRequest(), null,
                                                                      IdentityProviderStatus.getDefault(),
                                                                      new Date(1610683988559L));
            IdentityProvider identityprovider2 = new IdentityProvider("3b2c98a6b0d3341e5184f0f766dde798",
                                                                      new Date(1610683987208L),
                                                                      "c1cc198d-f5e5-45bd-84ce-0b3fff93eb49",
                                                                      "3b2c98a6b0d3341e5184f0f766dde798",
                                                                      IdentityProviderType.getDefault(), true,
                                                                      "c375bfb0-6d42-4c15-8f45-c31ab68b7bb1",
                                                                      new OidcRequest(), null,
                                                                      IdentityProviderStatus.getDefault(),
                                                                      new Date(1610683988559L));
            assertNotNull(identityprovider1);
            assertNotNull(identityprovider2);
            assertNotSame(identityprovider2, identityprovider1);
            assertEquals(identityprovider2, identityprovider1);
            assertEquals(identityprovider2.hashCode(), identityprovider1.hashCode());
            int hashCode = identityprovider1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, identityprovider1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        IdentityProvider identityprovider = new IdentityProvider("3b2c98a6b0d3341e5184f0f766dde798",
                                                                 new Date(1610683987325L),
                                                                 "b0219c14-d678-4682-84de-61f1eecbb3ce",
                                                                 "3b2c98a6b0d3341e5184f0f766dde798",
                                                                 IdentityProviderType.getDefault(), true,
                                                                 "a6b69a68-e049-4e2a-97db-8f28b9bf9c05",
                                                                 new OidcRequest(), null,
                                                                 IdentityProviderStatus.getDefault(),
                                                                 new Date(1610683994059L));
        assertTrue(identityprovider.isValid());
        IdentityProvider identityproviderInvalid = new IdentityProvider("\u001aëº³@ê©µ@çª¥VUD\u000eA.L=GZâ¼”ä?ºW \u0011\u000fæ•ƒæ³?<R>ëœ²â„??â?£T/<-ç¸­ ì¨Š\u0007Y'ìª¹å?²î—»//,ä”‘X,Q\u000báª”Sê?˜à¸¾=í”—(,ä?–^\u000e",
                                                                        new Date(1610683986063L),
                                                                        "f560af8b-7a25-42f1-b121-2579f055ddb85b9427a6-7bce-4287-a4e9-36132de9ed501c32f2df-f6f8-4c05-a288-0a8ce73ebad05fd215aa-de0a-4968-8caa-b8f7215bbbcbbd2116de-028a-4042-bdb8-1da9aaf7ecf248fa8283-110f-4196-a849-93e95582d25caea24444-4661-497c-af7c-e39ff01116e6218eff79-80dc-4ffe-aad0-ebd705d1727618b1def1-cbd1-4877-a3c1-d9da25926aa0d82ab97b-845a-4c1d-a7a7-41a456da2f70e9f45612-916d-4e0d-aa92-b0b0ad84ff7bc08af02f-795f-4ad0-96a5-1c144657a245fcd15683-4457-414b-b882-dd30ed34e302f023b232-616d-4ca4-8f91-fb79e3a21d8e",
                                                                        "\u001aëº³@ê©µ@çª¥VUD\u000eA.L=GZâ¼”ä?ºW \u0011\u000fæ•ƒæ³?<R>ëœ²â„??â?£T/<-ç¸­ ì¨Š\u0007Y'ìª¹å?²î—»//,ä”‘X,Q\u000báª”Sê?˜à¸¾=í”—(,ä?–^\u000e",
                                                                        null, false, null, new OidcRequest(), null,
                                                                        IdentityProviderStatus.getDefault(),
                                                                        new Date(1610683994480L));
        assertFalse(identityproviderInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            IdentityProvider identityprovider1 = new IdentityProvider("3b2c98a6b0d3341e5184f0f766dde798",
                                                                      new Date(1610683990853L),
                                                                      "780844e2-e76b-4bc6-927b-6c0c8b67dea6",
                                                                      "3b2c98a6b0d3341e5184f0f766dde798",
                                                                      IdentityProviderType.getDefault(), false,
                                                                      "b3ea330b-c302-42c8-8ff9-f3e60478ea04",
                                                                      new OidcRequest(), null,
                                                                      IdentityProviderStatus.getDefault(),
                                                                      new Date(1610683986077L));
            IdentityProvider identityprovider2 = new IdentityProvider("3b2c98a6b0d3341e5184f0f766dde798",
                                                                      new Date(1610683990853L),
                                                                      "780844e2-e76b-4bc6-927b-6c0c8b67dea6",
                                                                      "3b2c98a6b0d3341e5184f0f766dde798",
                                                                      IdentityProviderType.getDefault(), false,
                                                                      "b3ea330b-c302-42c8-8ff9-f3e60478ea04",
                                                                      new OidcRequest(), null,
                                                                      IdentityProviderStatus.getDefault(),
                                                                      new Date(1610683986077L));
            IdentityProvider identityprovider3 = new IdentityProvider("3b2c98a6b0d3341e5184f0f766dde798",
                                                                      new Date(1610683994948L),
                                                                      "ccf28137-5ced-4e0f-887f-f3a45cacc7e7",
                                                                      "3b2c98a6b0d3341e5184f0f766dde798",
                                                                      IdentityProviderType.getDefault(), false,
                                                                      "5a6fb1f2-b6b9-4720-ae4e-ecdb2d709bbc",
                                                                      new OidcRequest(), null,
                                                                      IdentityProviderStatus.getDefault(),
                                                                      new Date(1610683992351L));
            assertNotNull(identityprovider1);
            assertNotNull(identityprovider2);
            assertNotNull(identityprovider3);
            assertNotSame(identityprovider2, identityprovider1);
            assertNotSame(identityprovider3, identityprovider1);
            assertEquals(identityprovider2, identityprovider1);
            assertEquals(identityprovider2, identityprovider1);
            assertEquals(identityprovider1, identityprovider2);
            assertEquals(identityprovider1, identityprovider1);
            assertFalse(identityprovider1.equals(null));
            assertNotEquals(identityprovider3, identityprovider1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
