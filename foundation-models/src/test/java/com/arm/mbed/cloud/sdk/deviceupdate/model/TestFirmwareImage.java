// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.deviceupdate.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model FirmwareImage.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestFirmwareImage {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1610683991335L),
                                                             "5142ba17-4076-435c-9009-65f751036836", -125,
                                                             "ea331a6d-73eb-48e6-93cf-cc077cf6ab5e",
                                                             "ff135aeb-cbb5-4727-bacf-c6cdbaeb5b5e",
                                                             "2D8edCD964DCD3cfaCA9bfF2C99DA2dB",
                                                             "1f3234a5-6982-40f5-8218-84ca1b4e07a8",
                                                             new Date(1610683990799L));
            FirmwareImage firmwareimage2 = firmwareimage1.clone();
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1610683991638L),
                                                             "199f2f28-bdb0-4d46-839a-50ff93e27512", -49,
                                                             "99926922-81bb-4e6a-8f13-1f9ab76c6516",
                                                             "642bd1bb-5692-44dc-8881-2a40361caac5",
                                                             "2D8edCD964DCD3cfaCA9bfF2C99DA2dB",
                                                             "1db1b9ee-ad7c-48bb-bc4d-9c0e4c5131dc",
                                                             new Date(1610683987852L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1610683991638L),
                                                             "199f2f28-bdb0-4d46-839a-50ff93e27512", -49,
                                                             "99926922-81bb-4e6a-8f13-1f9ab76c6516",
                                                             "642bd1bb-5692-44dc-8881-2a40361caac5",
                                                             "2D8edCD964DCD3cfaCA9bfF2C99DA2dB",
                                                             "1db1b9ee-ad7c-48bb-bc4d-9c0e4c5131dc",
                                                             new Date(1610683987852L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2.hashCode(), firmwareimage1.hashCode());
            int hashCode = firmwareimage1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, firmwareimage1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        FirmwareImage firmwareimage = new FirmwareImage(new Date(1610683988429L),
                                                        "519a072a-48be-4c5f-ad88-908a31503edd", 14,
                                                        "373062c8-c414-433c-b083-a1f648871f68",
                                                        "e88fc32f-492d-475f-8efb-b9cfc85f69a6",
                                                        "2D8edCD964DCD3cfaCA9bfF2C99DA2dB",
                                                        "31fdfef3-571b-480c-8a90-6b23dc08bc04",
                                                        new Date(1610683985555L));
        assertTrue(firmwareimage.isValid());
        FirmwareImage firmwareimageInvalid = new FirmwareImage(new Date(1610683987488L),
                                                               "35129cc1-01ac-4721-8f33-606065fc7c0a", 40,
                                                               "de75b20f-9542-4568-a5a3-2a3352123c57",
                                                               "dda49753-8a3e-4d65-8ccb-36f6d2dad5d3e86af0c4-b600-475b-bdbc-9444bb242e0457b9c38f-247c-43d7-9bd3-9e316a091391c966bb98-fc4b-4288-a9f1-d0c4f24fa8fa0ecfa5cc-b190-4899-a8b3-6f3ff580d46699cdf9e5-4549-4f82-9b22-e60f4030abdbbc6f7739-a5fc-447c-a61b-b5e5e76ee227c828bca7-4a4e-4573-aedb-a0cbfaf957af3a05e297-f871-48fa-b4d6-08c92c93bf4981da5651-e6d7-46f1-a6e2-f61b4ab59e278963ddac-327a-49aa-8dcf-1a3c8afc9dc39ad81f9d-c561-4075-8926-d4aca25ac9f5e263081f-5f71-41be-ba4c-538c7cbbe2934df50468-4728-4f6d-943e-782642d82e9fdca4bae3-17d9-4bfd-a4e3-a45538d1dfa947aa790a-e2ce-45ec-8e36-3dcc2fda776fbfb78a97-6364-4d73-aff5-64195936d2f9e531e465-2031-4b7f-8b53-6e17e33728345e0ab275-ad6f-48fb-b5cd-fed880131666c8e1c3cb-b826-404b-812d-7bc120c3be7404d4e253-685d-495c-9bde-ee44e8e80fe158677097-71d3-46c1-9956-b09eccb095cedd7a34ef-e625-4b6b-896d-7881b9a61a87c161b3dc-5195-47d1-8111-0961aabd62a1cc67d54c-54df-4ab5-9fb2-23b6a21b8aa60d8b3e79-551a-45ff-bb23-080274959fefcd6800c2-7ced-4367-a08b-8d910790adadff93ef23-dda1-4e8e-b6bc-e1a5eaa08bfe8bce02ff-1831-49fa-85de-0d215aa1cd712d04c8ae-f8be-4cec-9666-269b612e225d5b020a46-583c-4970-b2fe-82c57ca108d6003c6340-dc47-495a-8bd9-6356a728ef0c930d1e5b-21be-4f5e-9389-96d57da0e41522ac47e8-83d3-49d2-a5ae-be9cf3799f824c03267b-0354-43e4-a054-446062ab504653a74942-1901-41a8-9b95-c4337a21ca43d323da97-8af7-4432-830e-5ced9205880f2a8cd34d-bada-4c58-a444-eaccf5a9cbe673e54b2f-b566-41e8-b111-9a205aa070b0b7b05845-7a38-478a-98d6-23cf4b65aaa764411b80-08ca-4030-8a03-22ab137e806da9a7ed1e-d091-4385-9cd5-59ec6917246c3a81fa06-892c-4571-a30f-336c9a1f632e62d72408-c924-49da-bb58-b30fca5284662b900566-8cc3-40d5-b089-bafa0b41f988a5ce8736-7844-4203-a079-01e3370892c0fd99146e-027a-4cf6-93dc-c9d4a1d87ba2822ccdf1-365b-4107-8b10-a9b96392ca2fae288e91-c54b-42c4-9cf2-ca0dd7441138761ba5bf-f219-4bae-ae68-4396fcad1fcfa38fc923-8301-49c9-b530-003ff5e97e8d6f7b1b9b-c911-42bb-b48e-2961b04b0a7f9ba96ce4-27a2-49e2-88b5-97568257deb0265b6288-b372-4b03-8bda-46862adb860633c31619-8e28-4777-a720-e577cc791dd3d437bea7-6463-493f-918c-3adf22b246a3",
                                                               "5Eá‰¶\u0006;<Z57\u001cV77*RL\b;7Ué‚?î§ƒEí‹º5E_<TZ5T5ê?žQç?®E\u00015\u000fL77QE\u0006E 7Jå™¥Eî€˜577\u0012è?º\u0005!IU7",
                                                               "f43e66aa-46f4-48fb-b3eb-72474780cefcddef1d7c-c8d1-4bfd-a871-41e48662325895b8c78a-90da-48fe-9406-ffdc3cf3eb5eab04977b-57bf-4a9b-bc68-590a3dff8d02",
                                                               new Date(1610683990253L));
        assertFalse(firmwareimageInvalid.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            FirmwareImage firmwareimage1 = new FirmwareImage(new Date(1610683990010L),
                                                             "862b5248-7323-45ea-90aa-2474c62a79f4", -77,
                                                             "f455d51a-0d45-4758-a634-205b952a3201",
                                                             "820aed37-9495-45e0-8049-de56f0ee8ac1",
                                                             "2D8edCD964DCD3cfaCA9bfF2C99DA2dB",
                                                             "af710fb2-9e5d-472a-940e-e4f61e1a8cb9",
                                                             new Date(1610683994973L));
            FirmwareImage firmwareimage2 = new FirmwareImage(new Date(1610683990010L),
                                                             "862b5248-7323-45ea-90aa-2474c62a79f4", -77,
                                                             "f455d51a-0d45-4758-a634-205b952a3201",
                                                             "820aed37-9495-45e0-8049-de56f0ee8ac1",
                                                             "2D8edCD964DCD3cfaCA9bfF2C99DA2dB",
                                                             "af710fb2-9e5d-472a-940e-e4f61e1a8cb9",
                                                             new Date(1610683994973L));
            FirmwareImage firmwareimage3 = new FirmwareImage(new Date(1610683985348L),
                                                             "d3aa5fc1-adff-4dd2-971d-487ab12f6c29", 94,
                                                             "8912cfec-048c-40ad-a3d6-9949b107566a",
                                                             "89731096-e0ee-4ecc-8ddd-24304e4eaa80",
                                                             "2D8edCD964DCD3cfaCA9bfF2C99DA2dB",
                                                             "d5187c4d-d850-4770-8d90-f8ec6700be75",
                                                             new Date(1610683989215L));
            assertNotNull(firmwareimage1);
            assertNotNull(firmwareimage2);
            assertNotNull(firmwareimage3);
            assertNotSame(firmwareimage2, firmwareimage1);
            assertNotSame(firmwareimage3, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage2, firmwareimage1);
            assertEquals(firmwareimage1, firmwareimage2);
            assertEquals(firmwareimage1, firmwareimage1);
            assertFalse(firmwareimage1.equals(null));
            assertNotEquals(firmwareimage3, firmwareimage1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
