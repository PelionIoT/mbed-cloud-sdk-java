// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.security.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model ServerCredentials.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestServerCredentials {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1610683990561L),
                                                                         "c3d6eddb-467f-49dc-9e26-bb93470ea365",
                                                                         "eef5f9da-b719-4e42-810d-3a5ae9725d95",
                                                                         "f845dc70-42a8-46d4-ada7-4a9b43227163");
            ServerCredentials servercredentials2 = servercredentials1.clone();
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1610683990434L),
                                                                         "b71797c4-8da9-48e6-999b-1315a9cc3f40",
                                                                         "a53e4dac-40ce-4b70-98b4-e774d4ac4074",
                                                                         "a2434fd4-dbcf-44b1-8c5f-968bab5bea2b");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1610683990434L),
                                                                         "b71797c4-8da9-48e6-999b-1315a9cc3f40",
                                                                         "a53e4dac-40ce-4b70-98b4-e774d4ac4074",
                                                                         "a2434fd4-dbcf-44b1-8c5f-968bab5bea2b");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotSame(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2.hashCode(), servercredentials1.hashCode());
            int hashCode = servercredentials1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, servercredentials1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        ServerCredentials servercredentials = new ServerCredentials(new Date(1610683988639L),
                                                                    "c3561a30-4138-4d93-9579-76f91d702c9e",
                                                                    "d6124995-f9bd-4473-9e3f-d218039a1342",
                                                                    "073e9451-009e-4f69-9795-917b1acad816");
        assertTrue(servercredentials.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            ServerCredentials servercredentials1 = new ServerCredentials(new Date(1610683992418L),
                                                                         "4046e4b6-8ebf-45cf-a13e-1ee3dfb6a62a",
                                                                         "d84292da-bf19-4826-9ddb-98324fe4349f",
                                                                         "27c8afbf-bd6f-468b-86af-80c2863789c4");
            ServerCredentials servercredentials2 = new ServerCredentials(new Date(1610683992418L),
                                                                         "4046e4b6-8ebf-45cf-a13e-1ee3dfb6a62a",
                                                                         "d84292da-bf19-4826-9ddb-98324fe4349f",
                                                                         "27c8afbf-bd6f-468b-86af-80c2863789c4");
            ServerCredentials servercredentials3 = new ServerCredentials(new Date(1610683986564L),
                                                                         "69be6282-cf64-43ab-baba-bb81e2473ebf",
                                                                         "a79af037-ae54-43d8-a16d-686fdafe8ef7",
                                                                         "153d828b-5a17-4e9b-9332-9f2de11851ba");
            assertNotNull(servercredentials1);
            assertNotNull(servercredentials2);
            assertNotNull(servercredentials3);
            assertNotSame(servercredentials2, servercredentials1);
            assertNotSame(servercredentials3, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials2, servercredentials1);
            assertEquals(servercredentials1, servercredentials2);
            assertEquals(servercredentials1, servercredentials1);
            assertFalse(servercredentials1.equals(null));
            assertNotEquals(servercredentials3, servercredentials1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
