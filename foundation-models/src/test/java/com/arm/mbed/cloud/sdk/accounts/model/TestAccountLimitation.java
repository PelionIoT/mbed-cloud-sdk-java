// This file was generated by the Pelion SDK foundation code generator.
// This is an autogenerated unit test class. Do not modify its content as modifications will be lost at next code generation.
package com.arm.mbed.cloud.sdk.accounts.model;

import static org.junit.Assert.*;

import java.util.Date;
import org.junit.Test;

/**
 * Unit tests for Model AccountLimitation.
 */
@SuppressWarnings("PMD.AvoidDuplicateLiterals")
public class TestAccountLimitation {
    /**
     * Tests the clone method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testClone() {
        try {
            AccountLimitation accountlimitation1 = new AccountLimitation(19, new Date(1610683988592L),
                                                                         "a06a2388-4e7b-4316-95cf-d6001c5c5bb1",
                                                                         "d19fc44c-097f-4f7d-b790-4d893e739cd8", false,
                                                                         "bc11250e-25f5-4b7a-89b9-be5dd57cc587",
                                                                         AccountLimitationInheritedType.getDefault(),
                                                                         null, -70,
                                                                         "76ca5d87-98bf-40ea-b92c-2d4875e0d83e", -39,
                                                                         new Date(1610683988062L));
            AccountLimitation accountlimitation2 = accountlimitation1.clone();
            assertNotNull(accountlimitation1);
            assertNotNull(accountlimitation2);
            assertNotSame(accountlimitation2, accountlimitation1);
            assertEquals(accountlimitation2, accountlimitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the hashCode method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testHashCode() {
        try {
            AccountLimitation accountlimitation1 = new AccountLimitation(1, new Date(1610683988416L),
                                                                         "fdd7a8ec-c0d5-4385-be32-58a554fa75de",
                                                                         "059ec682-922b-465f-9a99-2fb3ffe67212", false,
                                                                         "efefd919-0446-4544-b0f0-67faee0bf993",
                                                                         AccountLimitationInheritedType.getDefault(),
                                                                         null, 72,
                                                                         "70d6e3ed-7b9b-459f-b1a4-ffbb61c4e6da", -29,
                                                                         new Date(1610683992189L));
            AccountLimitation accountlimitation2 = new AccountLimitation(1, new Date(1610683988416L),
                                                                         "fdd7a8ec-c0d5-4385-be32-58a554fa75de",
                                                                         "059ec682-922b-465f-9a99-2fb3ffe67212", false,
                                                                         "efefd919-0446-4544-b0f0-67faee0bf993",
                                                                         AccountLimitationInheritedType.getDefault(),
                                                                         null, 72,
                                                                         "70d6e3ed-7b9b-459f-b1a4-ffbb61c4e6da", -29,
                                                                         new Date(1610683992189L));
            assertNotNull(accountlimitation1);
            assertNotNull(accountlimitation2);
            assertNotSame(accountlimitation2, accountlimitation1);
            assertEquals(accountlimitation2, accountlimitation1);
            assertEquals(accountlimitation2.hashCode(), accountlimitation1.hashCode());
            int hashCode = accountlimitation1.hashCode();
            for (int i = 0; i < 5; i++) {
                assertEquals(hashCode, accountlimitation1.hashCode());
            }
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }

    /**
     * Tests the isValid method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testIsValid() {
        AccountLimitation accountlimitation = new AccountLimitation(1, new Date(1610683990317L),
                                                                    "1e970c5b-9b08-4d1b-b23f-41cdca1c4e62",
                                                                    "c4fba79a-5751-44ce-8d71-3eb197f6e3dd", false,
                                                                    "a4d65e61-1f6d-4c7e-99d0-970b0c6f9764",
                                                                    AccountLimitationInheritedType.getDefault(), null,
                                                                    -128, "aa2f5064-5b1f-4937-8793-900e11eedd38", -71,
                                                                    new Date(1610683991174L));
        assertTrue(accountlimitation.isValid());
    }

    /**
     * Tests the equals method.
     */
    @SuppressWarnings("resource")
    @Test
    public void testEquals() {
        try {
            AccountLimitation accountlimitation1 = new AccountLimitation(1, new Date(1610683993013L),
                                                                         "ff455af8-3e86-4fcd-80c1-73eaa17cfbe4",
                                                                         "2a838acb-dc78-441a-994b-680c7ea5f410", false,
                                                                         "7ff5db07-626f-42a7-b863-91e2a621da18",
                                                                         AccountLimitationInheritedType.getDefault(),
                                                                         null, -39,
                                                                         "addc502a-b347-4bcb-8f07-97f2625db185", 116,
                                                                         new Date(1610683987187L));
            AccountLimitation accountlimitation2 = new AccountLimitation(1, new Date(1610683993013L),
                                                                         "ff455af8-3e86-4fcd-80c1-73eaa17cfbe4",
                                                                         "2a838acb-dc78-441a-994b-680c7ea5f410", false,
                                                                         "7ff5db07-626f-42a7-b863-91e2a621da18",
                                                                         AccountLimitationInheritedType.getDefault(),
                                                                         null, -39,
                                                                         "addc502a-b347-4bcb-8f07-97f2625db185", 116,
                                                                         new Date(1610683987187L));
            AccountLimitation accountlimitation3 = new AccountLimitation(72, new Date(1610683991929L),
                                                                         "8d85ae24-b8c9-48cc-a1af-ea371924cac4",
                                                                         "a033b28d-4fdc-48bb-a3d8-862a1e49b43e", false,
                                                                         "02149934-1166-4b2f-9827-7b3f9ad8243d",
                                                                         AccountLimitationInheritedType.getDefault(),
                                                                         null, 31,
                                                                         "116996f0-7518-48f3-ba21-f20253ab10ad", 62,
                                                                         new Date(1610683990941L));
            assertNotNull(accountlimitation1);
            assertNotNull(accountlimitation2);
            assertNotNull(accountlimitation3);
            assertNotSame(accountlimitation2, accountlimitation1);
            assertNotSame(accountlimitation3, accountlimitation1);
            assertEquals(accountlimitation2, accountlimitation1);
            assertEquals(accountlimitation2, accountlimitation1);
            assertEquals(accountlimitation1, accountlimitation2);
            assertEquals(accountlimitation1, accountlimitation1);
            assertFalse(accountlimitation1.equals(null));
            assertNotEquals(accountlimitation3, accountlimitation1);
        } catch (Exception exception) {
            fail(exception.getMessage());
        }
    }
}
